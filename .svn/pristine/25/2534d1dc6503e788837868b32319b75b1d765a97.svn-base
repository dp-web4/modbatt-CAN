
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af0  08016fc0  08016fc0  00026fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018ab0  08018ab0  00028ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018ab8  08018ab8  00028ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018abc  08018abc  00028abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000008  08018ac0  00030008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a4e8  200002d0  08018d88  000302d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a7b8  08018d88  0003a7b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000328f1  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005259  00000000  00000000  00062bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002be8  00000000  00000000  00067e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a40  00000000  00000000  0006aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002852a  00000000  00000000  0006d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c414  00000000  00000000  000959a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f94e6  00000000  00000000  000c1db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bb29c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d628  00000000  00000000  001bb2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08016fa0 	.word	0x08016fa0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	08016fa0 	.word	0x08016fa0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bf 	b.w	8000fec <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b974 	b.w	8000fec <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468e      	mov	lr, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14d      	bne.n	8000dc6 <__udivmoddi4+0xaa>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d969      	bls.n	8000e04 <__udivmoddi4+0xe8>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b152      	cbz	r2, 8000d4c <__udivmoddi4+0x30>
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	f1c2 0120 	rsb	r1, r2, #32
 8000d3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d46:	ea41 0e03 	orr.w	lr, r1, r3
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	0c21      	lsrs	r1, r4, #16
 8000d52:	fbbe f6f8 	udiv	r6, lr, r8
 8000d56:	fa1f f78c 	uxth.w	r7, ip
 8000d5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d62:	fb06 f107 	mul.w	r1, r6, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x64>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d72:	f080 811f 	bcs.w	8000fb4 <__udivmoddi4+0x298>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 811c 	bls.w	8000fb4 <__udivmoddi4+0x298>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb00 f707 	mul.w	r7, r0, r7
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x92>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	f080 810a 	bcs.w	8000fb8 <__udivmoddi4+0x29c>
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	f240 8107 	bls.w	8000fb8 <__udivmoddi4+0x29c>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db2:	1be4      	subs	r4, r4, r7
 8000db4:	2600      	movs	r6, #0
 8000db6:	b11d      	cbz	r5, 8000dc0 <__udivmoddi4+0xa4>
 8000db8:	40d4      	lsrs	r4, r2
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d909      	bls.n	8000dde <__udivmoddi4+0xc2>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	f000 80ef 	beq.w	8000fae <__udivmoddi4+0x292>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	fab3 f683 	clz	r6, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d14a      	bne.n	8000e7c <__udivmoddi4+0x160>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xd4>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 80f9 	bhi.w	8000fe2 <__udivmoddi4+0x2c6>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	469e      	mov	lr, r3
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e0      	beq.n	8000dc0 <__udivmoddi4+0xa4>
 8000dfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e02:	e7dd      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xec>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	f040 8092 	bne.w	8000f36 <__udivmoddi4+0x21a>
 8000e12:	eba1 010c 	sub.w	r1, r1, ip
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2601      	movs	r6, #1
 8000e20:	0c20      	lsrs	r0, r4, #16
 8000e22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e26:	fb07 1113 	mls	r1, r7, r3, r1
 8000e2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2e:	fb0e f003 	mul.w	r0, lr, r3
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x12c>
 8000e36:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x12a>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2c0>
 8000e46:	4643      	mov	r3, r8
 8000e48:	1a09      	subs	r1, r1, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1110 	mls	r1, r7, r0, r1
 8000e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x156>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x154>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2ca>
 8000e70:	4608      	mov	r0, r1
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000e7c:	f1c6 0720 	rsb	r7, r6, #32
 8000e80:	40b3      	lsls	r3, r6
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e92:	431c      	orrs	r4, r3
 8000e94:	40f9      	lsrs	r1, r7
 8000e96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fb09 1118 	mls	r1, r9, r8, r1
 8000eac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b8>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000edc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	458e      	cmp	lr, r1
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1e2>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2b4>
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2b4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4461      	add	r1, ip
 8000efe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f02:	fba0 9402 	umull	r9, r4, r0, r2
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x2a4>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x2a0>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x212>
 8000f16:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f22:	fa22 f306 	lsr.w	r3, r2, r6
 8000f26:	40f1      	lsrs	r1, r6
 8000f28:	431f      	orrs	r7, r3
 8000f2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c2 0320 	rsb	r3, r2, #32
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
 8000f44:	4091      	lsls	r1, r2
 8000f46:	4301      	orrs	r1, r0
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f54:	fb07 3610 	mls	r6, r7, r0, r3
 8000f58:	0c0b      	lsrs	r3, r1, #16
 8000f5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f62:	429e      	cmp	r6, r3
 8000f64:	fa04 f402 	lsl.w	r4, r4, r2
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x260>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1b9b      	subs	r3, r3, r6
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f84:	fb07 3316 	mls	r3, r7, r6, r3
 8000f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x28a>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000fa2:	3e02      	subs	r6, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0x104>
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e705      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e3      	b.n	8000d80 <__udivmoddi4+0x64>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6f8      	b.n	8000dae <__udivmoddi4+0x92>
 8000fbc:	454b      	cmp	r3, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f8>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f8>
 8000fcc:	4646      	mov	r6, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x28a>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1e2>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b8>
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	4461      	add	r1, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x12c>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e709      	b.n	8000dfa <__udivmoddi4+0xde>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x156>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d11a      	bne.n	8001046 <DRV_CANFDSPI_Reset+0x56>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 8001016:	8811      	ldrh	r1, [r2, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00c fa9e 	bl	800d55c <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001020:	89bb      	ldrh	r3, [r7, #12]
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 8001028:	4917      	ldr	r1, [pc, #92]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 800102c:	f00e fe14 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a15      	ldr	r2, [pc, #84]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 800103a:	8811      	ldrh	r1, [r2, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f00c fa8c 	bl	800d55c <HAL_GPIO_WritePin>
 8001044:	e019      	b.n	800107a <DRV_CANFDSPI_Reset+0x8a>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 800104c:	8811      	ldrh	r1, [r2, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00c fa83 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 8001062:	f00e fdf9 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 8001070:	8811      	ldrh	r1, [r2, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f00c fa71 	bl	800d55c <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002ec 	.word	0x200002ec
 800108c:	20000c98 	.word	0x20000c98
 8001090:	20000c96 	.word	0x20000c96
 8001094:	2000034c 	.word	0x2000034c
 8001098:	20000510 	.word	0x20000510
 800109c:	20000c78 	.word	0x20000c78
 80010a0:	20000c76 	.word	0x20000c76

080010a4 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	603a      	str	r2, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	460b      	mov	r3, r1
 80010b2:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3330      	adds	r3, #48	; 0x30
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010cc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d4:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d11a      	bne.n	8001118 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c fa35 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 80010fa:	4919      	ldr	r1, [pc, #100]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 80010fe:	f00e fdab 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f00c fa23 	bl	800d55c <HAL_GPIO_WritePin>
 8001116:	e019      	b.n	800114c <DRV_CANFDSPI_ReadByte+0xa8>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 800111e:	8811      	ldrh	r1, [r2, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa1a 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001128:	89bb      	ldrh	r3, [r7, #12]
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 8001130:	490b      	ldr	r1, [pc, #44]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 8001134:	f00e fd90 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 8001142:	8811      	ldrh	r1, [r2, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f00c fa08 	bl	800d55c <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 800114e:	789a      	ldrb	r2, [r3, #2]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000c98 	.word	0x20000c98
 8001168:	20000c96 	.word	0x20000c96
 800116c:	2000034c 	.word	0x2000034c
 8001170:	20000510 	.word	0x20000510
 8001174:	20000c78 	.word	0x20000c78
 8001178:	20000c76 	.word	0x20000c76

0800117c <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	80bb      	strh	r3, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800118e:	2303      	movs	r3, #3
 8001190:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3320      	adds	r3, #32
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011a6:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011ae:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d11a      	bne.n	80011f2 <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c f9c8 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	2264      	movs	r2, #100	; 0x64
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 80011d4:	4917      	ldr	r1, [pc, #92]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 80011d8:	f00e fd3e 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011e6:	8811      	ldrh	r1, [r2, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00c f9b6 	bl	800d55c <HAL_GPIO_WritePin>
 80011f0:	e019      	b.n	8001226 <DRV_CANFDSPI_WriteByte+0xaa>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 80011f8:	8811      	ldrh	r1, [r2, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00c f9ad 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 800120a:	490a      	ldr	r1, [pc, #40]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 800120e:	f00e fd23 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 800121c:	8811      	ldrh	r1, [r2, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f00c f99b 	bl	800d55c <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002ec 	.word	0x200002ec
 8001238:	20000c98 	.word	0x20000c98
 800123c:	20000c96 	.word	0x20000c96
 8001240:	2000034c 	.word	0x2000034c
 8001244:	20000510 	.word	0x20000510
 8001248:	20000c78 	.word	0x20000c78
 800124c:	20000c76 	.word	0x20000c76

08001250 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	603a      	str	r2, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001260:	2306      	movs	r3, #6
 8001262:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29b      	uxth	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001278:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001280:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11a      	bne.n	80012be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 800128e:	8811      	ldrh	r1, [r2, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f00c f962 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	2264      	movs	r2, #100	; 0x64
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012a0:	4927      	ldr	r1, [pc, #156]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012a2:	482b      	ldr	r0, [pc, #172]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012a4:	f00e fcd8 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a25      	ldr	r2, [pc, #148]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 80012b2:	8811      	ldrh	r1, [r2, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c f950 	bl	800d55c <HAL_GPIO_WritePin>
 80012bc:	e019      	b.n	80012f2 <DRV_CANFDSPI_ReadWord+0xa2>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012c4:	8811      	ldrh	r1, [r2, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c f947 	bl	800d55c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012da:	f00e fcbd 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012e8:	8811      	ldrh	r1, [r2, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00c f935 	bl	800d55c <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <DRV_CANFDSPI_ReadWord+0xae>
      return spiTransferError;
 80012f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012fc:	e01c      	b.n	8001338 <DRV_CANFDSPI_ReadWord+0xe8>
  }

  // Update data
  *rxd = 0;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001304:	2302      	movs	r3, #2
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e011      	b.n	800132e <DRV_CANFDSPI_ReadWord+0xde>
      x = (uint32_t) spiReceiveBuffer[i];
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3b02      	subs	r3, #2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	441a      	add	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d9ea      	bls.n	800130a <DRV_CANFDSPI_ReadWord+0xba>
  }

  return spiTransferError;
 8001334:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200002ec 	.word	0x200002ec
 8001344:	20000c98 	.word	0x20000c98
 8001348:	20000c96 	.word	0x20000c96
 800134c:	2000034c 	.word	0x2000034c
 8001350:	20000510 	.word	0x20000510
 8001354:	20000c78 	.word	0x20000c78
 8001358:	20000c76 	.word	0x20000c76

0800135c <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	4603      	mov	r3, r0
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	460b      	mov	r3, r1
 800136a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 800136c:	2306      	movs	r3, #6
 800136e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3320      	adds	r3, #32
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001384:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 800138c:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00b      	b.n	80013ac <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	40da      	lsrs	r2, r3
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013a4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9f0      	bls.n	8001394 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11a      	bne.n	80013ee <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013be:	8811      	ldrh	r1, [r2, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c f8ca 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	2264      	movs	r2, #100	; 0x64
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 80013d4:	f00e fc40 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80013d8:	4603      	mov	r3, r0
 80013da:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013e2:	8811      	ldrh	r1, [r2, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00c f8b8 	bl	800d55c <HAL_GPIO_WritePin>
 80013ec:	e019      	b.n	8001422 <DRV_CANFDSPI_WriteWord+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 80013f4:	8811      	ldrh	r1, [r2, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c f8af 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	2264      	movs	r2, #100	; 0x64
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 800140a:	f00e fc25 	bl	800fc58 <HAL_SPI_TransmitReceive>
 800140e:	4603      	mov	r3, r0
 8001410:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 8001418:	8811      	ldrh	r1, [r2, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f00c f89d 	bl	800d55c <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8001422:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002ec 	.word	0x200002ec
 8001434:	20000c98 	.word	0x20000c98
 8001438:	20000c96 	.word	0x20000c96
 800143c:	2000034c 	.word	0x2000034c
 8001440:	20000510 	.word	0x20000510
 8001444:	20000c78 	.word	0x20000c78
 8001448:	20000c76 	.word	0x20000c76

0800144c <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	603a      	str	r2, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	460b      	mov	r3, r1
 800145a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3330      	adds	r3, #48	; 0x30
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 8001474:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800147c:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11a      	bne.n	80014ba <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 800148a:	8811      	ldrh	r1, [r2, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00c f864 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	2264      	movs	r2, #100	; 0x64
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800149c:	4928      	ldr	r1, [pc, #160]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800149e:	482c      	ldr	r0, [pc, #176]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014a0:	f00e fbda 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 80014ae:	8811      	ldrh	r1, [r2, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00c f852 	bl	800d55c <HAL_GPIO_WritePin>
 80014b8:	e019      	b.n	80014ee <DRV_CANFDSPI_ReadHalfWord+0xa2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014c0:	8811      	ldrh	r1, [r2, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00c f849 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014ca:	89bb      	ldrh	r3, [r7, #12]
 80014cc:	2264      	movs	r2, #100	; 0x64
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 80014d2:	491b      	ldr	r1, [pc, #108]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014d6:	f00e fbbf 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80014da:	4603      	mov	r3, r0
 80014dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014e4:	8811      	ldrh	r1, [r2, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00c f837 	bl	800d55c <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <DRV_CANFDSPI_ReadHalfWord+0xae>
        return spiTransferError;
 80014f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014f8:	e01e      	b.n	8001538 <DRV_CANFDSPI_ReadHalfWord+0xec>
    }

    // Update data
    *rxd = 0;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001500:	2302      	movs	r3, #2
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e013      	b.n	800152e <DRV_CANFDSPI_ReadHalfWord+0xe2>
        x = (uint32_t) spiReceiveBuffer[i];
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3b02      	subs	r3, #2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29a      	uxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9e8      	bls.n	8001506 <DRV_CANFDSPI_ReadHalfWord+0xba>
    }

    return spiTransferError;
 8001534:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002ec 	.word	0x200002ec
 8001544:	20000c98 	.word	0x20000c98
 8001548:	20000c96 	.word	0x20000c96
 800154c:	2000034c 	.word	0x2000034c
 8001550:	20000510 	.word	0x20000510
 8001554:	20000c78 	.word	0x20000c78
 8001558:	20000c76 	.word	0x20000c76

0800155c <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	460b      	mov	r3, r1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3320      	adds	r3, #32
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 8001586:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800158e:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00b      	b.n	80015ae <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	411a      	asrs	r2, r3
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3302      	adds	r3, #2
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015a6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d9f0      	bls.n	8001596 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11a      	bne.n	80015f0 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015c0:	8811      	ldrh	r1, [r2, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00b ffc9 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015ca:	89bb      	ldrh	r3, [r7, #12]
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 80015d6:	f00e fb3f 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015e4:	8811      	ldrh	r1, [r2, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00b ffb7 	bl	800d55c <HAL_GPIO_WritePin>
 80015ee:	e019      	b.n	8001624 <DRV_CANFDSPI_WriteHalfWord+0xc8>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 80015f6:	8811      	ldrh	r1, [r2, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00b ffae 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	2264      	movs	r2, #100	; 0x64
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 800160c:	f00e fb24 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 800161a:	8811      	ldrh	r1, [r2, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f00b ff9c 	bl	800d55c <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001624:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200002ec 	.word	0x200002ec
 8001634:	20000c98 	.word	0x20000c98
 8001638:	20000c96 	.word	0x20000c96
 800163c:	2000034c 	.word	0x2000034c
 8001640:	20000510 	.word	0x20000510
 8001644:	20000c78 	.word	0x20000c78
 8001648:	20000c76 	.word	0x20000c76

0800164c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	460b      	mov	r3, r1
 800165c:	81bb      	strh	r3, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3302      	adds	r3, #2
 8001666:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001668:	8a7b      	ldrh	r3, [r7, #18]
 800166a:	2b60      	cmp	r3, #96	; 0x60
 800166c:	d902      	bls.n	8001674 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e068      	b.n	8001746 <DRV_CANFDSPI_ReadByteArray+0xfa>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001674:	89bb      	ldrh	r3, [r7, #12]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3330      	adds	r3, #48	; 0x30
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001688:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001690:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001692:	2302      	movs	r3, #2
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	e006      	b.n	80016a6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 800169c:	2100      	movs	r1, #0
 800169e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	3301      	adds	r3, #1
 80016a4:	82fb      	strh	r3, [r7, #22]
 80016a6:	8afa      	ldrh	r2, [r7, #22]
 80016a8:	8a7b      	ldrh	r3, [r7, #18]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3f4      	bcc.n	8001698 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11a      	bne.n	80016ea <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b ff4c 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016c4:	8a7b      	ldrh	r3, [r7, #18]
 80016c6:	2264      	movs	r2, #100	; 0x64
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 80016cc:	4920      	ldr	r1, [pc, #128]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 80016d0:	f00e fac2 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80016d4:	4603      	mov	r3, r0
 80016d6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016de:	8811      	ldrh	r1, [r2, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00b ff3a 	bl	800d55c <HAL_GPIO_WritePin>
 80016e8:	e019      	b.n	800171e <DRV_CANFDSPI_ReadByteArray+0xd2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 80016f0:	8811      	ldrh	r1, [r2, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b ff31 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 8001706:	f00e faa7 	bl	800fc58 <HAL_SPI_TransmitReceive>
 800170a:	4603      	mov	r3, r0
 800170c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 8001714:	8811      	ldrh	r1, [r2, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f00b ff1f 	bl	800d55c <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	82fb      	strh	r3, [r7, #22]
 8001722:	e00a      	b.n	800173a <DRV_CANFDSPI_ReadByteArray+0xee>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	1c9a      	adds	r2, r3, #2
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	440b      	add	r3, r1
 800172e:	490b      	ldr	r1, [pc, #44]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001730:	5c8a      	ldrb	r2, [r1, r2]
 8001732:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001734:	8afb      	ldrh	r3, [r7, #22]
 8001736:	3301      	adds	r3, #1
 8001738:	82fb      	strh	r3, [r7, #22]
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3f0      	bcc.n	8001724 <DRV_CANFDSPI_ReadByteArray+0xd8>
    }

    return spiTransferError;
 8001742:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002ec 	.word	0x200002ec
 8001754:	20000c98 	.word	0x20000c98
 8001758:	20000c96 	.word	0x20000c96
 800175c:	2000034c 	.word	0x2000034c
 8001760:	20000510 	.word	0x20000510
 8001764:	20000c78 	.word	0x20000c78
 8001768:	20000c76 	.word	0x20000c76

0800176c <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	3302      	adds	r3, #2
 8001786:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	2b60      	cmp	r3, #96	; 0x60
 800178c:	d902      	bls.n	8001794 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e05a      	b.n	800184a <DRV_CANFDSPI_WriteByteArray+0xde>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3320      	adds	r3, #32
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017a8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017b0:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	82fb      	strh	r3, [r7, #22]
 80017b6:	e00a      	b.n	80017ce <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	441a      	add	r2, r3
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	3302      	adds	r3, #2
 80017c2:	7811      	ldrb	r1, [r2, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017c6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	3301      	adds	r3, #1
 80017cc:	82fb      	strh	r3, [r7, #22]
 80017ce:	8afa      	ldrh	r2, [r7, #22]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3f0      	bcc.n	80017b8 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d11a      	bne.n	8001812 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 80017e2:	8811      	ldrh	r1, [r2, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00b feb8 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	2264      	movs	r2, #100	; 0x64
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 80017f4:	4917      	ldr	r1, [pc, #92]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017f6:	481b      	ldr	r0, [pc, #108]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 80017f8:	f00e fa2e 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80017fc:	4603      	mov	r3, r0
 80017fe:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 8001806:	8811      	ldrh	r1, [r2, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f00b fea6 	bl	800d55c <HAL_GPIO_WritePin>
 8001810:	e019      	b.n	8001846 <DRV_CANFDSPI_WriteByteArray+0xda>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 8001818:	8811      	ldrh	r1, [r2, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00b fe9d 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 800182e:	f00e fa13 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 800183c:	8811      	ldrh	r1, [r2, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f00b fe8b 	bl	800d55c <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001846:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002ec 	.word	0x200002ec
 8001858:	20000c98 	.word	0x20000c98
 800185c:	20000c96 	.word	0x20000c96
 8001860:	2000034c 	.word	0x2000034c
 8001864:	20000510 	.word	0x20000510
 8001868:	20000c78 	.word	0x20000c78
 800186c:	20000c76 	.word	0x20000c76

08001870 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	460b      	mov	r3, r1
 8001880:	81bb      	strh	r3, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	3302      	adds	r3, #2
 800188e:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	2b60      	cmp	r3, #96	; 0x60
 8001894:	d902      	bls.n	800189c <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e084      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b8:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018ba:	2302      	movs	r3, #2
 80018bc:	83fb      	strh	r3, [r7, #30]
 80018be:	e006      	b.n	80018ce <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 80018c0:	8bfb      	ldrh	r3, [r7, #30]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018c8:	8bfb      	ldrh	r3, [r7, #30]
 80018ca:	3301      	adds	r3, #1
 80018cc:	83fb      	strh	r3, [r7, #30]
 80018ce:	8bfa      	ldrh	r2, [r7, #30]
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3f4      	bcc.n	80018c0 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11a      	bne.n	8001912 <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 80018e2:	8811      	ldrh	r1, [r2, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b fe38 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	2264      	movs	r2, #100	; 0x64
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	4a32      	ldr	r2, [pc, #200]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 80018f4:	492e      	ldr	r1, [pc, #184]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018f6:	4832      	ldr	r0, [pc, #200]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 80018f8:	f00e f9ae 	bl	800fc58 <HAL_SPI_TransmitReceive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f00b fe26 	bl	800d55c <HAL_GPIO_WritePin>
 8001910:	e019      	b.n	8001946 <DRV_CANFDSPI_ReadWordArray+0xd6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 8001918:	8811      	ldrh	r1, [r2, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f00b fe1d 	bl	800d55c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001922:	8afb      	ldrh	r3, [r7, #22]
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 800192c:	4824      	ldr	r0, [pc, #144]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 800192e:	f00e f993 	bl	800fc58 <HAL_SPI_TransmitReceive>
 8001932:	4603      	mov	r3, r0
 8001934:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f00b fe0b 	bl	800d55c <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001946:	7e7b      	ldrb	r3, [r7, #25]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <DRV_CANFDSPI_ReadWordArray+0xe2>
        return spiTransferError;
 800194c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001950:	e029      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Convert Byte array to Word array
    n = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	e01e      	b.n	800199a <DRV_CANFDSPI_ReadWordArray+0x12a>
        w.word = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001960:	2300      	movs	r3, #0
 8001962:	83bb      	strh	r3, [r7, #28]
 8001964:	e00d      	b.n	8001982 <DRV_CANFDSPI_ReadWordArray+0x112>
            w.byte[j] = spiReceiveBuffer[n];
 8001966:	8b7a      	ldrh	r2, [r7, #26]
 8001968:	8bbb      	ldrh	r3, [r7, #28]
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800196c:	5c8a      	ldrb	r2, [r1, r2]
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	83bb      	strh	r3, [r7, #28]
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	3301      	adds	r3, #1
 8001980:	837b      	strh	r3, [r7, #26]
 8001982:	8bbb      	ldrh	r3, [r7, #28]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d9ee      	bls.n	8001966 <DRV_CANFDSPI_ReadWordArray+0xf6>
        }
        rxd[i] = w.word;
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
 800199a:	8bfa      	ldrh	r2, [r7, #30]
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3dc      	bcc.n	800195c <DRV_CANFDSPI_ReadWordArray+0xec>
    }

    return spiTransferError;
 80019a2:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002ec 	.word	0x200002ec
 80019b4:	20000c98 	.word	0x20000c98
 80019b8:	20000c96 	.word	0x20000c96
 80019bc:	2000034c 	.word	0x2000034c
 80019c0:	20000510 	.word	0x20000510
 80019c4:	20000c78 	.word	0x20000c78
 80019c8:	20000c76 	.word	0x20000c76

080019cc <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <DRV_CANFDSPI_Configure+0x118>)
 80019de:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	7a3b      	ldrb	r3, [r7, #8]
 80019ec:	f362 0304 	bfi	r3, r2, #0, #5
 80019f0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	f362 1345 	bfi	r3, r2, #5, #1
 8001a02:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	7a3b      	ldrb	r3, [r7, #8]
 8001a10:	f362 1386 	bfi	r3, r2, #6, #1
 8001a14:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	f362 0300 	bfi	r3, r2, #0, #1
 8001a26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	7a7b      	ldrb	r3, [r7, #9]
 8001a34:	f362 0342 	bfi	r3, r2, #1, #2
 8001a38:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	f362 1304 	bfi	r3, r2, #4, #1
 8001a4a:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	7abb      	ldrb	r3, [r7, #10]
 8001a58:	f362 0300 	bfi	r3, r2, #0, #1
 8001a5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	f362 0341 	bfi	r3, r2, #1, #1
 8001a6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	f362 0382 	bfi	r3, r2, #2, #1
 8001a80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a92:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	f362 1304 	bfi	r3, r2, #4, #1
 8001aa4:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f362 1307 	bfi	r3, r2, #4, #4
 8001ab6:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc4c 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e001      	b.n	8001ada <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	04980760 	.word	0x04980760

08001ae8 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001af2:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001afa:	b2d9      	uxtb	r1, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	7813      	ldrb	r3, [r2, #0]
 8001b00:	f361 0304 	bfi	r3, r1, #0, #5
 8001b04:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001b06:	7b3b      	ldrb	r3, [r7, #12]
 8001b08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b0c:	b2d9      	uxtb	r1, r3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	7813      	ldrb	r3, [r2, #0]
 8001b12:	f361 1345 	bfi	r3, r1, #5, #1
 8001b16:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	7813      	ldrb	r3, [r2, #0]
 8001b24:	f361 1386 	bfi	r3, r1, #6, #1
 8001b28:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	7813      	ldrb	r3, [r2, #0]
 8001b36:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b3a:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001b42:	b2d9      	uxtb	r1, r3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	7853      	ldrb	r3, [r2, #1]
 8001b48:	f361 0301 	bfi	r3, r1, #0, #2
 8001b4c:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	7853      	ldrb	r3, [r2, #1]
 8001b5a:	f361 0382 	bfi	r3, r1, #2, #1
 8001b5e:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	7853      	ldrb	r3, [r2, #1]
 8001b6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b70:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	7853      	ldrb	r3, [r2, #1]
 8001b7e:	f361 1304 	bfi	r3, r1, #4, #1
 8001b82:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	7853      	ldrb	r3, [r2, #1]
 8001b90:	f361 1345 	bfi	r3, r1, #5, #1
 8001b94:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b9c:	b2d9      	uxtb	r1, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	7853      	ldrb	r3, [r2, #1]
 8001ba2:	f361 1386 	bfi	r3, r1, #6, #1
 8001ba6:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	7853      	ldrb	r3, [r2, #1]
 8001bb4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bb8:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	7893      	ldrb	r3, [r2, #2]
 8001bc6:	f361 0303 	bfi	r3, r1, #0, #4
 8001bca:	7093      	strb	r3, [r2, #2]

    return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	04980760 	.word	0x04980760

08001be0 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001bf8:	f107 020e 	add.w	r2, r7, #14
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa4f 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e01a      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001c22:	7bba      	ldrb	r2, [r7, #14]
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001c2c:	7bba      	ldrb	r2, [r7, #14]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff faa2 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001c44:	f06f 0301 	mvn.w	r3, #1
 8001c48:	e001      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	603a      	str	r2, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	460b      	mov	r3, r1
 8001c66:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001c72:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f362 0304 	bfi	r3, r2, #0, #5
 8001c8c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	f362 1347 	bfi	r3, r2, #5, #3
 8001c9e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	f362 1346 	bfi	r3, r2, #5, #2
 8001cb0:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	f362 0304 	bfi	r3, r2, #0, #5
 8001cc2:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	7a3b      	ldrb	r3, [r7, #8]
 8001cd0:	f362 1386 	bfi	r3, r2, #6, #1
 8001cd4:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	89b9      	ldrh	r1, [r7, #12]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb34 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	00600400 	.word	0x00600400

08001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001d12:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d1a:	b2d9      	uxtb	r1, r3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	7813      	ldrb	r3, [r2, #0]
 8001d20:	f361 0300 	bfi	r3, r1, #0, #1
 8001d24:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	7813      	ldrb	r3, [r2, #0]
 8001d32:	f361 0345 	bfi	r3, r1, #1, #5
 8001d36:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001d3e:	b2d9      	uxtb	r1, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	7813      	ldrb	r3, [r2, #0]
 8001d44:	f361 1387 	bfi	r3, r1, #6, #2
 8001d48:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	7853      	ldrb	r3, [r2, #1]
 8001d56:	f361 0304 	bfi	r3, r1, #0, #5
 8001d5a:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d62:	b2d9      	uxtb	r1, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	7853      	ldrb	r3, [r2, #1]
 8001d68:	f361 1347 	bfi	r3, r1, #5, #3
 8001d6c:	7053      	strb	r3, [r2, #1]

    return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	00600400 	.word	0x00600400

08001d80 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0a0      	sub	sp, #128	; 0x80
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001dac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001db0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001db4:	7bf8      	ldrb	r0, [r7, #15]
 8001db6:	2303      	movs	r3, #3
 8001db8:	f7ff fd5a 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001dc2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e0c5      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8001dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8001dd4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8001de2:	f06f 0301 	mvn.w	r3, #1
 8001de6:	e0b9      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fc3a 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 8001df8:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8001dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d202      	bcs.n	8001e0a <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8001e04:	f06f 0302 	mvn.w	r3, #2
 8001e08:	e0a8      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8001e12:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8001e20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e28:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e62:	e010      	b.n	8001e86 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8001e64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e70:	3308      	adds	r3, #8
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	3380      	adds	r3, #128	; 0x80
 8001e76:	443b      	add	r3, r7
 8001e78:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8001e7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8e8      	bhi.n	8001e64 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02b      	beq.n	8001f02 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8001eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f1c3 0304 	rsb	r3, r3, #4
 8001eba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8001ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ed0:	e010      	b.n	8001ef4 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8001ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ed6:	f103 0208 	add.w	r2, r3, #8
 8001eda:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ede:	4413      	add	r3, r2
 8001ee0:	3380      	adds	r3, #128	; 0x80
 8001ee2:	443b      	add	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8001eea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ef4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8e7      	bhi.n	8001ed2 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3308      	adds	r3, #8
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f107 0210 	add.w	r2, r7, #16
 8001f18:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001f1c:	7bf8      	ldrb	r0, [r7, #15]
 8001f1e:	f7ff fc25 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f28:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8001f30:	f06f 0303 	mvn.w	r3, #3
 8001f34:	e012      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001f36:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8001f3a:	7bb9      	ldrb	r1, [r7, #14]
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f83a 	bl	8001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f4a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8001f52:	f06f 0304 	mvn.w	r3, #4
 8001f56:	e001      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8001f58:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3780      	adds	r7, #128	; 0x80
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	0052      	lsls	r2, r2, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3350      	adds	r3, #80	; 0x50
 8001f90:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8001f92:	89bb      	ldrh	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	89b9      	ldrh	r1, [r7, #12]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8ea 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001fac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	0052      	lsls	r2, r2, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3351      	adds	r3, #81	; 0x51
 8001fde:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8001fec:	797b      	ldrb	r3, [r7, #5]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8001ff2:	7a7b      	ldrb	r3, [r7, #9]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001ffa:	7a7a      	ldrb	r2, [r7, #9]
 8001ffc:	89b9      	ldrh	r1, [r7, #12]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f8bb 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e001      	b.n	800201c <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	603a      	str	r2, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	460b      	mov	r3, r1
 8002032:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	333e      	adds	r3, #62	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	89b9      	ldrh	r1, [r7, #12]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f982 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	603a      	str	r2, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	460b      	mov	r3, r1
 8002076:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	b29b      	uxth	r3, r3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	b29b      	uxth	r3, r3
 800208e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002092:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	89b9      	ldrh	r1, [r7, #12]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f95e 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	4603      	mov	r3, r0
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	460b      	mov	r3, r1
 80020c8:	717b      	strb	r3, [r7, #5]
 80020ca:	4613      	mov	r3, r2
 80020cc:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	723b      	strb	r3, [r7, #8]
 80020e0:	e003      	b.n	80020ea <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	f36f 13c7 	bfc	r3, #7, #1
 80020e8:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	f362 0304 	bfi	r3, r2, #0, #5
 80020f8:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002102:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002104:	7a3a      	ldrb	r2, [r7, #8]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f836 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	603a      	str	r2, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	460b      	mov	r3, r1
 800212e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800213e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002142:	e033      	b.n	80021ac <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002146:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002148:	7a3b      	ldrb	r3, [r7, #8]
 800214a:	f36f 13c7 	bfc	r3, #7, #1
 800214e:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002158:	b2da      	uxtb	r2, r3
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f362 0304 	bfi	r3, r2, #0, #5
 8002160:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f362 1347 	bfi	r3, r2, #5, #3
 8002172:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7a3b      	ldrb	r3, [r7, #8]
 8002180:	f362 1345 	bfi	r3, r2, #5, #1
 8002184:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	3350      	adds	r3, #80	; 0x50
 8002196:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f8dc 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00600400 	.word	0x00600400

080021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80021c2:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021ca:	b2d9      	uxtb	r1, r3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7813      	ldrb	r3, [r2, #0]
 80021d0:	f361 0345 	bfi	r3, r1, #1, #5
 80021d4:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021dc:	b2d9      	uxtb	r1, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	8813      	ldrh	r3, [r2, #0]
 80021e2:	f361 1388 	bfi	r3, r1, #6, #3
 80021e6:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80021e8:	7b3b      	ldrb	r3, [r7, #12]
 80021ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	7813      	ldrb	r3, [r2, #0]
 80021f4:	f361 0300 	bfi	r3, r1, #0, #1
 80021f8:	7013      	strb	r3, [r2, #0]

    return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	00600400 	.word	0x00600400

0800220c <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0a0      	sub	sp, #128	; 0x80
 8002210:	af00      	add	r7, sp, #0
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	460b      	mov	r3, r1
 800221c:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	b29b      	uxth	r3, r3
 800223e:	3350      	adds	r3, #80	; 0x50
 8002240:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002244:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002248:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800224c:	7bf8      	ldrb	r0, [r7, #15]
 800224e:	2303      	movs	r3, #3
 8002250:	f7ff fb0e 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800225a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e0cd      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800226c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800227a:	f06f 0301 	mvn.w	r3, #1
 800227e:	e0c1      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002282:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002286:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002288:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	b29b      	uxth	r3, r3
 8002292:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 8002296:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 80022a2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80022a6:	3308      	adds	r3, #8
 80022a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80022ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 80022ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022be:	3304      	adds	r3, #4
 80022c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80022c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80022d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80022e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022e6:	2b4c      	cmp	r3, #76	; 0x4c
 80022e8:	d902      	bls.n	80022f0 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80022ea:	234c      	movs	r3, #76	; 0x4c
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80022f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f107 0214 	add.w	r2, r7, #20
 80022fa:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80022fe:	7bf8      	ldrb	r0, [r7, #15]
 8002300:	f7ff f9a4 	bl	800164c <DRV_CANFDSPI_ReadByteArray>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800230a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 8002312:	f06f 0302 	mvn.w	r3, #2
 8002316:	e075      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8002318:	7d3b      	ldrb	r3, [r7, #20]
 800231a:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 800231c:	7d7b      	ldrb	r3, [r7, #21]
 800231e:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8002320:	7dbb      	ldrb	r3, [r7, #22]
 8002322:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800232e:	7e3b      	ldrb	r3, [r7, #24]
 8002330:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8002332:	7e7b      	ldrb	r3, [r7, #25]
 8002334:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002336:	7ebb      	ldrb	r3, [r7, #26]
 8002338:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 800233a:	7efb      	ldrb	r3, [r7, #27]
 800233c:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002344:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d027      	beq.n	80023a2 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8002352:	7f3b      	ldrb	r3, [r7, #28]
 8002354:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002356:	7f7b      	ldrb	r3, [r7, #29]
 8002358:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 800235a:	7fbb      	ldrb	r3, [r7, #30]
 800235c:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002368:	2300      	movs	r3, #0
 800236a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800236e:	e011      	b.n	8002394 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002370:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002374:	f103 020c 	add.w	r2, r3, #12
 8002378:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	440b      	add	r3, r1
 8002380:	3280      	adds	r2, #128	; 0x80
 8002382:	443a      	add	r2, r7
 8002384:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002388:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800238a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800238e:	3301      	adds	r3, #1
 8002390:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002394:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002398:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800239c:	429a      	cmp	r2, r3
 800239e:	d3e7      	bcc.n	8002370 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80023a0:	e01e      	b.n	80023e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023ae:	e011      	b.n	80023d4 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 80023b0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023b4:	f103 0208 	add.w	r2, r3, #8
 80023b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	440b      	add	r3, r1
 80023c0:	3280      	adds	r2, #128	; 0x80
 80023c2:	443a      	add	r2, r7
 80023c4:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80023c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80023ca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023ce:	3301      	adds	r3, #1
 80023d0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023d4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80023d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3e7      	bcc.n	80023b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80023e0:	7bba      	ldrb	r2, [r7, #14]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f810 	bl	800240c <DRV_CANFDSPI_ReceiveChannelUpdate>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80023f2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80023fa:	f06f 0303 	mvn.w	r3, #3
 80023fe:	e001      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 8002400:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002404:	4618      	mov	r0, r3
 8002406:	3780      	adds	r7, #128	; 0x80
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	4613      	mov	r3, r2
 800241a:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	b29b      	uxth	r3, r3
 8002436:	3351      	adds	r3, #81	; 0x51
 8002438:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 800243a:	7a7b      	ldrb	r3, [r7, #9]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002442:	7a7a      	ldrb	r2, [r7, #9]
 8002444:	89f9      	ldrh	r1, [r7, #14]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8002452:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	460a      	mov	r2, r1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	4613      	mov	r3, r2
 800246c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002476:	231e      	movs	r3, #30
 8002478:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800247e:	f107 0208 	add.w	r2, r7, #8
 8002482:	89b9      	ldrh	r1, [r7, #12]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ffe0 	bl	800144c <DRV_CANFDSPI_ReadHalfWord>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	e01b      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	89b9      	ldrh	r1, [r7, #12]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f84e 	bl	800155c <DRV_CANFDSPI_WriteHalfWord>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80024c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	e001      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	460b      	mov	r3, r1
 80024ec:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	0052      	lsls	r2, r2, #1
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	b29b      	uxth	r3, r3
 8002508:	3354      	adds	r3, #84	; 0x54
 800250a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	89b9      	ldrh	r1, [r7, #12]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fdc5 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e007      	b.n	800253c <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 800252c:	7a3b      	ldrb	r3, [r7, #8]
 800252e:	f003 0317 	and.w	r3, r3, #23
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	603a      	str	r2, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	460b      	mov	r3, r1
 8002552:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002562:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002566:	e022      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	b29b      	uxth	r3, r3
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800257e:	f107 0208 	add.w	r2, r7, #8
 8002582:	89b9      	ldrh	r1, [r7, #12]
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fd8c 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e007      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	460b      	mov	r3, r1
 80025c2:	71bb      	strb	r3, [r7, #6]
 80025c4:	4613      	mov	r3, r2
 80025c6:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80025d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80025da:	e036      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3350      	adds	r3, #80	; 0x50
 80025ec:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	89b9      	ldrh	r1, [r7, #12]
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd52 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e01b      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b25b      	sxtb	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002628:	7a3a      	ldrb	r2, [r7, #8]
 800262a:	89b9      	ldrh	r1, [r7, #12]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fda4 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002640:	f06f 0301 	mvn.w	r3, #1
 8002644:	e001      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800266a:	2334      	movs	r3, #52	; 0x34
 800266c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002672:	f107 0210 	add.w	r2, r7, #16
 8002676:	8ab9      	ldrh	r1, [r7, #20]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fde8 	bl	8001250 <DRV_CANFDSPI_ReadWord>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	e00d      	b.n	80026ae <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002692:	7c7a      	ldrb	r2, [r7, #17]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002698:	7c3a      	ldrb	r2, [r7, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800269e:	7cbb      	ldrb	r3, [r7, #18]
 80026a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80026aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80026c8:	f107 020e 	add.w	r2, r7, #14
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fce6 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	e015      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80026f4:	7bba      	ldrb	r2, [r7, #14]
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fd3d 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 800270e:	f06f 0301 	mvn.w	r3, #1
 8002712:	e000      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b090      	sub	sp, #64	; 0x40
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	460a      	mov	r2, r1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	4613      	mov	r3, r2
 800272c:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	e008      	b.n	800274c <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800273a:	f107 0208 	add.w	r2, r7, #8
 800273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002740:	4413      	add	r3, r2
 8002742:	79ba      	ldrb	r2, [r7, #6]
 8002744:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3301      	adds	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	2b2f      	cmp	r3, #47	; 0x2f
 8002750:	d9f3      	bls.n	800273a <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002756:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	e016      	b.n	800278c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 800275e:	f107 0208 	add.w	r2, r7, #8
 8002762:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002764:	79f8      	ldrb	r0, [r7, #7]
 8002766:	2330      	movs	r3, #48	; 0x30
 8002768:	f7ff f800 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002772:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e00a      	b.n	8002796 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002782:	3330      	adds	r3, #48	; 0x30
 8002784:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	3301      	adds	r3, #1
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	2b29      	cmp	r3, #41	; 0x29
 8002790:	d9e5      	bls.n	800275e <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002792:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002796:	4618      	mov	r0, r3
 8002798:	3740      	adds	r7, #64	; 0x40
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4604      	mov	r4, r0
 80027a6:	4608      	mov	r0, r1
 80027a8:	4611      	mov	r1, r2
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4603      	mov	r3, r0
 80027b2:	71bb      	strb	r3, [r7, #6]
 80027b4:	460b      	mov	r3, r1
 80027b6:	717b      	strb	r3, [r7, #5]
 80027b8:	4613      	mov	r3, r2
 80027ba:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80027c0:	793b      	ldrb	r3, [r7, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d036      	beq.n	8002834 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	dc4c      	bgt.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d018      	beq.n	8002804 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80027d2:	e047      	b.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80027d4:	79ba      	ldrb	r2, [r7, #6]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f84c 	bl	8002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80027ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f0:	e03d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80027f2:	797a      	ldrb	r2, [r7, #5]
 80027f4:	79b9      	ldrb	r1, [r7, #6]
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f8c3 	bl	8002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
            break;
 8002802:	e032      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002804:	79ba      	ldrb	r2, [r7, #6]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 faf2 	bl	8002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002820:	e025      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002822:	797a      	ldrb	r2, [r7, #5]
 8002824:	79b9      	ldrb	r1, [r7, #6]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fb6f 	bl	8002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
            break;
 8002832:	e01a      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002834:	79ba      	ldrb	r2, [r7, #6]
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fd10 	bl	8003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	e00d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002852:	797a      	ldrb	r2, [r7, #5]
 8002854:	79b9      	ldrb	r1, [r7, #6]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd8d 	bl	8003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
            break;
 8002862:	e002      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002864:	23ff      	movs	r3, #255	; 0xff
 8002866:	73fb      	strb	r3, [r7, #15]
            break;
 8002868:	bf00      	nop
    }

    return spiTransferError;
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
	...

08002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800288e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d862      	bhi.n	800295c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028e5 	.word	0x080028e5
 80028a0:	080028e5 	.word	0x080028e5
 80028a4:	080028e5 	.word	0x080028e5
 80028a8:	080028e5 	.word	0x080028e5
 80028ac:	080028e5 	.word	0x080028e5
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	080028e5 	.word	0x080028e5
 80028b8:	080028e5 	.word	0x080028e5
 80028bc:	08002903 	.word	0x08002903
 80028c0:	08002903 	.word	0x08002903
 80028c4:	08002903 	.word	0x08002903
 80028c8:	08002903 	.word	0x08002903
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002903 	.word	0x08002903
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002921 	.word	0x08002921
 80028dc:	08002921 	.word	0x08002921
 80028e0:	0800293f 	.word	0x0800293f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80028e8:	233e      	movs	r3, #62	; 0x3e
 80028ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	220f      	movs	r2, #15
 80028f0:	f362 0306 	bfi	r3, r2, #0, #7
 80028f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80028f6:	7a3b      	ldrb	r3, [r7, #8]
 80028f8:	220f      	movs	r2, #15
 80028fa:	f362 0306 	bfi	r3, r2, #0, #7
 80028fe:	723b      	strb	r3, [r7, #8]
            break;
 8002900:	e02f      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002906:	237e      	movs	r3, #126	; 0x7e
 8002908:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800290a:	7a7b      	ldrb	r3, [r7, #9]
 800290c:	221f      	movs	r2, #31
 800290e:	f362 0306 	bfi	r3, r2, #0, #7
 8002912:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002914:	7a3b      	ldrb	r3, [r7, #8]
 8002916:	221f      	movs	r2, #31
 8002918:	f362 0306 	bfi	r3, r2, #0, #7
 800291c:	723b      	strb	r3, [r7, #8]
            break;
 800291e:	e020      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002924:	231e      	movs	r3, #30
 8002926:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	2207      	movs	r2, #7
 800292c:	f362 0306 	bfi	r3, r2, #0, #7
 8002930:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002932:	7a3b      	ldrb	r3, [r7, #8]
 8002934:	2207      	movs	r2, #7
 8002936:	f362 0306 	bfi	r3, r2, #0, #7
 800293a:	723b      	strb	r3, [r7, #8]
            break;
 800293c:	e011      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002942:	23fe      	movs	r3, #254	; 0xfe
 8002944:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	f362 0306 	bfi	r3, r2, #0, #7
 800294e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002950:	7a3b      	ldrb	r3, [r7, #8]
 8002952:	223f      	movs	r2, #63	; 0x3f
 8002954:	f362 0306 	bfi	r3, r2, #0, #7
 8002958:	723b      	strb	r3, [r7, #8]
            break;
 800295a:	e002      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	e009      	b.n	8002976 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2104      	movs	r1, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fcf7 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	003e0f0f 	.word	0x003e0f0f

08002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	460b      	mov	r3, r1
 8002990:	71bb      	strb	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800299a:	4be2      	ldr	r3, [pc, #904]	; (8002d24 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 800299c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80029a2:	7abb      	ldrb	r3, [r7, #10]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f362 0301 	bfi	r3, r2, #0, #2
 80029aa:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b11      	cmp	r3, #17
 80029b4:	f200 81f6 	bhi.w	8002da4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	08002a47 	.word	0x08002a47
 80029c8:	08002a85 	.word	0x08002a85
 80029cc:	08002ac3 	.word	0x08002ac3
 80029d0:	08002b01 	.word	0x08002b01
 80029d4:	08002b3f 	.word	0x08002b3f
 80029d8:	08002b79 	.word	0x08002b79
 80029dc:	08002bad 	.word	0x08002bad
 80029e0:	08002bdf 	.word	0x08002bdf
 80029e4:	08002c25 	.word	0x08002c25
 80029e8:	08002c6b 	.word	0x08002c6b
 80029ec:	08002ca9 	.word	0x08002ca9
 80029f0:	08002ce7 	.word	0x08002ce7
 80029f4:	08002d29 	.word	0x08002d29
 80029f8:	08002d67 	.word	0x08002d67
 80029fc:	08002ac3 	.word	0x08002ac3
 8002a00:	08002b79 	.word	0x08002b79
 8002a04:	08002bdf 	.word	0x08002bdf
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	221e      	movs	r2, #30
 8002a10:	f362 0304 	bfi	r3, r2, #0, #5
 8002a14:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a1e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	2207      	movs	r2, #7
 8002a24:	f362 0303 	bfi	r3, r2, #0, #4
 8002a28:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a2a:	7a7b      	ldrb	r3, [r7, #9]
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	f362 0306 	bfi	r3, r2, #0, #7
 8002a32:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	7a3b      	ldrb	r3, [r7, #8]
 8002a3e:	f362 0305 	bfi	r3, r2, #0, #6
 8002a42:	723b      	strb	r3, [r7, #8]
            break;
 8002a44:	e1b1      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	220e      	movs	r2, #14
 8002a4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002a52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	2203      	movs	r2, #3
 8002a58:	f362 0303 	bfi	r3, r2, #0, #4
 8002a5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002a5e:	7b3b      	ldrb	r3, [r7, #12]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f362 0303 	bfi	r3, r2, #0, #4
 8002a66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002a70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	7a3b      	ldrb	r3, [r7, #8]
 8002a7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002a80:	723b      	strb	r3, [r7, #8]
            break;
 8002a82:	e192      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002a90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002a92:	7b7b      	ldrb	r3, [r7, #13]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f362 0303 	bfi	r3, r2, #0, #4
 8002a9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002a9c:	7b3b      	ldrb	r3, [r7, #12]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002aa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002aa6:	7a7b      	ldrb	r3, [r7, #9]
 8002aa8:	2209      	movs	r2, #9
 8002aaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002aae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	7a3b      	ldrb	r3, [r7, #8]
 8002aba:	f362 0305 	bfi	r3, r2, #0, #6
 8002abe:	723b      	strb	r3, [r7, #8]
            break;
 8002ac0:	e173      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	2206      	movs	r2, #6
 8002aca:	f362 0304 	bfi	r3, r2, #0, #5
 8002ace:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002ad0:	7b7b      	ldrb	r3, [r7, #13]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002ada:	7b3b      	ldrb	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f362 0303 	bfi	r3, r2, #0, #4
 8002ae2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ae4:	7a7b      	ldrb	r3, [r7, #9]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	f362 0306 	bfi	r3, r2, #0, #7
 8002aec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	7a3b      	ldrb	r3, [r7, #8]
 8002af8:	f362 0305 	bfi	r3, r2, #0, #6
 8002afc:	723b      	strb	r3, [r7, #8]
            break;
 8002afe:	e154      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f362 0304 	bfi	r3, r2, #0, #5
 8002b0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f362 0303 	bfi	r3, r2, #0, #4
 8002b16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002b18:	7b3b      	ldrb	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002b20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002b22:	7a7b      	ldrb	r3, [r7, #9]
 8002b24:	2205      	movs	r2, #5
 8002b26:	f362 0306 	bfi	r3, r2, #0, #7
 8002b2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	7a3b      	ldrb	r3, [r7, #8]
 8002b36:	f362 0305 	bfi	r3, r2, #0, #6
 8002b3a:	723b      	strb	r3, [r7, #8]
            break;
 8002b3c:	e135      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f362 0304 	bfi	r3, r2, #0, #5
 8002b4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	f36f 0303 	bfc	r3, #0, #4
 8002b52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b54:	7b3b      	ldrb	r3, [r7, #12]
 8002b56:	f36f 0303 	bfc	r3, #0, #4
 8002b5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	f362 0306 	bfi	r3, r2, #0, #7
 8002b64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7a3b      	ldrb	r3, [r7, #8]
 8002b70:	f362 0305 	bfi	r3, r2, #0, #6
 8002b74:	723b      	strb	r3, [r7, #8]
            break;
 8002b76:	e118      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f362 0304 	bfi	r3, r2, #0, #5
 8002b84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	f36f 0303 	bfc	r3, #0, #4
 8002b8c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b8e:	7b3b      	ldrb	r3, [r7, #12]
 8002b90:	f36f 0303 	bfc	r3, #0, #4
 8002b94:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002b96:	7a7b      	ldrb	r3, [r7, #9]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002ba0:	7a3b      	ldrb	r3, [r7, #8]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f362 0305 	bfi	r3, r2, #0, #6
 8002ba8:	723b      	strb	r3, [r7, #8]
            break;
 8002baa:	e0fe      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f362 0304 	bfi	r3, r2, #0, #5
 8002bb8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	f36f 0303 	bfc	r3, #0, #4
 8002bc0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	f36f 0303 	bfc	r3, #0, #4
 8002bc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002bca:	7a7b      	ldrb	r3, [r7, #9]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002bd4:	7a3b      	ldrb	r3, [r7, #8]
 8002bd6:	f36f 0305 	bfc	r3, #0, #6
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e0e5      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	221e      	movs	r2, #30
 8002be6:	f362 0304 	bfi	r3, r2, #0, #5
 8002bea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002bec:	7b7b      	ldrb	r3, [r7, #13]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	f362 0303 	bfi	r3, r2, #0, #4
 8002bf4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002bf6:	7b3b      	ldrb	r3, [r7, #12]
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002bfe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c00:	7a7b      	ldrb	r3, [r7, #9]
 8002c02:	221f      	movs	r2, #31
 8002c04:	f362 0306 	bfi	r3, r2, #0, #7
 8002c08:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	7a3b      	ldrb	r3, [r7, #8]
 8002c14:	f362 0305 	bfi	r3, r2, #0, #6
 8002c18:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c1a:	7abb      	ldrb	r3, [r7, #10]
 8002c1c:	f36f 0301 	bfc	r3, #0, #2
 8002c20:	72bb      	strb	r3, [r7, #10]
            break;
 8002c22:	e0c2      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	2211      	movs	r2, #17
 8002c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002c30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002c32:	7b7b      	ldrb	r3, [r7, #13]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f362 0303 	bfi	r3, r2, #0, #4
 8002c3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	f362 0303 	bfi	r3, r2, #0, #4
 8002c44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002c46:	7a7b      	ldrb	r3, [r7, #9]
 8002c48:	2212      	movs	r2, #18
 8002c4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002c4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	7a3b      	ldrb	r3, [r7, #8]
 8002c5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002c5e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	f36f 0301 	bfc	r3, #0, #2
 8002c66:	72bb      	strb	r3, [r7, #10]
            break;
 8002c68:	e09f      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002c6e:	7bbb      	ldrb	r3, [r7, #14]
 8002c70:	221e      	movs	r2, #30
 8002c72:	f362 0304 	bfi	r3, r2, #0, #5
 8002c76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002c80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002c82:	7b3b      	ldrb	r3, [r7, #12]
 8002c84:	2207      	movs	r2, #7
 8002c86:	f362 0303 	bfi	r3, r2, #0, #4
 8002c8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c8c:	7a7b      	ldrb	r3, [r7, #9]
 8002c8e:	221f      	movs	r2, #31
 8002c90:	f362 0306 	bfi	r3, r2, #0, #7
 8002c94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ca0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ca4:	723b      	strb	r3, [r7, #8]
            break;
 8002ca6:	e080      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	2212      	movs	r2, #18
 8002cb0:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2205      	movs	r2, #5
 8002cba:	f362 0303 	bfi	r3, r2, #0, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	2213      	movs	r2, #19
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0305 	bfi	r3, r2, #0, #6
 8002ce2:	723b      	strb	r3, [r7, #8]
            break;
 8002ce4:	e061      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	220e      	movs	r2, #14
 8002cee:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f362 0303 	bfi	r3, r2, #0, #4
 8002d06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e042      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002d24:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	f362 0304 	bfi	r3, r2, #0, #5
 8002d34:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f362 0303 	bfi	r3, r2, #0, #4
 8002d48:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d4a:	7a7b      	ldrb	r3, [r7, #9]
 8002d4c:	2209      	movs	r2, #9
 8002d4e:	f362 0306 	bfi	r3, r2, #0, #7
 8002d52:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	f362 0305 	bfi	r3, r2, #0, #6
 8002d62:	723b      	strb	r3, [r7, #8]
            break;
 8002d64:	e021      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	f362 0304 	bfi	r3, r2, #0, #5
 8002d72:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f362 0303 	bfi	r3, r2, #0, #4
 8002d7c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d7e:	7b3b      	ldrb	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f362 0303 	bfi	r3, r2, #0, #4
 8002d86:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d90:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	7a3b      	ldrb	r3, [r7, #8]
 8002d9c:	f362 0305 	bfi	r3, r2, #0, #6
 8002da0:	723b      	strb	r3, [r7, #8]
            break;
 8002da2:	e002      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	e01f      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2108      	movs	r1, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fad3 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002dc2:	f06f 0301 	mvn.w	r3, #1
 8002dc6:	e010      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	210c      	movs	r1, #12
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fac4 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002de0:	f06f 0302 	mvn.w	r3, #2
 8002de4:	e001      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002e0a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b11      	cmp	r3, #17
 8002e10:	d862      	bhi.n	8002ed8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e61 	.word	0x08002e61
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002ed9 	.word	0x08002ed9
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e7f 	.word	0x08002e7f
 8002e3c:	08002e7f 	.word	0x08002e7f
 8002e40:	08002e7f 	.word	0x08002e7f
 8002e44:	08002e7f 	.word	0x08002e7f
 8002e48:	08002e7f 	.word	0x08002e7f
 8002e4c:	08002e7f 	.word	0x08002e7f
 8002e50:	08002e7f 	.word	0x08002e7f
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e9d 	.word	0x08002e9d
 8002e5c:	08002ebb 	.word	0x08002ebb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002e64:	231e      	movs	r3, #30
 8002e66:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002e68:	7a7b      	ldrb	r3, [r7, #9]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e70:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002e72:	7a3b      	ldrb	r3, [r7, #8]
 8002e74:	2207      	movs	r2, #7
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	723b      	strb	r3, [r7, #8]
            break;
 8002e7c:	e02f      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002e82:	233e      	movs	r3, #62	; 0x3e
 8002e84:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002e86:	7a7b      	ldrb	r3, [r7, #9]
 8002e88:	220f      	movs	r2, #15
 8002e8a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e8e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002e90:	7a3b      	ldrb	r3, [r7, #8]
 8002e92:	220f      	movs	r2, #15
 8002e94:	f362 0306 	bfi	r3, r2, #0, #7
 8002e98:	723b      	strb	r3, [r7, #8]
            break;
 8002e9a:	e020      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002ea0:	230e      	movs	r3, #14
 8002ea2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002ea4:	7a7b      	ldrb	r3, [r7, #9]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f362 0306 	bfi	r3, r2, #0, #7
 8002eac:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002eae:	7a3b      	ldrb	r3, [r7, #8]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f362 0306 	bfi	r3, r2, #0, #7
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e011      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002ebe:	237e      	movs	r3, #126	; 0x7e
 8002ec0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002ec2:	7a7b      	ldrb	r3, [r7, #9]
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	f362 0306 	bfi	r3, r2, #0, #7
 8002eca:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002ecc:	7a3b      	ldrb	r3, [r7, #8]
 8002ece:	221f      	movs	r2, #31
 8002ed0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ed4:	723b      	strb	r3, [r7, #8]
            break;
 8002ed6:	e002      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e010      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fa39 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002ef6:	f06f 0301 	mvn.w	r3, #1
 8002efa:	e001      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	003e0f0f 	.word	0x003e0f0f

08002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002f22:	4bce      	ldr	r3, [pc, #824]	; (800325c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8002f24:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002f2a:	7abb      	ldrb	r3, [r7, #10]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f32:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	f200 8166 	bhi.w	800320c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002fcf 	.word	0x08002fcf
 8002f50:	0800320d 	.word	0x0800320d
 8002f54:	0800300d 	.word	0x0800300d
 8002f58:	08003047 	.word	0x08003047
 8002f5c:	08003081 	.word	0x08003081
 8002f60:	08003081 	.word	0x08003081
 8002f64:	08003081 	.word	0x08003081
 8002f68:	08003087 	.word	0x08003087
 8002f6c:	080030cd 	.word	0x080030cd
 8002f70:	08003113 	.word	0x08003113
 8002f74:	08003151 	.word	0x08003151
 8002f78:	0800318f 	.word	0x0800318f
 8002f7c:	080031cd 	.word	0x080031cd
 8002f80:	080031d3 	.word	0x080031d3
 8002f84:	0800300d 	.word	0x0800300d
 8002f88:	08003081 	.word	0x08003081
 8002f8c:	08003087 	.word	0x08003087
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	220e      	movs	r2, #14
 8002f98:	f362 0304 	bfi	r3, r2, #0, #5
 8002f9c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f9e:	7b7b      	ldrb	r3, [r7, #13]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fa8:	7b3b      	ldrb	r3, [r7, #12]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f362 0303 	bfi	r3, r2, #0, #4
 8002fb0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fb2:	7a7b      	ldrb	r3, [r7, #9]
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	f362 0306 	bfi	r3, r2, #0, #7
 8002fba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	7a3b      	ldrb	r3, [r7, #8]
 8002fc6:	f362 0305 	bfi	r3, r2, #0, #6
 8002fca:	723b      	strb	r3, [r7, #8]
            break;
 8002fcc:	e121      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002fd2:	7bbb      	ldrb	r3, [r7, #14]
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	f362 0304 	bfi	r3, r2, #0, #5
 8002fda:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002fe6:	7b3b      	ldrb	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f362 0303 	bfi	r3, r2, #0, #4
 8002fee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ff0:	7a7b      	ldrb	r3, [r7, #9]
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003000:	b2da      	uxtb	r2, r3
 8003002:	7a3b      	ldrb	r3, [r7, #8]
 8003004:	f362 0305 	bfi	r3, r2, #0, #6
 8003008:	723b      	strb	r3, [r7, #8]
            break;
 800300a:	e102      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	2202      	movs	r2, #2
 8003014:	f362 0304 	bfi	r3, r2, #0, #5
 8003018:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800301a:	7b7b      	ldrb	r3, [r7, #13]
 800301c:	f36f 0303 	bfc	r3, #0, #4
 8003020:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003022:	7b3b      	ldrb	r3, [r7, #12]
 8003024:	f36f 0303 	bfc	r3, #0, #4
 8003028:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	2203      	movs	r2, #3
 800302e:	f362 0306 	bfi	r3, r2, #0, #7
 8003032:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303a:	b2da      	uxtb	r2, r3
 800303c:	7a3b      	ldrb	r3, [r7, #8]
 800303e:	f362 0305 	bfi	r3, r2, #0, #6
 8003042:	723b      	strb	r3, [r7, #8]
            break;
 8003044:	e0e5      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2201      	movs	r2, #1
 800304e:	f362 0304 	bfi	r3, r2, #0, #5
 8003052:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003054:	7b7b      	ldrb	r3, [r7, #13]
 8003056:	f36f 0303 	bfc	r3, #0, #4
 800305a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f36f 0303 	bfc	r3, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2202      	movs	r2, #2
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e0c8      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e0e5      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	221e      	movs	r2, #30
 800308e:	f362 0304 	bfi	r3, r2, #0, #5
 8003092:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	2207      	movs	r2, #7
 8003098:	f362 0303 	bfi	r3, r2, #0, #4
 800309c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	2207      	movs	r2, #7
 80030a2:	f362 0303 	bfi	r3, r2, #0, #4
 80030a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	221f      	movs	r2, #31
 80030ac:	f362 0306 	bfi	r3, r2, #0, #7
 80030b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	f362 0305 	bfi	r3, r2, #0, #6
 80030c0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80030c2:	7abb      	ldrb	r3, [r7, #10]
 80030c4:	f36f 0301 	bfc	r3, #0, #2
 80030c8:	72bb      	strb	r3, [r7, #10]
            break;
 80030ca:	e0a2      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80030d0:	7bbb      	ldrb	r3, [r7, #14]
 80030d2:	2211      	movs	r2, #17
 80030d4:	f362 0304 	bfi	r3, r2, #0, #5
 80030d8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	2204      	movs	r2, #4
 80030de:	f362 0303 	bfi	r3, r2, #0, #4
 80030e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80030e4:	7b3b      	ldrb	r3, [r7, #12]
 80030e6:	2204      	movs	r2, #4
 80030e8:	f362 0303 	bfi	r3, r2, #0, #4
 80030ec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80030ee:	7a7b      	ldrb	r3, [r7, #9]
 80030f0:	2212      	movs	r2, #18
 80030f2:	f362 0306 	bfi	r3, r2, #0, #7
 80030f6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	7a3b      	ldrb	r3, [r7, #8]
 8003102:	f362 0305 	bfi	r3, r2, #0, #6
 8003106:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003108:	7abb      	ldrb	r3, [r7, #10]
 800310a:	f36f 0301 	bfc	r3, #0, #2
 800310e:	72bb      	strb	r3, [r7, #10]
            break;
 8003110:	e07f      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003116:	7bbb      	ldrb	r3, [r7, #14]
 8003118:	220e      	movs	r2, #14
 800311a:	f362 0304 	bfi	r3, r2, #0, #5
 800311e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003120:	7b7b      	ldrb	r3, [r7, #13]
 8003122:	2203      	movs	r2, #3
 8003124:	f362 0303 	bfi	r3, r2, #0, #4
 8003128:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800312a:	7b3b      	ldrb	r3, [r7, #12]
 800312c:	2203      	movs	r2, #3
 800312e:	f362 0303 	bfi	r3, r2, #0, #4
 8003132:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003134:	7a7b      	ldrb	r3, [r7, #9]
 8003136:	220f      	movs	r2, #15
 8003138:	f362 0306 	bfi	r3, r2, #0, #7
 800313c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7a3b      	ldrb	r3, [r7, #8]
 8003148:	f362 0305 	bfi	r3, r2, #0, #6
 800314c:	723b      	strb	r3, [r7, #8]
            break;
 800314e:	e060      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	2208      	movs	r2, #8
 8003158:	f362 0304 	bfi	r3, r2, #0, #5
 800315c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800315e:	7b7b      	ldrb	r3, [r7, #13]
 8003160:	2202      	movs	r2, #2
 8003162:	f362 0303 	bfi	r3, r2, #0, #4
 8003166:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003168:	7b3b      	ldrb	r3, [r7, #12]
 800316a:	2202      	movs	r2, #2
 800316c:	f362 0303 	bfi	r3, r2, #0, #4
 8003170:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003172:	7a7b      	ldrb	r3, [r7, #9]
 8003174:	2209      	movs	r2, #9
 8003176:	f362 0306 	bfi	r3, r2, #0, #7
 800317a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003182:	b2da      	uxtb	r2, r3
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	f362 0305 	bfi	r3, r2, #0, #6
 800318a:	723b      	strb	r3, [r7, #8]
            break;
 800318c:	e041      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	2206      	movs	r2, #6
 8003196:	f362 0304 	bfi	r3, r2, #0, #5
 800319a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800319c:	7b7b      	ldrb	r3, [r7, #13]
 800319e:	2201      	movs	r2, #1
 80031a0:	f362 0303 	bfi	r3, r2, #0, #4
 80031a4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f362 0303 	bfi	r3, r2, #0, #4
 80031ae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80031b0:	7a7b      	ldrb	r3, [r7, #9]
 80031b2:	2207      	movs	r2, #7
 80031b4:	f362 0306 	bfi	r3, r2, #0, #7
 80031b8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	7a3b      	ldrb	r3, [r7, #8]
 80031c4:	f362 0305 	bfi	r3, r2, #0, #6
 80031c8:	723b      	strb	r3, [r7, #8]
            break;
 80031ca:	e022      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e03f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	2202      	movs	r2, #2
 80031da:	f362 0304 	bfi	r3, r2, #0, #5
 80031de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80031e0:	7b7b      	ldrb	r3, [r7, #13]
 80031e2:	f36f 0303 	bfc	r3, #0, #4
 80031e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	f36f 0303 	bfc	r3, #0, #4
 80031ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80031f0:	7a7b      	ldrb	r3, [r7, #9]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f362 0306 	bfi	r3, r2, #0, #7
 80031f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f362 0305 	bfi	r3, r2, #0, #6
 8003208:	723b      	strb	r3, [r7, #8]
            break;
 800320a:	e002      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e01f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2108      	movs	r1, #8
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f89f 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800322a:	f06f 0301 	mvn.w	r3, #1
 800322e:	e010      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	210c      	movs	r1, #12
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f890 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003248:	f06f 0302 	mvn.w	r3, #2
 800324c:	e001      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800324e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000e0303 	.word	0x000e0303

08003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	4613      	mov	r3, r2
 800326e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003276:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003278:	79bb      	ldrb	r3, [r7, #6]
 800327a:	2b11      	cmp	r3, #17
 800327c:	d862      	bhi.n	8003344 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032cd 	.word	0x080032cd
 8003288:	080032cd 	.word	0x080032cd
 800328c:	08003345 	.word	0x08003345
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032cd 	.word	0x080032cd
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032eb 	.word	0x080032eb
 80032a8:	080032eb 	.word	0x080032eb
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032eb 	.word	0x080032eb
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	08003309 	.word	0x08003309
 80032c4:	08003309 	.word	0x08003309
 80032c8:	08003327 	.word	0x08003327
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80032d0:	230e      	movs	r3, #14
 80032d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80032d4:	7a7b      	ldrb	r3, [r7, #9]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f362 0306 	bfi	r3, r2, #0, #7
 80032dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f362 0306 	bfi	r3, r2, #0, #7
 80032e6:	723b      	strb	r3, [r7, #8]
            break;
 80032e8:	e02f      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80032ee:	231e      	movs	r3, #30
 80032f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80032f2:	7a7b      	ldrb	r3, [r7, #9]
 80032f4:	2207      	movs	r2, #7
 80032f6:	f362 0306 	bfi	r3, r2, #0, #7
 80032fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	2207      	movs	r2, #7
 8003300:	f362 0306 	bfi	r3, r2, #0, #7
 8003304:	723b      	strb	r3, [r7, #8]
            break;
 8003306:	e020      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 800330c:	2307      	movs	r3, #7
 800330e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003310:	7a7b      	ldrb	r3, [r7, #9]
 8003312:	2202      	movs	r2, #2
 8003314:	f362 0306 	bfi	r3, r2, #0, #7
 8003318:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 800331a:	7a3b      	ldrb	r3, [r7, #8]
 800331c:	2202      	movs	r2, #2
 800331e:	f362 0306 	bfi	r3, r2, #0, #7
 8003322:	723b      	strb	r3, [r7, #8]
            break;
 8003324:	e011      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800332a:	233e      	movs	r3, #62	; 0x3e
 800332c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800332e:	7a7b      	ldrb	r3, [r7, #9]
 8003330:	220f      	movs	r2, #15
 8003332:	f362 0306 	bfi	r3, r2, #0, #7
 8003336:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003338:	7a3b      	ldrb	r3, [r7, #8]
 800333a:	220f      	movs	r2, #15
 800333c:	f362 0306 	bfi	r3, r2, #0, #7
 8003340:	723b      	strb	r3, [r7, #8]
            break;
 8003342:	e002      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e010      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2104      	movs	r1, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f803 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003362:	f06f 0301 	mvn.w	r3, #1
 8003366:	e001      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	003e0f0f 	.word	0x003e0f0f

08003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
 8003386:	4613      	mov	r3, r2
 8003388:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003390:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003396:	7abb      	ldrb	r3, [r7, #10]
 8003398:	2202      	movs	r2, #2
 800339a:	f362 0301 	bfi	r3, r2, #0, #2
 800339e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b11      	cmp	r3, #17
 80033a8:	f200 80ef 	bhi.w	800358a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033fd 	.word	0x080033fd
 80033b8:	0800343b 	.word	0x0800343b
 80033bc:	0800358b 	.word	0x0800358b
 80033c0:	08003475 	.word	0x08003475
 80033c4:	08003475 	.word	0x08003475
 80033c8:	08003475 	.word	0x08003475
 80033cc:	08003475 	.word	0x08003475
 80033d0:	08003475 	.word	0x08003475
 80033d4:	0800347b 	.word	0x0800347b
 80033d8:	080034c1 	.word	0x080034c1
 80033dc:	08003507 	.word	0x08003507
 80033e0:	08003545 	.word	0x08003545
 80033e4:	0800354b 	.word	0x0800354b
 80033e8:	08003585 	.word	0x08003585
 80033ec:	08003585 	.word	0x08003585
 80033f0:	08003475 	.word	0x08003475
 80033f4:	08003475 	.word	0x08003475
 80033f8:	0800347b 	.word	0x0800347b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	2206      	movs	r2, #6
 8003404:	f362 0304 	bfi	r3, r2, #0, #5
 8003408:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	2201      	movs	r2, #1
 800340e:	f362 0303 	bfi	r3, r2, #0, #4
 8003412:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003414:	7b3b      	ldrb	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f362 0303 	bfi	r3, r2, #0, #4
 800341c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800341e:	7a7b      	ldrb	r3, [r7, #9]
 8003420:	2207      	movs	r2, #7
 8003422:	f362 0306 	bfi	r3, r2, #0, #7
 8003426:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342e:	b2da      	uxtb	r2, r3
 8003430:	7a3b      	ldrb	r3, [r7, #8]
 8003432:	f362 0305 	bfi	r3, r2, #0, #6
 8003436:	723b      	strb	r3, [r7, #8]
            break;
 8003438:	e0aa      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	2202      	movs	r2, #2
 8003442:	f362 0304 	bfi	r3, r2, #0, #5
 8003446:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	f36f 0303 	bfc	r3, #0, #4
 800344e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	f36f 0303 	bfc	r3, #0, #4
 8003456:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	2203      	movs	r2, #3
 800345c:	f362 0306 	bfi	r3, r2, #0, #7
 8003460:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7a3b      	ldrb	r3, [r7, #8]
 800346c:	f362 0305 	bfi	r3, r2, #0, #6
 8003470:	723b      	strb	r3, [r7, #8]
            break;
 8003472:	e08d      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	e0aa      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	220e      	movs	r2, #14
 8003482:	f362 0304 	bfi	r3, r2, #0, #5
 8003486:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	2203      	movs	r2, #3
 800348c:	f362 0303 	bfi	r3, r2, #0, #4
 8003490:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003492:	7b3b      	ldrb	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f362 0303 	bfi	r3, r2, #0, #4
 800349a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800349c:	7a7b      	ldrb	r3, [r7, #9]
 800349e:	220f      	movs	r2, #15
 80034a0:	f362 0306 	bfi	r3, r2, #0, #7
 80034a4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	7a3b      	ldrb	r3, [r7, #8]
 80034b0:	f362 0305 	bfi	r3, r2, #0, #6
 80034b4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034b6:	7abb      	ldrb	r3, [r7, #10]
 80034b8:	f36f 0301 	bfc	r3, #0, #2
 80034bc:	72bb      	strb	r3, [r7, #10]
            break;
 80034be:	e067      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2207      	movs	r2, #7
 80034c8:	f362 0304 	bfi	r3, r2, #0, #5
 80034cc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f362 0303 	bfi	r3, r2, #0, #4
 80034d6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f362 0303 	bfi	r3, r2, #0, #4
 80034e0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80034e2:	7a7b      	ldrb	r3, [r7, #9]
 80034e4:	2208      	movs	r2, #8
 80034e6:	f362 0306 	bfi	r3, r2, #0, #7
 80034ea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	7a3b      	ldrb	r3, [r7, #8]
 80034f6:	f362 0305 	bfi	r3, r2, #0, #6
 80034fa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034fc:	7abb      	ldrb	r3, [r7, #10]
 80034fe:	f36f 0301 	bfc	r3, #0, #2
 8003502:	72bb      	strb	r3, [r7, #10]
            break;
 8003504:	e044      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2206      	movs	r2, #6
 800350e:	f362 0304 	bfi	r3, r2, #0, #5
 8003512:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003514:	7b7b      	ldrb	r3, [r7, #13]
 8003516:	2201      	movs	r2, #1
 8003518:	f362 0303 	bfi	r3, r2, #0, #4
 800351c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f362 0303 	bfi	r3, r2, #0, #4
 8003526:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	2207      	movs	r2, #7
 800352c:	f362 0306 	bfi	r3, r2, #0, #7
 8003530:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	7a3b      	ldrb	r3, [r7, #8]
 800353c:	f362 0305 	bfi	r3, r2, #0, #6
 8003540:	723b      	strb	r3, [r7, #8]
            break;
 8003542:	e025      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e042      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800354e:	7bbb      	ldrb	r3, [r7, #14]
 8003550:	2202      	movs	r2, #2
 8003552:	f362 0304 	bfi	r3, r2, #0, #5
 8003556:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	f36f 0303 	bfc	r3, #0, #4
 800355e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	f36f 0303 	bfc	r3, #0, #4
 8003566:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	2203      	movs	r2, #3
 800356c:	f362 0306 	bfi	r3, r2, #0, #7
 8003570:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	7a3b      	ldrb	r3, [r7, #8]
 800357c:	f362 0305 	bfi	r3, r2, #0, #6
 8003580:	723b      	strb	r3, [r7, #8]
            break;
 8003582:	e005      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	e022      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e01f      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2108      	movs	r1, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fee0 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80035a8:	f06f 0301 	mvn.w	r3, #1
 80035ac:	e010      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	210c      	movs	r1, #12
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fed1 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80035c6:	f06f 0302 	mvn.w	r3, #2
 80035ca:	e001      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80035cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	000e0303 	.word	0x000e0303

080035dc <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80035f6:	f640 6307 	movw	r3, #3591	; 0xe07
 80035fa:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	1cda      	adds	r2, r3, #3
 8003606:	89b9      	ldrh	r1, [r7, #12]
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fd4a 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	e020      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8003622:	79bb      	ldrb	r3, [r7, #6]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f362 0300 	bfi	r3, r2, #0, #1
 8003630:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8003632:	797b      	ldrb	r3, [r7, #5]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f362 0341 	bfi	r3, r2, #1, #1
 8003640:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8003642:	7afa      	ldrb	r2, [r7, #11]
 8003644:	89b9      	ldrh	r1, [r7, #12]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fd97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 800365a:	f06f 0301 	mvn.w	r3, #1
 800365e:	e001      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d802      	bhi.n	8003686 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e02a      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	3b09      	subs	r3, #9
 800368a:	2b06      	cmp	r3, #6
 800368c:	d825      	bhi.n	80036da <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036c3 	.word	0x080036c3
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036cf 	.word	0x080036cf
 80036ac:	080036d5 	.word	0x080036d5
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80036b0:	230c      	movs	r3, #12
 80036b2:	60fb      	str	r3, [r7, #12]
                break;
 80036b4:	e012      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80036b6:	2310      	movs	r3, #16
 80036b8:	60fb      	str	r3, [r7, #12]
                break;
 80036ba:	e00f      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80036bc:	2314      	movs	r3, #20
 80036be:	60fb      	str	r3, [r7, #12]
                break;
 80036c0:	e00c      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80036c2:	2318      	movs	r3, #24
 80036c4:	60fb      	str	r3, [r7, #12]
                break;
 80036c6:	e009      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80036c8:	2320      	movs	r3, #32
 80036ca:	60fb      	str	r3, [r7, #12]
                break;
 80036cc:	e006      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80036ce:	2330      	movs	r3, #48	; 0x30
 80036d0:	60fb      	str	r3, [r7, #12]
                break;
 80036d2:	e003      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	60fb      	str	r3, [r7, #12]
                break;
 80036d8:	e000      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80036da:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 0218 	bic.w	r2, r3, #24
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	615a      	str	r2, [r3, #20]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	801a      	strh	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 80037e2:	2305      	movs	r3, #5
 80037e4:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 80037e6:	2300      	movs	r3, #0
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800381e:	f001 fd67 	bl	80052f0 <FI_CheckBankConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003828:	230e      	movs	r3, #14
 800382a:	f000 bcb4 	b.w	8004196 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 800382e:	f001 fcbd 	bl	80051ac <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003832:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <EE_Init+0x2a8>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003838:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <EE_Init+0x2ac>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	029a      	lsls	r2, r3, #10
 800383e:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <EE_Init+0x2b0>)
 8003840:	4013      	ands	r3, r2
 8003842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003846:	fbb2 f1f3 	udiv	r1, r2, r3
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	0b1b      	lsrs	r3, r3, #12
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e02e      	b.n	80038b4 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800385c:	031a      	lsls	r2, r3, #12
 800385e:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <EE_Init+0x2ac>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	0299      	lsls	r1, r3, #10
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <EE_Init+0x2b0>)
 8003866:	400b      	ands	r3, r1
 8003868:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800386c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <EE_Init+0x2ac>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	0298      	lsls	r0, r3, #10
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <EE_Init+0x2b0>)
 8003878:	4003      	ands	r3, r0
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
 8003886:	e00e      	b.n	80038a6 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	4413      	add	r3, r2
 800388e:	4a7f      	ldr	r2, [pc, #508]	; (8003a8c <EE_Init+0x2b4>)
 8003890:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	4413      	add	r3, r2
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	3308      	adds	r3, #8
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d3ec      	bcc.n	8003888 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	3301      	adds	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <EE_Init+0x2ac>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	029a      	lsls	r2, r3, #10
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <EE_Init+0x2b0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	0b1b      	lsrs	r3, r3, #12
 80038ce:	3304      	adds	r3, #4
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3bf      	bcc.n	8003856 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <EE_Init+0x2a8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038dc:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <EE_Init+0x2ac>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	029a      	lsls	r2, r3, #10
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <EE_Init+0x2b0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	0b1b      	lsrs	r3, r3, #12
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f8:	e034      	b.n	8003964 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003900:	031a      	lsls	r2, r3, #12
 8003902:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <EE_Init+0x2ac>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0299      	lsls	r1, r3, #10
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <EE_Init+0x2b0>)
 800390a:	400b      	ands	r3, r1
 800390c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003910:	fbb1 f1f3 	udiv	r1, r1, r3
 8003914:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <EE_Init+0x2ac>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	0298      	lsls	r0, r3, #10
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <EE_Init+0x2b0>)
 800391c:	4003      	ands	r3, r0
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003928:	f001 fbde 	bl	80050e8 <GetPageState>
 800392c:	4603      	mov	r3, r0
 800392e:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003930:	7ebb      	ldrb	r3, [r7, #26]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d002      	beq.n	800393c <EE_Init+0x164>
 8003936:	7ebb      	ldrb	r3, [r7, #26]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d103      	bne.n	8003944 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	3301      	adds	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e00c      	b.n	800395e <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003944:	7ebb      	ldrb	r3, [r7, #26]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d109      	bne.n	800395e <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	3301      	adds	r3, #1
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	3301      	adds	r3, #1
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <EE_Init+0x2ac>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	029a      	lsls	r2, r3, #10
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <EE_Init+0x2b0>)
 800396c:	4013      	ands	r3, r2
 800396e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003972:	fbb2 f1f3 	udiv	r1, r2, r3
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	0b1b      	lsrs	r3, r3, #12
 800397e:	3304      	adds	r3, #4
 8003980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b9      	bcc.n	80038fa <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d16a      	bne.n	8003a62 <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d062      	beq.n	8003a58 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003992:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <EE_Init+0x2ac>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	029a      	lsls	r2, r3, #10
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <EE_Init+0x2b0>)
 800399a:	4013      	ands	r3, r2
 800399c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	0b1b      	lsrs	r3, r3, #12
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	3303      	adds	r3, #3
 80039b2:	f003 0103 	and.w	r1, r3, #3
 80039b6:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <EE_Init+0x2ac>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	029a      	lsls	r2, r3, #10
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <EE_Init+0x2b0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039c4:	fbb2 f0f3 	udiv	r0, r2, r3
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	0b1b      	lsrs	r3, r3, #12
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80039d6:	031a      	lsls	r2, r3, #12
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <EE_Init+0x2ac>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	0299      	lsls	r1, r3, #10
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <EE_Init+0x2b0>)
 80039e0:	400b      	ands	r3, r1
 80039e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80039e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <EE_Init+0x2ac>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	0298      	lsls	r0, r3, #10
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <EE_Init+0x2b0>)
 80039f2:	4003      	ands	r3, r0
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fb74 	bl	80050e8 <GetPageState>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d12d      	bne.n	8003a62 <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <EE_Init+0x2ac>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	029a      	lsls	r2, r3, #10
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <EE_Init+0x2b0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	0b1b      	lsrs	r3, r3, #12
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 0103 	and.w	r1, r3, #3
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <EE_Init+0x2ac>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	029a      	lsls	r2, r3, #10
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <EE_Init+0x2b0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a38:	fbb2 f0f3 	udiv	r0, r2, r3
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	440b      	add	r3, r1
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fa8b 	bl	8004f64 <SetPageState>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e39e      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f000 fba7 	bl	80041ac <EE_Format>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e399      	b.n	8004196 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <EE_Init+0x2ac>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	029a      	lsls	r2, r3, #10
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <EE_Init+0x2b0>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	0b1b      	lsrs	r3, r3, #12
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7e:	e0de      	b.n	8003c3e <EE_Init+0x466>
 8003a80:	200003b4 	.word	0x200003b4
 8003a84:	1fff75e0 	.word	0x1fff75e0
 8003a88:	001ffc00 	.word	0x001ffc00
 8003a8c:	200003b0 	.word	0x200003b0
  {
    pageaddress = PAGE_ADDRESS(page);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a96:	031a      	lsls	r2, r3, #12
 8003a98:	4bba      	ldr	r3, [pc, #744]	; (8003d84 <EE_Init+0x5ac>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	0299      	lsls	r1, r3, #10
 8003a9e:	4bba      	ldr	r3, [pc, #744]	; (8003d88 <EE_Init+0x5b0>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003aa6:	fbb1 f1f3 	udiv	r1, r1, r3
 8003aaa:	4bb6      	ldr	r3, [pc, #728]	; (8003d84 <EE_Init+0x5ac>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	0298      	lsls	r0, r3, #10
 8003ab0:	4bb5      	ldr	r3, [pc, #724]	; (8003d88 <EE_Init+0x5b0>)
 8003ab2:	4003      	ands	r3, r0
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003abe:	f001 fb13 	bl	80050e8 <GetPageState>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003ac6:	7ebb      	ldrb	r3, [r7, #26]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 80b5 	bne.w	8003c38 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003ace:	4bad      	ldr	r3, [pc, #692]	; (8003d84 <EE_Init+0x5ac>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	029a      	lsls	r2, r3, #10
 8003ad4:	4bac      	ldr	r3, [pc, #688]	; (8003d88 <EE_Init+0x5b0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003adc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	0b1b      	lsrs	r3, r3, #12
 8003ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d050      	beq.n	8003b90 <EE_Init+0x3b8>
 8003aee:	4ba5      	ldr	r3, [pc, #660]	; (8003d84 <EE_Init+0x5ac>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	029a      	lsls	r2, r3, #10
 8003af4:	4ba4      	ldr	r3, [pc, #656]	; (8003d88 <EE_Init+0x5b0>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003afc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0b1b      	lsrs	r3, r3, #12
 8003b08:	3302      	adds	r3, #2
 8003b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d03f      	beq.n	8003b90 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b10:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <EE_Init+0x5ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	029a      	lsls	r2, r3, #10
 8003b16:	4b9c      	ldr	r3, [pc, #624]	; (8003d88 <EE_Init+0x5b0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	0b1b      	lsrs	r3, r3, #12
 8003b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	3303      	adds	r3, #3
 8003b30:	f003 0103 	and.w	r1, r3, #3
 8003b34:	4b93      	ldr	r3, [pc, #588]	; (8003d84 <EE_Init+0x5ac>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	029a      	lsls	r2, r3, #10
 8003b3a:	4b93      	ldr	r3, [pc, #588]	; (8003d88 <EE_Init+0x5b0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b42:	fbb2 f0f3 	udiv	r0, r2, r3
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	0b1b      	lsrs	r3, r3, #12
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003b54:	031a      	lsls	r2, r3, #12
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <EE_Init+0x5ac>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	0299      	lsls	r1, r3, #10
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <EE_Init+0x5b0>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003b64:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b68:	4b86      	ldr	r3, [pc, #536]	; (8003d84 <EE_Init+0x5ac>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	0298      	lsls	r0, r3, #10
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <EE_Init+0x5b0>)
 8003b70:	4003      	ands	r3, r0
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fab5 	bl	80050e8 <GetPageState>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d102      	bne.n	8003b8a <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b88:	e041      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b8e:	e03e      	b.n	8003c0e <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003b90:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <EE_Init+0x5ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <EE_Init+0x5b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 0103 	and.w	r1, r3, #3
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <EE_Init+0x5ac>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	029a      	lsls	r2, r3, #10
 8003bba:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <EE_Init+0x5b0>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	0b1b      	lsrs	r3, r3, #12
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003bd4:	031a      	lsls	r2, r3, #12
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <EE_Init+0x5ac>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	0299      	lsls	r1, r3, #10
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <EE_Init+0x5b0>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003be4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <EE_Init+0x5ac>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	0298      	lsls	r0, r3, #10
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <EE_Init+0x5b0>)
 8003bf0:	4003      	ands	r3, r0
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fa75 	bl	80050e8 <GetPageState>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e001      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <EE_Init+0x5b4>)
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 fef3 	bl	8004a0c <PagesTransfer>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d001      	beq.n	8003c32 <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003c2e:	230c      	movs	r3, #12
 8003c30:	e2b1      	b.n	8004196 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003c36:	e014      	b.n	8003c62 <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <EE_Init+0x5ac>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	029a      	lsls	r2, r3, #10
 8003c44:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <EE_Init+0x5b0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	0b1b      	lsrs	r3, r3, #12
 8003c58:	3304      	adds	r3, #4
 8003c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f4ff af17 	bcc.w	8003a90 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <EE_Init+0x5ac>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	029a      	lsls	r2, r3, #10
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <EE_Init+0x5b0>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	0b1b      	lsrs	r3, r3, #12
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	e0dc      	b.n	8003e3e <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003c8a:	031a      	lsls	r2, r3, #12
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <EE_Init+0x5ac>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0299      	lsls	r1, r3, #10
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <EE_Init+0x5b0>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003c9a:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <EE_Init+0x5ac>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	0298      	lsls	r0, r3, #10
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <EE_Init+0x5b0>)
 8003ca6:	4003      	ands	r3, r0
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cb2:	f001 fa19 	bl	80050e8 <GetPageState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003cba:	7ebb      	ldrb	r3, [r7, #26]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f040 80b6 	bne.w	8003e2e <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <EE_Init+0x5ac>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	029a      	lsls	r2, r3, #10
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <EE_Init+0x5b0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	0b1b      	lsrs	r3, r3, #12
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d056      	beq.n	8003d90 <EE_Init+0x5b8>
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <EE_Init+0x5ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <EE_Init+0x5b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d045      	beq.n	8003d90 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <EE_Init+0x5ac>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	029a      	lsls	r2, r3, #10
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <EE_Init+0x5b0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d12:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	0b1b      	lsrs	r3, r3, #12
 8003d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	3303      	adds	r3, #3
 8003d24:	f003 0103 	and.w	r1, r3, #3
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <EE_Init+0x5ac>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	029a      	lsls	r2, r3, #10
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <EE_Init+0x5b0>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d36:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	0b1b      	lsrs	r3, r3, #12
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003d48:	031a      	lsls	r2, r3, #12
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <EE_Init+0x5ac>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	0299      	lsls	r1, r3, #10
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <EE_Init+0x5b0>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003d58:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <EE_Init+0x5ac>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	0298      	lsls	r0, r3, #10
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <EE_Init+0x5b0>)
 8003d64:	4003      	ands	r3, r0
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f9bb 	bl	80050e8 <GetPageState>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d102      	bne.n	8003d7e <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d7c:	e047      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d82:	e044      	b.n	8003e0e <EE_Init+0x636>
 8003d84:	1fff75e0 	.word	0x1fff75e0
 8003d88:	001ffc00 	.word	0x001ffc00
 8003d8c:	200003ae 	.word	0x200003ae
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003d90:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <EE_Init+0x81c>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	029a      	lsls	r2, r3, #10
 8003d96:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <EE_Init+0x820>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	0b1b      	lsrs	r3, r3, #12
 8003daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 0103 	and.w	r1, r3, #3
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <EE_Init+0x81c>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	029a      	lsls	r2, r3, #10
 8003dba:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <EE_Init+0x820>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003dc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	0b1b      	lsrs	r3, r3, #12
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003dd4:	031a      	lsls	r2, r3, #12
 8003dd6:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <EE_Init+0x81c>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	0299      	lsls	r1, r3, #10
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <EE_Init+0x820>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003de4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003de8:	4b82      	ldr	r3, [pc, #520]	; (8003ff4 <EE_Init+0x81c>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	0298      	lsls	r0, r3, #10
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <EE_Init+0x820>)
 8003df0:	4003      	ands	r3, r0
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f975 	bl	80050e8 <GetPageState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e001      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d111      	bne.n	8003e38 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b77      	ldr	r3, [pc, #476]	; (8003ffc <EE_Init+0x824>)
 8003e20:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	3301      	adds	r3, #1
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	e006      	b.n	8003e38 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	e1b3      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 8003e2e:	7ebb      	ldrb	r3, [r7, #26]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d101      	bne.n	8003e38 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <EE_Init+0x81c>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	029a      	lsls	r2, r3, #10
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <EE_Init+0x820>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	0b1b      	lsrs	r3, r3, #12
 8003e58:	3304      	adds	r3, #4
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f4ff af11 	bcc.w	8003c84 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d133      	bne.n	8003ed0 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	b2d9      	uxtb	r1, r3
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <EE_Init+0x81c>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <EE_Init+0x820>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e7a:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e7e:	fb00 f303 	mul.w	r3, r0, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	1acb      	subs	r3, r1, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	b2d9      	uxtb	r1, r3
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <EE_Init+0x81c>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	029a      	lsls	r2, r3, #10
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <EE_Init+0x820>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ea4:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea8:	fb00 f303 	mul.w	r3, r0, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	0b1b      	lsrs	r3, r3, #12
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <EE_Init+0x824>)
 8003eb8:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <EE_Init+0x824>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f84f 	bl	8004f64 <SetPageState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e162      	b.n	8004196 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <EE_Init+0x828>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <EE_Init+0x82c>)
 8003ed8:	2220      	movs	r2, #32
 8003eda:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003edc:	2320      	movs	r3, #32
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee0:	e031      	b.n	8003f46 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <EE_Init+0x824>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003eea:	031a      	lsls	r2, r3, #12
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <EE_Init+0x81c>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	0299      	lsls	r1, r3, #10
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <EE_Init+0x820>)
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003efa:	fbb1 f1f3 	udiv	r1, r1, r3
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <EE_Init+0x81c>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	0298      	lsls	r0, r3, #10
 8003f04:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <EE_Init+0x820>)
 8003f06:	4003      	ands	r3, r0
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	441a      	add	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	4413      	add	r3, r2
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 8003f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	bf08      	it	eq
 8003f24:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003f28:	d012      	beq.n	8003f50 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <EE_Init+0x828>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <EE_Init+0x828>)
 8003f34:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <EE_Init+0x82c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	4a31      	ldr	r2, [pc, #196]	; (8004004 <EE_Init+0x82c>)
 8003f3e:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	3308      	adds	r3, #8
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d3c9      	bcc.n	8003ee2 <EE_Init+0x70a>
 8003f4e:	e000      	b.n	8003f52 <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 8003f50:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EE_Init+0x824>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <EE_Init+0x824>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f5e:	e053      	b.n	8004008 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <EE_Init+0x81c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	029a      	lsls	r2, r3, #10
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EE_Init+0x820>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	0b1b      	lsrs	r3, r3, #12
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	3303      	adds	r3, #3
 8003f80:	f003 0103 	and.w	r1, r3, #3
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <EE_Init+0x81c>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	029a      	lsls	r2, r3, #10
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <EE_Init+0x820>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f92:	fbb2 f0f3 	udiv	r0, r2, r3
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	0b1b      	lsrs	r3, r3, #12
 8003f9e:	440b      	add	r3, r1
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003fa8:	031a      	lsls	r2, r3, #12
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <EE_Init+0x81c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	0299      	lsls	r1, r3, #10
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EE_Init+0x820>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fb8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <EE_Init+0x81c>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	0298      	lsls	r0, r3, #10
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <EE_Init+0x820>)
 8003fc4:	4003      	ands	r3, r0
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f88b 	bl	80050e8 <GetPageState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8003fd6:	7ebb      	ldrb	r3, [r7, #26]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d109      	bne.n	8003ff0 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <EE_Init+0x828>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <EE_Init+0x828>)
 8003fe8:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	e00b      	b.n	8004008 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	e0d0      	b.n	8004196 <EE_Init+0x9be>
 8003ff4:	1fff75e0 	.word	0x1fff75e0
 8003ff8:	001ffc00 	.word	0x001ffc00
 8003ffc:	200003ae 	.word	0x200003ae
 8004000:	200003ac 	.word	0x200003ac
 8004004:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8004008:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <EE_Init+0x9c8>)
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	029a      	lsls	r2, r3, #10
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <EE_Init+0x9cc>)
 8004010:	4013      	ands	r3, r2
 8004012:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004016:	fbb2 f1f3 	udiv	r1, r2, r3
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	0b1b      	lsrs	r3, r3, #12
 8004022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004024:	429a      	cmp	r2, r3
 8004026:	d010      	beq.n	800404a <EE_Init+0x872>
 8004028:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <EE_Init+0x9c8>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	029a      	lsls	r2, r3, #10
 800402e:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <EE_Init+0x9cc>)
 8004030:	4013      	ands	r3, r2
 8004032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004036:	fbb2 f1f3 	udiv	r1, r2, r3
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	0b1b      	lsrs	r3, r3, #12
 8004042:	3302      	adds	r3, #2
 8004044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d18a      	bne.n	8003f60 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <EE_Init+0x9d0>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <EE_Init+0x9c8>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	029a      	lsls	r2, r3, #10
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <EE_Init+0x9cc>)
 8004058:	4013      	ands	r3, r2
 800405a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800405e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	0b1b      	lsrs	r3, r3, #12
 800406a:	1ac3      	subs	r3, r0, r3
 800406c:	3301      	adds	r3, #1
 800406e:	f003 0103 	and.w	r1, r3, #3
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <EE_Init+0x9c8>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	029a      	lsls	r2, r3, #10
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <EE_Init+0x9cc>)
 800407a:	4013      	ands	r3, r2
 800407c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004080:	fbb2 f0f3 	udiv	r0, r2, r3
 8004084:	fb00 f303 	mul.w	r3, r0, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	0b1b      	lsrs	r3, r3, #12
 800408c:	440b      	add	r3, r1
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004096:	031a      	lsls	r2, r3, #12
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <EE_Init+0x9c8>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	0299      	lsls	r1, r3, #10
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <EE_Init+0x9cc>)
 80040a0:	400b      	ands	r3, r1
 80040a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80040a6:	fbb1 f1f3 	udiv	r1, r1, r3
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <EE_Init+0x9c8>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	0298      	lsls	r0, r3, #10
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <EE_Init+0x9cc>)
 80040b2:	4003      	ands	r3, r0
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 80040bc:	e053      	b.n	8004166 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80040c4:	2101      	movs	r1, #1
 80040c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040c8:	f001 f8b1 	bl	800522e <FI_PageErase>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e05f      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80040d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040dc:	f000 fb5d 	bl	800479a <VerifyPageFullyErased>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80040e6:	2101      	movs	r1, #1
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f001 f8a0 	bl	800522e <FI_PageErase>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e04e      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <EE_Init+0x9c8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	029a      	lsls	r2, r3, #10
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <EE_Init+0x9cc>)
 8004100:	4013      	ands	r3, r2
 8004102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004106:	fbb2 f1f3 	udiv	r1, r2, r3
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	0b1b      	lsrs	r3, r3, #12
 8004112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f003 0103 	and.w	r1, r3, #3
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <EE_Init+0x9c8>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	029a      	lsls	r2, r3, #10
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <EE_Init+0x9cc>)
 8004124:	4013      	ands	r3, r2
 8004126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800412a:	fbb2 f0f3 	udiv	r0, r2, r3
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	0b1b      	lsrs	r3, r3, #12
 8004136:	440b      	add	r3, r1
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004140:	031a      	lsls	r2, r3, #12
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <EE_Init+0x9c8>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	0299      	lsls	r1, r3, #10
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <EE_Init+0x9cc>)
 800414a:	400b      	ands	r3, r1
 800414c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004150:	fbb1 f1f3 	udiv	r1, r1, r3
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <EE_Init+0x9c8>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0298      	lsls	r0, r3, #10
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <EE_Init+0x9cc>)
 800415c:	4003      	ands	r3, r0
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 8004166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1a7      	bne.n	80040be <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800416e:	f001 f89d 	bl	80052ac <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f000 fe6c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004180:	4603      	mov	r3, r0
 8004182:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <EE_Init+0x9bc>
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	2b12      	cmp	r3, #18
 800418e:	d001      	beq.n	8004194 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004190:	2302      	movs	r3, #2
 8004192:	e000      	b.n	8004196 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3740      	adds	r7, #64	; 0x40
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	1fff75e0 	.word	0x1fff75e0
 80041a4:	001ffc00 	.word	0x001ffc00
 80041a8:	200003ae 	.word	0x200003ae

080041ac <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 80041ba:	f001 f899 	bl	80052f0 <FI_CheckBankConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80041c4:	230e      	movs	r3, #14
 80041c6:	e083      	b.n	80042d0 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <EE_Format+0x12c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	029a      	lsls	r2, r3, #10
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <EE_Format+0x130>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	0b1b      	lsrs	r3, r3, #12
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e034      	b.n	8004250 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 f81d 	bl	800522e <FI_PageErase>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d027      	beq.n	800424a <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e068      	b.n	80042d0 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004204:	031a      	lsls	r2, r3, #12
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <EE_Format+0x12c>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	0299      	lsls	r1, r3, #10
 800420c:	4b33      	ldr	r3, [pc, #204]	; (80042dc <EE_Format+0x130>)
 800420e:	400b      	ands	r3, r1
 8004210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004214:	fbb1 f1f3 	udiv	r1, r1, r3
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <EE_Format+0x12c>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	0298      	lsls	r0, r3, #10
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <EE_Format+0x130>)
 8004220:	4003      	ands	r3, r0
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fab4 	bl	800479a <VerifyPageFullyErased>
 8004232:	4603      	mov	r3, r0
 8004234:	2b10      	cmp	r3, #16
 8004236:	d108      	bne.n	800424a <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004238:	2101      	movs	r1, #1
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fff7 	bl	800522e <FI_PageErase>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e042      	b.n	80042d0 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <EE_Format+0x12c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	029a      	lsls	r2, r3, #10
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <EE_Format+0x130>)
 8004258:	4013      	ands	r3, r2
 800425a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800425e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	0b1b      	lsrs	r3, r3, #12
 800426a:	3304      	adds	r3, #4
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b9      	bcc.n	80041e6 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004272:	f001 f81b 	bl	80052ac <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <EE_Format+0x12c>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	029a      	lsls	r2, r3, #10
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <EE_Format+0x130>)
 800427e:	4013      	ands	r3, r2
 8004280:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004284:	fbb2 f1f3 	udiv	r1, r2, r3
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	0b1b      	lsrs	r3, r3, #12
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fe66 	bl	8004f64 <SetPageState>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800429e:	2302      	movs	r3, #2
 80042a0:	e016      	b.n	80042d0 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <EE_Format+0x134>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <EE_Format+0x12c>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	029a      	lsls	r2, r3, #10
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <EE_Format+0x130>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	0b1b      	lsrs	r3, r3, #12
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <EE_Format+0x138>)
 80042c6:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <EE_Format+0x13c>)
 80042ca:	2220      	movs	r2, #32
 80042cc:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	1fff75e0 	.word	0x1fff75e0
 80042dc:	001ffc00 	.word	0x001ffc00
 80042e0:	200003ac 	.word	0x200003ac
 80042e4:	200003ae 	.word	0x200003ae
 80042e8:	20000008 	.word	0x20000008

080042ec <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <EE_ReadVariable32bits+0x40>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	4293      	cmp	r3, r2
 8004306:	d011      	beq.n	800432c <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 8004310:	f107 0208 	add.w	r2, r7, #8
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f94b 	bl	80045b4 <ReadVariable>
 800431e:	4603      	mov	r3, r0
 8004320:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]

    return status;
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	e000      	b.n	800432e <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800432c:	2308      	movs	r3, #8
  } 
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	6039      	str	r1, [r7, #0]
 8004340:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434e:	4293      	cmp	r3, r2
 8004350:	d006      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa00 	bl	800475c <WriteVariable>
 800435c:	4603      	mov	r3, r0
 800435e:	e000      	b.n	8004362 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004360:	2308      	movs	r3, #8
  } 
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004382:	2305      	movs	r3, #5
 8004384:	71fb      	strb	r3, [r7, #7]
 8004386:	2305      	movs	r3, #5
 8004388:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <EE_CleanUp+0x11c>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	029a      	lsls	r2, r3, #10
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <EE_CleanUp+0x120>)
 8004392:	4013      	ands	r3, r2
 8004394:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004398:	fbb2 f1f3 	udiv	r1, r2, r3
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	0b1b      	lsrs	r3, r3, #12
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e059      	b.n	800445c <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043ae:	031a      	lsls	r2, r3, #12
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <EE_CleanUp+0x11c>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	0299      	lsls	r1, r3, #10
 80043b6:	4b35      	ldr	r3, [pc, #212]	; (800448c <EE_CleanUp+0x120>)
 80043b8:	400b      	ands	r3, r1
 80043ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80043be:	fbb1 f1f3 	udiv	r1, r1, r3
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <EE_CleanUp+0x11c>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	0298      	lsls	r0, r3, #10
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <EE_CleanUp+0x120>)
 80043ca:	4003      	ands	r3, r0
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fe87 	bl	80050e8 <GetPageState>
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d138      	bne.n	8004456 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e022      	b.n	8004432 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043f2:	031a      	lsls	r2, r3, #12
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <EE_CleanUp+0x11c>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0299      	lsls	r1, r3, #10
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <EE_CleanUp+0x120>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004402:	fbb1 f1f3 	udiv	r1, r1, r3
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <EE_CleanUp+0x11c>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	0298      	lsls	r0, r3, #10
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <EE_CleanUp+0x120>)
 800440e:	4003      	ands	r3, r0
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004418:	68b8      	ldr	r0, [r7, #8]
 800441a:	f000 fe65 	bl	80050e8 <GetPageState>
 800441e:	4603      	mov	r3, r0
 8004420:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004422:	79bb      	ldrb	r3, [r7, #6]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d001      	beq.n	800442c <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004428:	2305      	movs	r3, #5
 800442a:	e029      	b.n	8004480 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3302      	adds	r3, #2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d3d7      	bcc.n	80043ec <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800443c:	2102      	movs	r1, #2
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f000 fef5 	bl	800522e <FI_PageErase>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e018      	b.n	8004480 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800444e:	f000 ff2d 	bl	80052ac <FI_CacheFlush>
        
        return EE_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e014      	b.n	8004480 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3302      	adds	r3, #2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <EE_CleanUp+0x11c>)
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	029a      	lsls	r2, r3, #10
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <EE_CleanUp+0x120>)
 8004464:	4013      	ands	r3, r2
 8004466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800446a:	fbb2 f1f3 	udiv	r1, r2, r3
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	0b1b      	lsrs	r3, r3, #12
 8004476:	3304      	adds	r3, #4
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d394      	bcc.n	80043a8 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800447e:	2305      	movs	r3, #5
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	1fff75e0 	.word	0x1fff75e0
 800448c:	001ffc00 	.word	0x001ffc00

08004490 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 80044a6:	2305      	movs	r3, #5
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	2305      	movs	r3, #5
 80044ac:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	029a      	lsls	r2, r3, #10
 80044b4:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	0b1b      	lsrs	r3, r3, #12
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e059      	b.n	8004580 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80044d2:	031a      	lsls	r2, r3, #12
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	0299      	lsls	r1, r3, #10
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044dc:	400b      	ands	r3, r1
 80044de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80044e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	0298      	lsls	r0, r3, #10
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044ee:	4003      	ands	r3, r0
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fdf5 	bl	80050e8 <GetPageState>
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d138      	bne.n	800457a <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e022      	b.n	8004556 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004516:	031a      	lsls	r2, r3, #12
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	0299      	lsls	r1, r3, #10
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004520:	400b      	ands	r3, r1
 8004522:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004526:	fbb1 f1f3 	udiv	r1, r1, r3
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	0298      	lsls	r0, r3, #10
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004532:	4003      	ands	r3, r0
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800453c:	68b8      	ldr	r0, [r7, #8]
 800453e:	f000 fdd3 	bl	80050e8 <GetPageState>
 8004542:	4603      	mov	r3, r0
 8004544:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004546:	79bb      	ldrb	r3, [r7, #6]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d001      	beq.n	8004550 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 800454c:	2305      	movs	r3, #5
 800454e:	e029      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3302      	adds	r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3d7      	bcc.n	8004510 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004560:	2102      	movs	r1, #2
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f000 fe85 	bl	8005272 <FI_PageErase_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e018      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8004572:	f000 fe9b 	bl	80052ac <FI_CacheFlush>
        return EE_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e014      	b.n	80045a4 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3302      	adds	r3, #2
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <EE_CleanUp_IT+0x11c>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	029a      	lsls	r2, r3, #10
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004588:	4013      	ands	r3, r2
 800458a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800458e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	0b1b      	lsrs	r3, r3, #12
 800459a:	3304      	adds	r3, #4
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d394      	bcc.n	80044cc <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 80045a2:	2305      	movs	r3, #5
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	1fff75e0 	.word	0x1fff75e0
 80045b0:	001ffc00 	.word	0x001ffc00

080045b4 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80045dc:	2305      	movs	r3, #5
 80045de:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f000 f8ff 	bl	80047e4 <FindPage>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d101      	bne.n	80045f4 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0ab      	b.n	800474c <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80045fa:	031a      	lsls	r2, r3, #12
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <ReadVariable+0x1a0>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	0299      	lsls	r1, r3, #10
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <ReadVariable+0x1a4>)
 8004604:	400b      	ands	r3, r1
 8004606:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800460a:	fbb1 f1f3 	udiv	r1, r1, r3
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <ReadVariable+0x1a0>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	0298      	lsls	r0, r3, #10
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <ReadVariable+0x1a4>)
 8004616:	4003      	ands	r3, r0
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 8004620:	6a38      	ldr	r0, [r7, #32]
 8004622:	f000 fd61 	bl	80050e8 <GetPageState>
 8004626:	4603      	mov	r3, r0
 8004628:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800462a:	e082      	b.n	8004732 <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800462c:	f640 73f8 	movw	r3, #4088	; 0xff8
 8004630:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 8004632:	e03f      	b.n	80046b4 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	bf08      	it	eq
 800464c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004650:	d02d      	beq.n	80046ae <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8004652:	8a3b      	ldrh	r3, [r7, #16]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	429a      	cmp	r2, r3
 8004658:	d129      	bne.n	80046ae <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800465a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	000a      	movs	r2, r1
 8004668:	2300      	movs	r3, #0
 800466a:	8a3b      	ldrh	r3, [r7, #16]
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fdb0 	bl	80051d4 <CalculateCrc>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	0c02      	lsrs	r2, r0, #16
 8004686:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800468a:	0c0b      	lsrs	r3, r1, #16
 800468c:	b293      	uxth	r3, r2
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4293      	cmp	r3, r2
 8004694:	d10b      	bne.n	80046ae <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004696:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	000a      	movs	r2, r1
 80046a4:	2300      	movs	r3, #0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	601a      	str	r2, [r3, #0]

            return EE_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e04e      	b.n	800474c <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b08      	subs	r3, #8
 80046b2:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b1f      	cmp	r3, #31
 80046b8:	d8bc      	bhi.n	8004634 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <ReadVariable+0x1a0>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	029a      	lsls	r2, r3, #10
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <ReadVariable+0x1a4>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	0b1b      	lsrs	r3, r3, #12
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	3303      	adds	r3, #3
 80046da:	f003 0103 	and.w	r1, r3, #3
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <ReadVariable+0x1a0>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	029a      	lsls	r2, r3, #10
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <ReadVariable+0x1a4>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046ec:	fbb2 f0f3 	udiv	r0, r2, r3
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	0b1b      	lsrs	r3, r3, #12
 80046f8:	440b      	add	r3, r1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004702:	031a      	lsls	r2, r3, #12
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <ReadVariable+0x1a0>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	0299      	lsls	r1, r3, #10
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <ReadVariable+0x1a4>)
 800470c:	400b      	ands	r3, r1
 800470e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004712:	fbb1 f1f3 	udiv	r1, r1, r3
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <ReadVariable+0x1a0>)
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	0298      	lsls	r0, r3, #10
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <ReadVariable+0x1a4>)
 800471e:	4003      	ands	r3, r0
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004728:	6a38      	ldr	r0, [r7, #32]
 800472a:	f000 fcdd 	bl	80050e8 <GetPageState>
 800472e:	4603      	mov	r3, r0
 8004730:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	2b02      	cmp	r3, #2
 8004736:	f43f af79 	beq.w	800462c <ReadVariable+0x78>
 800473a:	7efb      	ldrb	r3, [r7, #27]
 800473c:	2b03      	cmp	r3, #3
 800473e:	f43f af75 	beq.w	800462c <ReadVariable+0x78>
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b04      	cmp	r3, #4
 8004746:	f43f af71 	beq.w	800462c <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800474a:	2307      	movs	r3, #7
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	1fff75e0 	.word	0x1fff75e0
 8004758:	001ffc00 	.word	0x001ffc00

0800475c <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb71 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004776:	4603      	mov	r3, r0
 8004778:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f940 	bl	8004a0c <PagesTransfer>
 800478c:	4603      	mov	r3, r0
 800478e:	e000      	b.n	8004792 <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004790:	89fb      	ldrh	r3, [r7, #14]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 80047a4:	2311      	movs	r3, #17
 80047a6:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 80047ac:	e00f      	b.n	80047ce <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4413      	add	r3, r2
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	bf08      	it	eq
 80047be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80047c2:	d001      	beq.n	80047c8 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 80047c4:	2310      	movs	r3, #16
 80047c6:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3308      	adds	r3, #8
 80047cc:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3eb      	bcc.n	80047ae <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 80047d6:	89fb      	ldrh	r3, [r7, #14]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 80047ee:	2305      	movs	r3, #5
 80047f0:	75fb      	strb	r3, [r7, #23]
 80047f2:	2305      	movs	r3, #5
 80047f4:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004802:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <FindPage+0x218>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800480e:	031a      	lsls	r2, r3, #12
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <FindPage+0x21c>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	0299      	lsls	r1, r3, #10
 8004816:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <FindPage+0x220>)
 8004818:	400b      	ands	r3, r1
 800481a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800481e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <FindPage+0x21c>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	0298      	lsls	r0, r3, #10
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <FindPage+0x220>)
 800482a:	4003      	ands	r3, r0
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc58 	bl	80050e8 <GetPageState>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <FindPage+0x21c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	029a      	lsls	r2, r3, #10
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <FindPage+0x220>)
 8004844:	4013      	ands	r3, r2
 8004846:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800484a:	fbb2 f1f3 	udiv	r1, r2, r3
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	0b1b      	lsrs	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f003 0103 	and.w	r1, r3, #3
 8004860:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <FindPage+0x21c>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	029a      	lsls	r2, r3, #10
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <FindPage+0x220>)
 8004868:	4013      	ands	r3, r2
 800486a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800486e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	0b1b      	lsrs	r3, r3, #12
 800487a:	440b      	add	r3, r1
 800487c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004884:	031a      	lsls	r2, r3, #12
 8004886:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <FindPage+0x21c>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	0299      	lsls	r1, r3, #10
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <FindPage+0x220>)
 800488e:	400b      	ands	r3, r1
 8004890:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004894:	fbb1 f1f3 	udiv	r1, r1, r3
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <FindPage+0x21c>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	0298      	lsls	r0, r3, #10
 800489e:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <FindPage+0x220>)
 80048a0:	4003      	ands	r3, r0
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fc1d 	bl	80050e8 <GetPageState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <FindPage+0x21c>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	029a      	lsls	r2, r3, #10
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <FindPage+0x220>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0b1b      	lsrs	r3, r3, #12
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	3303      	adds	r3, #3
 80048d2:	f003 0103 	and.w	r1, r3, #3
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <FindPage+0x21c>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	029a      	lsls	r2, r3, #10
 80048dc:	4b49      	ldr	r3, [pc, #292]	; (8004a04 <FindPage+0x220>)
 80048de:	4013      	ands	r3, r2
 80048e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048e4:	fbb2 f0f3 	udiv	r0, r2, r3
 80048e8:	fb00 f303 	mul.w	r3, r0, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	0b1b      	lsrs	r3, r3, #12
 80048f0:	440b      	add	r3, r1
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d071      	beq.n	80049de <FindPage+0x1fa>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	dc77      	bgt.n	80049ee <FindPage+0x20a>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d060      	beq.n	80049c4 <FindPage+0x1e0>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d173      	bne.n	80049ee <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d12a      	bne.n	8004962 <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <FindPage+0x224>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d201      	bcs.n	800491a <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	e06b      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800491a:	7dbb      	ldrb	r3, [r7, #22]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004920:	f7ff fd24 	bl	800436c <EE_CleanUp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	e060      	b.n	80049f2 <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004930:	2103      	movs	r1, #3
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f000 fb16 	bl	8004f64 <SetPageState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	e056      	b.n	80049f2 <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004944:	2102      	movs	r1, #2
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb0c 	bl	8004f64 <SetPageState>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e04c      	b.n	80049f2 <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <FindPage+0x224>)
 800495a:	2220      	movs	r2, #32
 800495c:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	e047      	b.n	80049f2 <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d12a      	bne.n	80049be <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <FindPage+0x224>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d201      	bcs.n	8004976 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	e03d      	b.n	80049f2 <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004976:	7dbb      	ldrb	r3, [r7, #22]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800497c:	f7ff fcf6 	bl	800436c <EE_CleanUp>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e032      	b.n	80049f2 <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800498c:	2103      	movs	r1, #3
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f000 fae8 	bl	8004f64 <SetPageState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e028      	b.n	80049f2 <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 80049a0:	2101      	movs	r1, #1
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fade 	bl	8004f64 <SetPageState>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e01e      	b.n	80049f2 <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <FindPage+0x224>)
 80049b6:	2220      	movs	r2, #32
 80049b8:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e019      	b.n	80049f2 <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e016      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d101      	bne.n	80049ce <FindPage+0x1ea>
      {
        return currentpage;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	e011      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <FindPage+0x1f4>
        {
          return previouspage;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	e00c      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e009      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <FindPage+0x204>
      {
        return followingpage;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e004      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e001      	b.n	80049f2 <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200003ae 	.word	0x200003ae
 8004a00:	1fff75e0 	.word	0x1fff75e0
 8004a04:	001ffc00 	.word	0x001ffc00
 8004a08:	20000008 	.word	0x20000008

08004a0c <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	80fb      	strh	r3, [r7, #6]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004a42:	797b      	ldrb	r3, [r7, #5]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <PagesTransfer+0x40>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e000      	b.n	8004a4e <PagesTransfer+0x42>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fec8 	bl	80047e4 <FindPage>
 8004a54:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d101      	bne.n	8004a62 <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	e1ed      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004a62:	4ba4      	ldr	r3, [pc, #656]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4ba2      	ldr	r3, [pc, #648]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004a6e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004a70:	4ba2      	ldr	r3, [pc, #648]	; (8004cfc <PagesTransfer+0x2f0>)
 8004a72:	2220      	movs	r2, #32
 8004a74:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004a76:	797b      	ldrb	r3, [r7, #5]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6a38      	ldr	r0, [r7, #32]
 8004a80:	f000 fa70 	bl	8004f64 <SetPageState>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e1d7      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	; (8004d00 <PagesTransfer+0x2f4>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	029a      	lsls	r2, r3, #10
 8004a94:	4b9b      	ldr	r3, [pc, #620]	; (8004d04 <PagesTransfer+0x2f8>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	0b1b      	lsrs	r3, r3, #12
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	3303      	adds	r3, #3
 8004aae:	f003 0103 	and.w	r1, r3, #3
 8004ab2:	4b93      	ldr	r3, [pc, #588]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	029a      	lsls	r2, r3, #10
 8004ab8:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <PagesTransfer+0x2f8>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ac4:	fb00 f303 	mul.w	r3, r0, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	0b1b      	lsrs	r3, r3, #12
 8004acc:	440b      	add	r3, r1
 8004ace:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ad6:	031a      	lsls	r2, r3, #12
 8004ad8:	4b89      	ldr	r3, [pc, #548]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	0299      	lsls	r1, r3, #10
 8004ade:	4b89      	ldr	r3, [pc, #548]	; (8004d04 <PagesTransfer+0x2f8>)
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ae6:	fbb1 f1f3 	udiv	r1, r1, r3
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <PagesTransfer+0x2f4>)
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	0298      	lsls	r0, r3, #10
 8004af0:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <PagesTransfer+0x2f8>)
 8004af2:	4003      	ands	r3, r0
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f000 faf3 	bl	80050e8 <GetPageState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d004      	beq.n	8004b1a <PagesTransfer+0x10e>
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	f040 809e 	bne.w	8004c56 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d108      	bne.n	8004b34 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004b22:	2104      	movs	r1, #4
 8004b24:	6a38      	ldr	r0, [r7, #32]
 8004b26:	f000 fa1d 	bl	8004f64 <SetPageState>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004b30:	2302      	movs	r3, #2
 8004b32:	e184      	b.n	8004e3e <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	029a      	lsls	r2, r3, #10
 8004b3a:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b42:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	0b1b      	lsrs	r3, r3, #12
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	3303      	adds	r3, #3
 8004b54:	f003 0103 	and.w	r1, r3, #3
 8004b58:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	029a      	lsls	r2, r3, #10
 8004b5e:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b66:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	0b1b      	lsrs	r3, r3, #12
 8004b72:	440b      	add	r3, r1
 8004b74:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004b7c:	031a      	lsls	r2, r3, #12
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	0299      	lsls	r1, r3, #10
 8004b84:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004b8c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	0298      	lsls	r0, r3, #10
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b98:	4003      	ands	r3, r0
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004ba2:	69b8      	ldr	r0, [r7, #24]
 8004ba4:	f000 faa0 	bl	80050e8 <GetPageState>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004bae:	e049      	b.n	8004c44 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d108      	bne.n	8004bca <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	6a38      	ldr	r0, [r7, #32]
 8004bbc:	f000 f9d2 	bl	8004f64 <SetPageState>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e139      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	029a      	lsls	r2, r3, #10
 8004bd0:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	0b1b      	lsrs	r3, r3, #12
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	3303      	adds	r3, #3
 8004bea:	f003 0103 	and.w	r1, r3, #3
 8004bee:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	029a      	lsls	r2, r3, #10
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bfc:	fbb2 f0f3 	udiv	r0, r2, r3
 8004c00:	fb00 f303 	mul.w	r3, r0, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	0b1b      	lsrs	r3, r3, #12
 8004c08:	440b      	add	r3, r1
 8004c0a:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c12:	031a      	lsls	r2, r3, #12
 8004c14:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	0299      	lsls	r1, r3, #10
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c22:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	0298      	lsls	r0, r3, #10
 8004c2c:	4b35      	ldr	r3, [pc, #212]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c2e:	4003      	ands	r3, r0
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004c38:	69b8      	ldr	r0, [r7, #24]
 8004c3a:	f000 fa55 	bl	80050e8 <GetPageState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d0b1      	beq.n	8004bb0 <PagesTransfer+0x1a4>
 8004c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d0ad      	beq.n	8004bb0 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004c54:	e008      	b.n	8004c68 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004c56:	797b      	ldrb	r3, [r7, #5]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d103      	bne.n	8004c64 <PagesTransfer+0x258>
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d001      	beq.n	8004c68 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004c64:	230a      	movs	r3, #10
 8004c66:	e0ea      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004c68:	797b      	ldrb	r3, [r7, #5]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	f040 809b 	bne.w	8004da6 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004c70:	2320      	movs	r3, #32
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e031      	b.n	8004cda <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c7e:	031a      	lsls	r2, r3, #12
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0299      	lsls	r1, r3, #10
 8004c86:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c8e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	0298      	lsls	r0, r3, #10
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c9a:	4003      	ands	r3, r0
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	bf08      	it	eq
 8004cb8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004cbc:	d012      	beq.n	8004ce4 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc8:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <PagesTransfer+0x2f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <PagesTransfer+0x2f0>)
 8004cd2:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d3c9      	bcc.n	8004c76 <PagesTransfer+0x26a>
 8004ce2:	e000      	b.n	8004ce6 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004ce4:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e054      	b.n	8004d9c <PagesTransfer+0x390>
 8004cf2:	bf00      	nop
 8004cf4:	200003ac 	.word	0x200003ac
 8004cf8:	200003ae 	.word	0x200003ae
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	1fff75e0 	.word	0x1fff75e0
 8004d04:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <PagesTransfer+0x43c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	029a      	lsls	r2, r3, #10
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <PagesTransfer+0x440>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d16:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	0b1b      	lsrs	r3, r3, #12
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3303      	adds	r3, #3
 8004d28:	f003 0103 	and.w	r1, r3, #3
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <PagesTransfer+0x43c>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	029a      	lsls	r2, r3, #10
 8004d32:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <PagesTransfer+0x440>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d3a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	0b1b      	lsrs	r3, r3, #12
 8004d46:	440b      	add	r3, r1
 8004d48:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004d50:	031a      	lsls	r2, r3, #12
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <PagesTransfer+0x43c>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	0299      	lsls	r1, r3, #10
 8004d58:	4b3c      	ldr	r3, [pc, #240]	; (8004e4c <PagesTransfer+0x440>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d60:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <PagesTransfer+0x43c>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	0298      	lsls	r0, r3, #10
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <PagesTransfer+0x440>)
 8004d6c:	4003      	ands	r3, r0
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9b7 	bl	80050e8 <GetPageState>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d10d      	bne.n	8004da4 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8004d88:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <PagesTransfer+0x444>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <PagesTransfer+0x444>)
 8004d94:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d9b2      	bls.n	8004d08 <PagesTransfer+0x2fc>
 8004da2:	e000      	b.n	8004da6 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8004da4:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f854 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8004db6:	2302      	movs	r3, #2
 8004db8:	e041      	b.n	8004e3e <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004dba:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <PagesTransfer+0x444>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d903      	bls.n	8004dca <PagesTransfer+0x3be>
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <PagesTransfer+0x444>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	e000      	b.n	8004dcc <PagesTransfer+0x3c0>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e026      	b.n	8004e1e <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d01f      	beq.n	8004e18 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f107 0208 	add.w	r2, r7, #8
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fbe6 	bl	80045b4 <ReadVariable>
 8004de8:	4603      	mov	r3, r0
 8004dea:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f82c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004e00:	4603      	mov	r3, r0
 8004e02:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          return status;
 8004e0a:	89fb      	ldrh	r3, [r7, #14]
 8004e0c:	e017      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	d001      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	e012      	b.n	8004e3e <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b32      	cmp	r3, #50	; 0x32
 8004e22:	d9d5      	bls.n	8004dd0 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <PagesTransfer+0x448>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f89a 	bl	8004f64 <SetPageState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e001      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8004e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	1fff75e0 	.word	0x1fff75e0
 8004e4c:	001ffc00 	.word	0x001ffc00
 8004e50:	200003ac 	.word	0x200003ac
 8004e54:	200003ae 	.word	0x200003ae

08004e58 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	b08b      	sub	sp, #44	; 0x2c
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8004e72:	d301      	bcc.n	8004e78 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8004e74:	2312      	movs	r3, #18
 8004e76:	e068      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7ff fcb3 	bl	80047e4 <FindPage>
 8004e7e:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d101      	bne.n	8004e90 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e05c      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e96:	0319      	lsls	r1, r3, #12
 8004e98:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	029a      	lsls	r2, r3, #10
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	0298      	lsls	r0, r3, #10
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004eb2:	4003      	ands	r3, r0
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	440b      	add	r3, r1
 8004eba:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e006      	b.n	8004edc <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f000 f97e 	bl	80051d4 <CalculateCrc>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	18d0      	adds	r0, r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	60fa      	str	r2, [r7, #12]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	000b      	movs	r3, r1
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efc:	0409      	lsls	r1, r1, #16
 8004efe:	2600      	movs	r6, #0
 8004f00:	468a      	mov	sl, r1
 8004f02:	46b3      	mov	fp, r6
 8004f04:	ea42 040a 	orr.w	r4, r2, sl
 8004f08:	ea43 050b 	orr.w	r5, r3, fp
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4698      	mov	r8, r3
 8004f12:	4691      	mov	r9, r2
 8004f14:	ea44 0308 	orr.w	r3, r4, r8
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	ea45 0309 	orr.w	r3, r5, r9
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f000 f972 	bl	800520c <FI_WriteDoubleWord>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e00b      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f3a:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f46:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	372c      	adds	r7, #44	; 0x2c
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	200003ac 	.word	0x200003ac
 8004f58:	1fff75e0 	.word	0x1fff75e0
 8004f5c:	001ffc00 	.word	0x001ffc00
 8004f60:	20000008 	.word	0x20000008

08004f64 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	4b54      	ldr	r3, [pc, #336]	; (80050dc <SetPageState+0x178>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	0299      	lsls	r1, r3, #10
 8004f8e:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <SetPageState+0x17c>)
 8004f90:	400b      	ands	r3, r1
 8004f92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004f96:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <SetPageState+0x178>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	0298      	lsls	r0, r3, #10
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	; (80050e0 <SetPageState+0x17c>)
 8004fa2:	4003      	ands	r3, r0
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fb2:	031a      	lsls	r2, r3, #12
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <SetPageState+0x178>)
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	0299      	lsls	r1, r3, #10
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <SetPageState+0x17c>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004fc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004fc6:	4b45      	ldr	r3, [pc, #276]	; (80050dc <SetPageState+0x178>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	0298      	lsls	r0, r3, #10
 8004fcc:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <SetPageState+0x17c>)
 8004fce:	4003      	ands	r3, r0
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fe0:	031a      	lsls	r2, r3, #12
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <SetPageState+0x178>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	0299      	lsls	r1, r3, #10
 8004fe8:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <SetPageState+0x17c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ff0:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ff4:	4b39      	ldr	r3, [pc, #228]	; (80050dc <SetPageState+0x178>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	0298      	lsls	r0, r3, #10
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <SetPageState+0x17c>)
 8004ffc:	4003      	ands	r3, r0
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	3310      	adds	r3, #16
 8005006:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <SetPageState+0x178>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	0299      	lsls	r1, r3, #10
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <SetPageState+0x17c>)
 8005018:	400b      	ands	r3, r1
 800501a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800501e:	fbb1 f1f3 	udiv	r1, r1, r3
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <SetPageState+0x178>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	0298      	lsls	r0, r3, #10
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <SetPageState+0x17c>)
 800502a:	4003      	ands	r3, r0
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	3318      	adds	r3, #24
 8005034:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	3b01      	subs	r3, #1
 800503a:	2b03      	cmp	r3, #3
 800503c:	d844      	bhi.n	80050c8 <SetPageState+0x164>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <SetPageState+0xe0>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	08005077 	.word	0x08005077
 800504c:	08005099 	.word	0x08005099
 8005050:	080050b1 	.word	0x080050b1
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005054:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005058:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f000 f8d5 	bl	800520c <FI_WriteDoubleWord>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005068:	2302      	movs	r3, #2
 800506a:	e033      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <SetPageState+0x180>)
 8005072:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005074:	e02d      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005076:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800507a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f000 f8c4 	bl	800520c <FI_WriteDoubleWord>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 800508a:	2302      	movs	r3, #2
 800508c:	e022      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <SetPageState+0x180>)
 8005094:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005096:	e01c      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005098:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800509c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8b3 	bl	800520c <FI_WriteDoubleWord>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 80050ac:	2302      	movs	r3, #2
 80050ae:	e011      	b.n	80050d4 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 80050b0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80050b4:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f000 f8a7 	bl	800520c <FI_WriteDoubleWord>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80050c4:	2302      	movs	r3, #2
 80050c6:	e005      	b.n	80050d4 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050d0:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	1fff75e0 	.word	0x1fff75e0
 80050e0:	001ffc00 	.word	0x001ffc00
 80050e4:	200003ae 	.word	0x200003ae

080050e8 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3308      	adds	r3, #8
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3310      	adds	r3, #16
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3318      	adds	r3, #24
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800514e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	bf08      	it	eq
 8005158:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800515c:	d001      	beq.n	8005162 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800515e:	2304      	movs	r3, #4
 8005160:	e01e      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 8005162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	bf08      	it	eq
 800516c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005170:	d001      	beq.n	8005176 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 8005172:	2303      	movs	r3, #3
 8005174:	e014      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	bf08      	it	eq
 8005180:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005184:	d001      	beq.n	800518a <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005186:	2302      	movs	r3, #2
 8005188:	e00a      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800518a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	bf08      	it	eq
 8005194:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005198:	d001      	beq.n	800519e <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	372c      	adds	r7, #44	; 0x2c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80051b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051b4:	f7fe fa9a 	bl	80036ec <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 80051b8:	f248 0105 	movw	r1, #32773	; 0x8005
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <ConfigureCrc+0x24>)
 80051be:	f7fe fad1 	bl	8003764 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 80051c2:	2108      	movs	r1, #8
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <ConfigureCrc+0x24>)
 80051c6:	f7fe faba 	bl	800373e <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023000 	.word	0x40023000

080051d4 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <CalculateCrc+0x34>)
 80051e2:	f7fe fa9c 	bl	800371e <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4807      	ldr	r0, [pc, #28]	; (8005208 <CalculateCrc+0x34>)
 80051ea:	f7fe fac9 	bl	8003780 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <CalculateCrc+0x34>)
 80051f4:	f7fe fad2 	bl	800379c <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80051f8:	4803      	ldr	r0, [pc, #12]	; (8005208 <CalculateCrc+0x34>)
 80051fa:	f7fe fae0 	bl	80037be <LL_CRC_ReadData16>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023000 	.word	0x40023000

0800520c <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	2001      	movs	r0, #1
 8005220:	f007 fdf8 	bl	800ce14 <HAL_FLASH_Program>
 8005224:	4603      	mov	r3, r0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005242:	2302      	movs	r3, #2
 8005244:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800524e:	f107 020c 	add.w	r2, r7, #12
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f007 fef1 	bl	800d040 <HAL_FLASHEx_Erase>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005268:	8bfb      	ldrh	r3, [r7, #30]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005282:	2302      	movs	r3, #2
 8005284:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f007 ff24 	bl	800d0e0 <HAL_FLASHEx_Erase_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 80052a2:	8afb      	ldrh	r3, [r7, #22]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <FI_CacheFlush+0x40>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <FI_CacheFlush+0x40>)
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ba:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FI_CacheFlush+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <FI_CacheFlush+0x40>)
 80052c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <FI_CacheFlush+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a07      	ldr	r2, [pc, #28]	; (80052ec <FI_CacheFlush+0x40>)
 80052ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <FI_CacheFlush+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <FI_CacheFlush+0x40>)
 80052da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	58004000 	.word	0x58004000

080052f0 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80052f4:	2300      	movs	r3, #0
#endif
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f023 0218 	bic.w	r2, r3, #24
 8005314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005368:	f000 f834 	bl	80053d4 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <serialOut+0x58>)
 8005370:	4912      	ldr	r1, [pc, #72]	; (80053bc <serialOut+0x5c>)
 8005372:	4813      	ldr	r0, [pc, #76]	; (80053c0 <serialOut+0x60>)
 8005374:	f00e fc6a 	bl	8013c4c <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005378:	4811      	ldr	r0, [pc, #68]	; (80053c0 <serialOut+0x60>)
 800537a:	f7fa ff01 	bl	8000180 <strlen>
 800537e:	4603      	mov	r3, r0
 8005380:	b29a      	uxth	r2, r3
 8005382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005386:	490e      	ldr	r1, [pc, #56]	; (80053c0 <serialOut+0x60>)
 8005388:	480e      	ldr	r0, [pc, #56]	; (80053c4 <serialOut+0x64>)
 800538a:	f00c f941 	bl	8011610 <HAL_UART_Transmit>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <serialOut+0x68>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <serialOut+0x4e>
 80053a0:	490a      	ldr	r1, [pc, #40]	; (80053cc <serialOut+0x6c>)
 80053a2:	480b      	ldr	r0, [pc, #44]	; (80053d0 <serialOut+0x70>)
 80053a4:	f00e fc52 	bl	8013c4c <siprintf>
 80053a8:	4809      	ldr	r0, [pc, #36]	; (80053d0 <serialOut+0x70>)
 80053aa:	f7ff ffd9 	bl	8005360 <serialOut>
  }
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000a5c 	.word	0x20000a5c
 80053bc:	08016fc0 	.word	0x08016fc0
 80053c0:	20000a68 	.word	0x20000a68
 80053c4:	2000044c 	.word	0x2000044c
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	08016fc8 	.word	0x08016fc8
 80053d0:	20000b64 	.word	0x20000b64

080053d4 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	480e      	ldr	r0, [pc, #56]	; (8005430 <getTimeBCD+0x5c>)
 80053f8:	f00a f990 	bl	800f71c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	2201      	movs	r2, #1
 8005400:	4619      	mov	r1, r3
 8005402:	480b      	ldr	r0, [pc, #44]	; (8005430 <getTimeBCD+0x5c>)
 8005404:	f00a fa94 	bl	800f930 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 8005408:	7abb      	ldrb	r3, [r7, #10]
 800540a:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 8005414:	7f7a      	ldrb	r2, [r7, #29]
 8005416:	7fb9      	ldrb	r1, [r7, #30]
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	460b      	mov	r3, r1
 800541e:	4905      	ldr	r1, [pc, #20]	; (8005434 <getTimeBCD+0x60>)
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <getTimeBCD+0x64>)
 8005422:	f00e fc13 	bl	8013c4c <siprintf>
}
 8005426:	bf00      	nop
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200004ec 	.word	0x200004ec
 8005434:	08016fec 	.word	0x08016fec
 8005438:	20000a5c 	.word	0x20000a5c

0800543c <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b092      	sub	sp, #72	; 0x48
 8005440:	af00      	add	r7, sp, #0
 8005442:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005446:	463b      	mov	r3, r7
 8005448:	4618      	mov	r0, r3
 800544a:	f00d fabd 	bl	80129c8 <localtime>
 800544e:	4603      	mov	r3, r0
 8005450:	f107 040c 	add.w	r4, r7, #12
 8005454:	461d      	mov	r5, r3
 8005456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800545c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800547a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	4826      	ldr	r0, [pc, #152]	; (800551c <writeRTC+0xe0>)
 8005484:	f00a f886 	bl	800f594 <HAL_RTC_SetTime>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <writeRTC+0xe4>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <writeRTC+0x6c>
 800549a:	4922      	ldr	r1, [pc, #136]	; (8005524 <writeRTC+0xe8>)
 800549c:	4822      	ldr	r0, [pc, #136]	; (8005528 <writeRTC+0xec>)
 800549e:	f00e fbd5 	bl	8013c4c <siprintf>
 80054a2:	4821      	ldr	r0, [pc, #132]	; (8005528 <writeRTC+0xec>)
 80054a4:	f7ff ff5c 	bl	8005360 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <writeRTC+0x76>
 80054ae:	2307      	movs	r3, #7
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b64      	subs	r3, #100	; 0x64
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80054da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054de:	2200      	movs	r2, #0
 80054e0:	4619      	mov	r1, r3
 80054e2:	480e      	ldr	r0, [pc, #56]	; (800551c <writeRTC+0xe0>)
 80054e4:	f00a f976 	bl	800f7d4 <HAL_RTC_SetDate>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <writeRTC+0xe4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <writeRTC+0xcc>
 80054fa:	490c      	ldr	r1, [pc, #48]	; (800552c <writeRTC+0xf0>)
 80054fc:	480a      	ldr	r0, [pc, #40]	; (8005528 <writeRTC+0xec>)
 80054fe:	f00e fba5 	bl	8013c4c <siprintf>
 8005502:	4809      	ldr	r0, [pc, #36]	; (8005528 <writeRTC+0xec>)
 8005504:	f7ff ff2c 	bl	8005360 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 8005508:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800550c:	2100      	movs	r1, #0
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <writeRTC+0xe0>)
 8005510:	f00a fae7 	bl	800fae2 <HAL_RTCEx_BKUPWrite>

}
 8005514:	bf00      	nop
 8005516:	3748      	adds	r7, #72	; 0x48
 8005518:	46bd      	mov	sp, r7
 800551a:	bdb0      	pop	{r4, r5, r7, pc}
 800551c:	200004ec 	.word	0x200004ec
 8005520:	2000000c 	.word	0x2000000c
 8005524:	08016ffc 	.word	0x08016ffc
 8005528:	20000b64 	.word	0x20000b64
 800552c:	08017024 	.word	0x08017024

08005530 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b094      	sub	sp, #80	; 0x50
 8005534:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  struct tm tim = {0};
 8005542:	463b      	mov	r3, r7
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f00d fb6d 	bl	8012c28 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800554e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	4619      	mov	r1, r3
 8005556:	4822      	ldr	r0, [pc, #136]	; (80055e0 <readRTC+0xb0>)
 8005558:	f00a f8e0 	bl	800f71c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800555c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005560:	2200      	movs	r2, #0
 8005562:	4619      	mov	r1, r3
 8005564:	481e      	ldr	r0, [pc, #120]	; (80055e0 <readRTC+0xb0>)
 8005566:	f00a f9e3 	bl	800f930 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800556a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t mm  = rtcTime.Minutes;
 8005572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005576:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t ss  = rtcTime.Seconds;
 800557a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800557e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t d   = rtcDate.Date;
 8005582:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005586:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  uint8_t m   = rtcDate.Month;
 800558a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint16_t y  = rtcDate.Year;
 8005592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005596:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800559a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800559e:	3364      	adds	r3, #100	; 0x64
 80055a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

  tim.tm_year = yr;
 80055a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055a4:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 80055a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055aa:	3b01      	subs	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 80055ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80055b2:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 80055b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80055b8:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 80055ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80055be:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 80055c0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80055c4:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80055c6:	463b      	mov	r3, r7
 80055c8:	4618      	mov	r0, r3
 80055ca:	f00d fc0d 	bl	8012de8 <mktime>
 80055ce:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

  return currentTime;
 80055d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	3750      	adds	r7, #80	; 0x50
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200004ec 	.word	0x200004ec

080055e4 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80055ee:	2301      	movs	r3, #1
 80055f0:	80fb      	strh	r3, [r7, #6]
 80055f2:	e010      	b.n	8005616 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LoadAllEEPROM+0x44>)
 80055fa:	441a      	add	r2, r3
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe73 	bl	80042ec <EE_ReadVariable32bits>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	88bb      	ldrh	r3, [r7, #4]
 800560c:	4313      	orrs	r3, r2
 800560e:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	3301      	adds	r3, #1
 8005614:	80fb      	strh	r3, [r7, #6]
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b32      	cmp	r3, #50	; 0x32
 800561a:	d9eb      	bls.n	80055f4 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 800561c:	88bb      	ldrh	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000098c 	.word	0x2000098c

0800562c <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800563c:	f007 fc2e 	bl	800ce9c <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005640:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <StoreEEPROM+0x88>)
 8005642:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005646:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005648:	bf00      	nop
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <StoreEEPROM+0x88>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005656:	d0f8      	beq.n	800564a <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005658:	bf00      	nop
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <StoreEEPROM+0x8c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d0fb      	beq.n	800565a <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fe64 	bl	8004336 <EE_WriteVariable32bits>
 800566e:	4603      	mov	r3, r0
 8005670:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 8005672:	463a      	mov	r2, r7
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fe37 	bl	80042ec <EE_ReadVariable32bits>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	4313      	orrs	r3, r2
 8005686:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <StoreEEPROM+0x7a>
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <StoreEEPROM+0x8c>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f7fe fefa 	bl	8004490 <EE_CleanUp_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 80056a6:	f007 fc1b 	bl	800cee0 <HAL_FLASH_Lock>

  return eeStatus;
 80056aa:	89fb      	ldrh	r3, [r7, #14]

    */



}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58004000 	.word	0x58004000
 80056b8:	20000988 	.word	0x20000988

080056bc <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d018      	beq.n	80056fe <switchLedOn+0x42>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	dc1f      	bgt.n	8005710 <switchLedOn+0x54>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <switchLedOn+0x1e>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d009      	beq.n	80056ec <switchLedOn+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80056d8:	e01a      	b.n	8005710 <switchLedOn+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <switchLedOn+0x60>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <switchLedOn+0x64>)
 80056e0:	8811      	ldrh	r1, [r2, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f007 ff39 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 80056ea:	e012      	b.n	8005712 <switchLedOn+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <switchLedOn+0x68>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <switchLedOn+0x6c>)
 80056f2:	8811      	ldrh	r1, [r2, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f007 ff30 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 80056fc:	e009      	b.n	8005712 <switchLedOn+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <switchLedOn+0x70>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <switchLedOn+0x74>)
 8005704:	8811      	ldrh	r1, [r2, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f007 ff27 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 800570e:	e000      	b.n	8005712 <switchLedOn+0x56>
        default: break;
 8005710:	bf00      	nop
    }
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000cf0 	.word	0x20000cf0
 8005720:	20000cec 	.word	0x20000cec
 8005724:	20000ce8 	.word	0x20000ce8
 8005728:	20000ce6 	.word	0x20000ce6
 800572c:	20000cf8 	.word	0x20000cf8
 8005730:	20000cf4 	.word	0x20000cf4

08005734 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d018      	beq.n	8005776 <switchLedOff+0x42>
 8005744:	2b02      	cmp	r3, #2
 8005746:	dc1f      	bgt.n	8005788 <switchLedOff+0x54>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <switchLedOff+0x1e>
 800574c:	2b01      	cmp	r3, #1
 800574e:	d009      	beq.n	8005764 <switchLedOff+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8005750:	e01a      	b.n	8005788 <switchLedOff+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <switchLedOff+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <switchLedOff+0x64>)
 8005758:	8811      	ldrh	r1, [r2, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f007 fefd 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 8005762:	e012      	b.n	800578a <switchLedOff+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <switchLedOff+0x68>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <switchLedOff+0x6c>)
 800576a:	8811      	ldrh	r1, [r2, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f007 fef4 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 8005774:	e009      	b.n	800578a <switchLedOff+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <switchLedOff+0x70>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <switchLedOff+0x74>)
 800577c:	8811      	ldrh	r1, [r2, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f007 feeb 	bl	800d55c <HAL_GPIO_WritePin>
            break;
 8005786:	e000      	b.n	800578a <switchLedOff+0x56>
        default: break;
 8005788:	bf00      	nop
    }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000cf0 	.word	0x20000cf0
 8005798:	20000cec 	.word	0x20000cec
 800579c:	20000ce8 	.word	0x20000ce8
 80057a0:	20000ce6 	.word	0x20000ce6
 80057a4:	20000cf8 	.word	0x20000cf8
 80057a8:	20000cf4 	.word	0x20000cf4

080057ac <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 80057b6:	4b36      	ldr	r3, [pc, #216]	; (8005890 <HAL_GPIO_EXTI_Callback+0xe4>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d063      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_GPIO_EXTI_Callback+0xe8>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 80057ca:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_GPIO_EXTI_Callback+0xec>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 80057d0:	e05a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 80057d2:	4b32      	ldr	r3, [pc, #200]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d11c      	bne.n	8005816 <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057e2:	8812      	ldrh	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f007 fea0 	bl	800d52c <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80057fc:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_EXTI_Callback+0x62>
 8005806:	2000      	movs	r0, #0
 8005808:	f7ff ff58 	bl	80056bc <switchLedOn>
}
 800580c:	e03c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
     else switchLedOff(VCU_RX_LED);
 800580e:	2000      	movs	r0, #0
 8005810:	f7ff ff90 	bl	8005734 <switchLedOff>
}
 8005814:	e038      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	429a      	cmp	r2, r3
 800581e:	d033      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_GPIO_EXTI_Callback+0x100>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	429a      	cmp	r2, r3
 8005828:	d103      	bne.n	8005832 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_GPIO_EXTI_Callback+0x104>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
}
 8005830:	e02a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	429a      	cmp	r2, r3
 800583a:	d11c      	bne.n	8005876 <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f007 fe70 	bl	800d52c <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 800585c:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_EXTI_Callback+0xc2>
 8005866:	2001      	movs	r0, #1
 8005868:	f7ff ff28 	bl	80056bc <switchLedOn>
}
 800586c:	e00c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    else switchLedOff(MCU_RX_LED);
 800586e:	2001      	movs	r0, #1
 8005870:	f7ff ff60 	bl	8005734 <switchLedOff>
}
 8005874:	e008      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <HAL_GPIO_EXTI_Callback+0x114>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005880:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_GPIO_EXTI_Callback+0x118>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	429a      	cmp	r2, r3
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000c5e 	.word	0x20000c5e
 8005894:	20000c66 	.word	0x20000c66
 8005898:	20000d1f 	.word	0x20000d1f
 800589c:	20000c6e 	.word	0x20000c6e
 80058a0:	20000c70 	.word	0x20000c70
 80058a4:	20000d1e 	.word	0x20000d1e
 80058a8:	20000c7c 	.word	0x20000c7c
 80058ac:	20000c86 	.word	0x20000c86
 80058b0:	20000d1d 	.word	0x20000d1d
 80058b4:	20000c8e 	.word	0x20000c8e
 80058b8:	20000c90 	.word	0x20000c90
 80058bc:	20000d1c 	.word	0x20000d1c
 80058c0:	20000ccc 	.word	0x20000ccc
 80058c4:	20000cd6 	.word	0x20000cd6

080058c8 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d129      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
    // last contact timer overflow
    etTimerOverflows++;
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058e4:	6013      	str	r3, [r2, #0]
    decSec++;
 80058e6:	4b16      	ldr	r3, [pc, #88]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f0:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d10a      	bne.n	8005910 <HAL_TIM_PeriodElapsedCallback+0x48>
      decSec = 0;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f007 fe3e 	bl	800d58c <HAL_GPIO_TogglePin>
    }
    if((decSec % 5) == 0) sendState = 1;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8005916:	fba3 1302 	umull	r1, r3, r3, r2
 800591a:	0899      	lsrs	r1, r3, #2
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200005d8 	.word	0x200005d8
 800593c:	20000d20 	.word	0x20000d20
 8005940:	20000d24 	.word	0x20000d24
 8005944:	20000cf8 	.word	0x20000cf8
 8005948:	20000cf4 	.word	0x20000cf4
 800594c:	cccccccd 	.word	0xcccccccd
 8005950:	20000d25 	.word	0x20000d25

08005954 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800595e:	f007 fa9d 	bl	800ce9c <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005962:	492f      	ldr	r1, [pc, #188]	; (8005a20 <eepromDefaults+0xcc>)
 8005964:	2001      	movs	r0, #1
 8005966:	f7fe fce6 	bl	8004336 <EE_WriteVariable32bits>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	4313      	orrs	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <eepromDefaults+0x3e>
 800597e:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <eepromDefaults+0xd0>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f7fe fd84 	bl	8004490 <EE_CleanUp_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	4313      	orrs	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005992:	bf00      	nop
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <eepromDefaults+0xd0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1fb      	bne.n	8005994 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 800599c:	4922      	ldr	r1, [pc, #136]	; (8005a28 <eepromDefaults+0xd4>)
 800599e:	2002      	movs	r0, #2
 80059a0:	f7fe fcc9 	bl	8004336 <EE_WriteVariable32bits>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <eepromDefaults+0x78>
 80059b8:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <eepromDefaults+0xd0>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f7fe fd67 	bl	8004490 <EE_CleanUp_IT>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 80059cc:	bf00      	nop
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <eepromDefaults+0xd0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1fb      	bne.n	80059ce <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 80059d6:	2100      	movs	r1, #0
 80059d8:	2003      	movs	r0, #3
 80059da:	f7fe fcac 	bl	8004336 <EE_WriteVariable32bits>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <eepromDefaults+0xb2>
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <eepromDefaults+0xd0>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f7fe fd4a 	bl	8004490 <EE_CleanUp_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005a06:	bf00      	nop
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <eepromDefaults+0xd0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1fb      	bne.n	8005a08 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005a10:	f007 fa66 	bl	800cee0 <HAL_FLASH_Lock>

  return eeStatus;
 8005a14:	88fb      	ldrh	r3, [r7, #6]

}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	50616c61 	.word	0x50616c61
 8005a24:	20000988 	.word	0x20000988
 8005a28:	746f7621 	.word	0x746f7621

08005a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a36:	f006 ff99 	bl	800c96c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a3a:	f000 f881 	bl	8005b40 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005a3e:	f000 f8eb 	bl	8005c18 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Enable and set FLASH Interrupt priority */
    /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
    HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	2004      	movs	r0, #4
 8005a48:	f007 f8f1 	bl	800cc2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005a4c:	2004      	movs	r0, #4
 8005a4e:	f007 f908 	bl	800cc62 <HAL_NVIC_EnableIRQ>

    /* Unlock the Flash Program Erase controller */
    HAL_FLASH_Unlock();
 8005a52:	f007 fa23 	bl	800ce9c <HAL_FLASH_Unlock>

    /* Clear OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <main+0xfc>)
 8005a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a5c:	611a      	str	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005a5e:	bf00      	nop
 8005a60:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <main+0xfc>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d0f8      	beq.n	8005a60 <main+0x34>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a6e:	f000 fb17 	bl	80060a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005a72:	f000 f9c3 	bl	8005dfc <MX_SPI1_Init>
  MX_SPI2_Init();
 8005a76:	f000 f9ff 	bl	8005e78 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005a7a:	f000 f937 	bl	8005cec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005a7e:	f000 fae7 	bl	8006050 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005a82:	f000 f97f 	bl	8005d84 <MX_PKA_Init>
  MX_RTC_Init();
 8005a86:	f000 f991 	bl	8005dac <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005a8a:	f000 f8e3 	bl	8005c54 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005a8e:	f000 fa31 	bl	8005ef4 <MX_TIM1_Init>
  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <main+0x100>)
 8005a94:	f00a fcbc 	bl	8010410 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <main+0x104>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <main+0x90>
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a power-on reset: Forced Erase */
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7fd fe96 	bl	80037d8 <EE_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <main+0xbe>
 8005ab6:	f000 fde9 	bl	800668c <Error_Handler>
 8005aba:	e016      	b.n	8005aea <main+0xbe>
  }
  else
  {
    /* Clear the Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <main+0x104>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Check and Clear the Wakeup flag */
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <main+0x104>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <main+0xaa>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <main+0x104>)
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a STANDBY wakeup: Conditional Erase*/
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7fd fe7e 	bl	80037d8 <EE_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <main+0xbe>
 8005ae6:	f000 fdd1 	bl	800668c <Error_Handler>
  }


  LoadAllEEPROM();
 8005aea:	f7ff fd7b 	bl	80055e4 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <main+0x108>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <main+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d104      	bne.n	8005b02 <main+0xd6>
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <main+0x108>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <main+0x110>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d005      	beq.n	8005b0e <main+0xe2>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005b02:	f7ff ff27 	bl	8005954 <eepromDefaults>
 8005b06:	4603      	mov	r3, r0
 8005b08:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005b0a:	f7ff fd6b 	bl	80055e4 <LoadAllEEPROM>
  }
  HAL_FLASH_Lock();
 8005b0e:	f007 f9e7 	bl	800cee0 <HAL_FLASH_Lock>


  // Lock the Flash Program Erase controller */
  //HAL_FLASH_Lock();

  DRV_CANFDSPI_Reset(CAN2);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fb fa6c 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7fb fa69 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  PCU_Initialize();
 8005b1e:	f000 fdc5 	bl	80066ac <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005b22:	f000 ff09 	bl	8006938 <PCU_Tasks>
 8005b26:	e7fc      	b.n	8005b22 <main+0xf6>
 8005b28:	58004000 	.word	0x58004000
 8005b2c:	200005d8 	.word	0x200005d8
 8005b30:	58000400 	.word	0x58000400
 8005b34:	2000098c 	.word	0x2000098c
 8005b38:	50616c61 	.word	0x50616c61
 8005b3c:	746f7621 	.word	0x746f7621

08005b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b09a      	sub	sp, #104	; 0x68
 8005b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b46:	f107 0320 	add.w	r3, r7, #32
 8005b4a:	2248      	movs	r2, #72	; 0x48
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f00d f86a 	bl	8012c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005b66:	f007 fe99 	bl	800d89c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f7ff fbc8 	bl	8005300 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b78:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005b96:	2301      	movs	r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005bac:	2310      	movs	r3, #16
 8005bae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005bba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bc6:	f107 0320 	add.w	r3, r7, #32
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f008 f9fa 	bl	800dfc4 <HAL_RCC_OscConfig>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005bd6:	f000 fd59 	bl	800668c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005bda:	236f      	movs	r3, #111	; 0x6f
 8005bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bde:	2303      	movs	r3, #3
 8005be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f008 fd56 	bl	800e6ac <HAL_RCC_ClockConfig>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005c06:	f000 fd41 	bl	800668c <Error_Handler>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3768      	adds	r7, #104	; 0x68
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58000400 	.word	0x58000400

08005c18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b094      	sub	sp, #80	; 0x50
 8005c1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c1e:	463b      	mov	r3, r7
 8005c20:	2250      	movs	r2, #80	; 0x50
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00c ffff 	bl	8012c28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005c30:	2302      	movs	r3, #2
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005c34:	2310      	movs	r3, #16
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c38:	463b      	mov	r3, r7
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f009 f973 	bl	800ef26 <HAL_RCCEx_PeriphCLKConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005c46:	f000 fd21 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005c4a:	bf00      	nop
 8005c4c:	3750      	adds	r7, #80	; 0x50
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005c58:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c5a:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <MX_LPUART1_UART_Init+0x94>)
 8005c5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c90:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005c9c:	4811      	ldr	r0, [pc, #68]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c9e:	f00b fc67 	bl	8011570 <HAL_UART_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8005ca8:	f000 fcf0 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cac:	2100      	movs	r1, #0
 8005cae:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cb0:	f00c fd59 	bl	8012766 <HAL_UARTEx_SetTxFifoThreshold>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005cba:	f000 fce7 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4808      	ldr	r0, [pc, #32]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cc2:	f00c fd8e 	bl	80127e2 <HAL_UARTEx_SetRxFifoThreshold>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ccc:	f000 fcde 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005cd0:	4804      	ldr	r0, [pc, #16]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cd2:	f00c fd0f 	bl	80126f4 <HAL_UARTEx_DisableFifoMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005cdc:	f000 fcd6 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200003b8 	.word	0x200003b8
 8005ce8:	40008000 	.word	0x40008000

08005cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005cf0:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf2:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <MX_USART1_UART_Init+0x94>)
 8005cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d12:	220c      	movs	r2, #12
 8005d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d36:	f00b fc1b 	bl	8011570 <HAL_UART_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005d40:	f000 fca4 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d44:	2100      	movs	r1, #0
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d48:	f00c fd0d 	bl	8012766 <HAL_UARTEx_SetTxFifoThreshold>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005d52:	f000 fc9b 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d56:	2100      	movs	r1, #0
 8005d58:	4808      	ldr	r0, [pc, #32]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d5a:	f00c fd42 	bl	80127e2 <HAL_UARTEx_SetRxFifoThreshold>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005d64:	f000 fc92 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005d68:	4804      	ldr	r0, [pc, #16]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d6a:	f00c fcc3 	bl	80126f4 <HAL_UARTEx_DisableFifoMode>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005d74:	f000 fc8a 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000044c 	.word	0x2000044c
 8005d80:	40013800 	.word	0x40013800

08005d84 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d8a:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <MX_PKA_Init+0x24>)
 8005d8c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8005d8e:	4805      	ldr	r0, [pc, #20]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d90:	f007 fd55 	bl	800d83e <HAL_PKA_Init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8005d9a:	f000 fc77 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200004e0 	.word	0x200004e0
 8005da8:	58002000 	.word	0x58002000

08005dac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db2:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <MX_RTC_Init+0x4c>)
 8005db4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dbe:	227f      	movs	r2, #127	; 0x7f
 8005dc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <MX_RTC_Init+0x48>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005de0:	4804      	ldr	r0, [pc, #16]	; (8005df4 <MX_RTC_Init+0x48>)
 8005de2:	f009 fb27 	bl	800f434 <HAL_RTC_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005dec:	f000 fc4e 	bl	800668c <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 8005df0:	bf00      	nop
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200004ec 	.word	0x200004ec
 8005df8:	40002800 	.word	0x40002800

08005dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <MX_SPI1_Init+0x78>)
 8005e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e32:	2208      	movs	r2, #8
 8005e34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e5c:	f009 fe59 	bl	800fb12 <HAL_SPI_Init>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005e66:	f000 fc11 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000510 	.word	0x20000510
 8005e74:	40013000 	.word	0x40013000

08005e78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <MX_SPI2_Init+0x78>)
 8005e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8005e90:	4b16      	ldr	r3, [pc, #88]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed8:	f009 fe1b 	bl	800fb12 <HAL_SPI_Init>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005ee2:	f000 fbd3 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000574 	.word	0x20000574
 8005ef0:	40003800 	.word	0x40003800

08005ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b09c      	sub	sp, #112	; 0x70
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	2234      	movs	r2, #52	; 0x34
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f00c fe7a 	bl	8012c28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005f34:	4b44      	ldr	r3, [pc, #272]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f36:	4a45      	ldr	r2, [pc, #276]	; (800604c <MX_TIM1_Init+0x158>)
 8005f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005f3a:	4b43      	ldr	r3, [pc, #268]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f3c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f42:	4b41      	ldr	r3, [pc, #260]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f4a:	2263      	movs	r2, #99	; 0x63
 8005f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f54:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005f60:	4839      	ldr	r0, [pc, #228]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f62:	f00a f9f1 	bl	8010348 <HAL_TIM_Base_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005f6c:	f000 fb8e 	bl	800668c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005f76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4832      	ldr	r0, [pc, #200]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f7e:	f00a fcbf 	bl	8010900 <HAL_TIM_ConfigClockSource>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005f88:	f000 fb80 	bl	800668c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005f8c:	482e      	ldr	r0, [pc, #184]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f8e:	f00a fa8d 	bl	80104ac <HAL_TIM_OC_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005f98:	f000 fb78 	bl	800668c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fac:	4619      	mov	r1, r3
 8005fae:	4826      	ldr	r0, [pc, #152]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fb0:	f00b f9a6 	bl	8011300 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005fba:	f000 fb67 	bl	800668c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4819      	ldr	r0, [pc, #100]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fe4:	f00a fc12 	bl	801080c <HAL_TIM_OC_ConfigChannel>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005fee:	f000 fb4d 	bl	800668c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800600a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006022:	2300      	movs	r3, #0
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <MX_TIM1_Init+0x154>)
 8006030:	f00b f9c6 	bl	80113c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800603a:	f000 fb27 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800603e:	bf00      	nop
 8006040:	3770      	adds	r7, #112	; 0x70
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200005d8 	.word	0x200005d8
 800604c:	40012c00 	.word	0x40012c00

08006050 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <MX_USB_PCD_Init+0x4c>)
 8006058:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800605c:	2208      	movs	r2, #8
 800605e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006062:	2202      	movs	r2, #2
 8006064:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006068:	2202      	movs	r2, #2
 800606a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006080:	2200      	movs	r2, #0
 8006082:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006086:	f007 fad7 	bl	800d638 <HAL_PCD_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006090:	f000 fafc 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000694 	.word	0x20000694
 800609c:	40006800 	.word	0x40006800

080060a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 80060b4:	4b9d      	ldr	r3, [pc, #628]	; (800632c <MX_GPIO_Init+0x28c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 81c2 	bne.w	8006442 <MX_GPIO_Init+0x3a2>



CAN1_INT0_Pin         = GPIO_PIN_8;
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <MX_GPIO_Init+0x290>)
 80060c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060c4:	801a      	strh	r2, [r3, #0]
CAN1_INT0_GPIO_Port   = GPIOB;
 80060c6:	4b9b      	ldr	r3, [pc, #620]	; (8006334 <MX_GPIO_Init+0x294>)
 80060c8:	4a9b      	ldr	r2, [pc, #620]	; (8006338 <MX_GPIO_Init+0x298>)
 80060ca:	601a      	str	r2, [r3, #0]
CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80060cc:	4b9b      	ldr	r3, [pc, #620]	; (800633c <MX_GPIO_Init+0x29c>)
 80060ce:	2217      	movs	r2, #23
 80060d0:	801a      	strh	r2, [r3, #0]
CAN1_INT1_Pin         = GPIO_PIN_9;
 80060d2:	4b9b      	ldr	r3, [pc, #620]	; (8006340 <MX_GPIO_Init+0x2a0>)
 80060d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d8:	801a      	strh	r2, [r3, #0]
CAN1_INT1_GPIO_Port   = GPIOB;
 80060da:	4b9a      	ldr	r3, [pc, #616]	; (8006344 <MX_GPIO_Init+0x2a4>)
 80060dc:	4a96      	ldr	r2, [pc, #600]	; (8006338 <MX_GPIO_Init+0x298>)
 80060de:	601a      	str	r2, [r3, #0]
CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80060e0:	4b99      	ldr	r3, [pc, #612]	; (8006348 <MX_GPIO_Init+0x2a8>)
 80060e2:	2217      	movs	r2, #23
 80060e4:	801a      	strh	r2, [r3, #0]
SPI2_CS1_Pin          = GPIO_PIN_0;
 80060e6:	4b99      	ldr	r3, [pc, #612]	; (800634c <MX_GPIO_Init+0x2ac>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	801a      	strh	r2, [r3, #0]
SPI2_CS1_GPIO_Port    = GPIOC;
 80060ec:	4b98      	ldr	r3, [pc, #608]	; (8006350 <MX_GPIO_Init+0x2b0>)
 80060ee:	4a99      	ldr	r2, [pc, #612]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060f0:	601a      	str	r2, [r3, #0]
SPI2_CS2_Pin          = GPIO_PIN_3;
 80060f2:	4b99      	ldr	r3, [pc, #612]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80060f4:	2208      	movs	r2, #8
 80060f6:	801a      	strh	r2, [r3, #0]
SPI2_CS2_GPIO_Port    = GPIOC;
 80060f8:	4b98      	ldr	r3, [pc, #608]	; (800635c <MX_GPIO_Init+0x2bc>)
 80060fa:	4a96      	ldr	r2, [pc, #600]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060fc:	601a      	str	r2, [r3, #0]
CAN1_CS_Pin           = GPIO_PIN_5;
 80060fe:	4b98      	ldr	r3, [pc, #608]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006100:	2220      	movs	r2, #32
 8006102:	801a      	strh	r2, [r3, #0]
CAN1_CS_GPIO_Port     = GPIOA;
 8006104:	4b97      	ldr	r3, [pc, #604]	; (8006364 <MX_GPIO_Init+0x2c4>)
 8006106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800610a:	601a      	str	r2, [r3, #0]
BUTTON1_Pin           = GPIO_PIN_4;
 800610c:	4b96      	ldr	r3, [pc, #600]	; (8006368 <MX_GPIO_Init+0x2c8>)
 800610e:	2210      	movs	r2, #16
 8006110:	801a      	strh	r2, [r3, #0]
BUTTON1_GPIO_Port     = GPIOC;
 8006112:	4b96      	ldr	r3, [pc, #600]	; (800636c <MX_GPIO_Init+0x2cc>)
 8006114:	4a8f      	ldr	r2, [pc, #572]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006116:	601a      	str	r2, [r3, #0]
BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006118:	4b95      	ldr	r3, [pc, #596]	; (8006370 <MX_GPIO_Init+0x2d0>)
 800611a:	220a      	movs	r2, #10
 800611c:	801a      	strh	r2, [r3, #0]
CAN2_CS_Pin           = GPIO_PIN_5;
 800611e:	4b95      	ldr	r3, [pc, #596]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006120:	2220      	movs	r2, #32
 8006122:	801a      	strh	r2, [r3, #0]
CAN2_CS_GPIO_Port     = GPIOC;
 8006124:	4b94      	ldr	r3, [pc, #592]	; (8006378 <MX_GPIO_Init+0x2d8>)
 8006126:	4a8b      	ldr	r2, [pc, #556]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006128:	601a      	str	r2, [r3, #0]
LED_GREEN_Pin         = GPIO_PIN_0;
 800612a:	4b94      	ldr	r3, [pc, #592]	; (800637c <MX_GPIO_Init+0x2dc>)
 800612c:	2201      	movs	r2, #1
 800612e:	801a      	strh	r2, [r3, #0]
LED_GREEN_GPIO_Port   = GPIOB;
 8006130:	4b93      	ldr	r3, [pc, #588]	; (8006380 <MX_GPIO_Init+0x2e0>)
 8006132:	4a81      	ldr	r2, [pc, #516]	; (8006338 <MX_GPIO_Init+0x298>)
 8006134:	601a      	str	r2, [r3, #0]
LED_RED_Pin           = GPIO_PIN_1;
 8006136:	4b93      	ldr	r3, [pc, #588]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006138:	2202      	movs	r2, #2
 800613a:	801a      	strh	r2, [r3, #0]
LED_RED_GPIO_Port     = GPIOB;
 800613c:	4b92      	ldr	r3, [pc, #584]	; (8006388 <MX_GPIO_Init+0x2e8>)
 800613e:	4a7e      	ldr	r2, [pc, #504]	; (8006338 <MX_GPIO_Init+0x298>)
 8006140:	601a      	str	r2, [r3, #0]
CAN2_INT_Pin          = GPIO_PIN_12;
 8006142:	4b92      	ldr	r3, [pc, #584]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006148:	801a      	strh	r2, [r3, #0]
CAN2_INT_GPIO_Port    = GPIOB;
 800614a:	4b91      	ldr	r3, [pc, #580]	; (8006390 <MX_GPIO_Init+0x2f0>)
 800614c:	4a7a      	ldr	r2, [pc, #488]	; (8006338 <MX_GPIO_Init+0x298>)
 800614e:	601a      	str	r2, [r3, #0]
CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006150:	4b90      	ldr	r3, [pc, #576]	; (8006394 <MX_GPIO_Init+0x2f4>)
 8006152:	2228      	movs	r2, #40	; 0x28
 8006154:	801a      	strh	r2, [r3, #0]
CAN2_INT0_Pin         = GPIO_PIN_13;
 8006156:	4b90      	ldr	r3, [pc, #576]	; (8006398 <MX_GPIO_Init+0x2f8>)
 8006158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800615c:	801a      	strh	r2, [r3, #0]
CAN2_INT0_GPIO_Port   = GPIOB;
 800615e:	4b8f      	ldr	r3, [pc, #572]	; (800639c <MX_GPIO_Init+0x2fc>)
 8006160:	4a75      	ldr	r2, [pc, #468]	; (8006338 <MX_GPIO_Init+0x298>)
 8006162:	601a      	str	r2, [r3, #0]
CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006164:	4b8e      	ldr	r3, [pc, #568]	; (80063a0 <MX_GPIO_Init+0x300>)
 8006166:	2228      	movs	r2, #40	; 0x28
 8006168:	801a      	strh	r2, [r3, #0]
CAN2_INT1_Pin         = GPIO_PIN_14;
 800616a:	4b8e      	ldr	r3, [pc, #568]	; (80063a4 <MX_GPIO_Init+0x304>)
 800616c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006170:	801a      	strh	r2, [r3, #0]
CAN2_INT1_GPIO_Port   = GPIOB;
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <MX_GPIO_Init+0x308>)
 8006174:	4a70      	ldr	r2, [pc, #448]	; (8006338 <MX_GPIO_Init+0x298>)
 8006176:	601a      	str	r2, [r3, #0]
CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006178:	4b8c      	ldr	r3, [pc, #560]	; (80063ac <MX_GPIO_Init+0x30c>)
 800617a:	2228      	movs	r2, #40	; 0x28
 800617c:	801a      	strh	r2, [r3, #0]
CAN1_INT_Pin          = GPIO_PIN_10;
 800617e:	4b8c      	ldr	r3, [pc, #560]	; (80063b0 <MX_GPIO_Init+0x310>)
 8006180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006184:	801a      	strh	r2, [r3, #0]
CAN1_INT_GPIO_Port    = GPIOA;
 8006186:	4b8b      	ldr	r3, [pc, #556]	; (80063b4 <MX_GPIO_Init+0x314>)
 8006188:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800618c:	601a      	str	r2, [r3, #0]
CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800618e:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <MX_GPIO_Init+0x318>)
 8006190:	2228      	movs	r2, #40	; 0x28
 8006192:	801a      	strh	r2, [r3, #0]
BUTTON2_Pin           = GPIO_PIN_0;
 8006194:	4b89      	ldr	r3, [pc, #548]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006196:	2201      	movs	r2, #1
 8006198:	801a      	strh	r2, [r3, #0]
BUTTON2_GPIO_Port     = GPIOD;
 800619a:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <MX_GPIO_Init+0x320>)
 800619c:	4a89      	ldr	r2, [pc, #548]	; (80063c4 <MX_GPIO_Init+0x324>)
 800619e:	601a      	str	r2, [r3, #0]
BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 80061a0:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <MX_GPIO_Init+0x328>)
 80061a2:	2206      	movs	r2, #6
 80061a4:	801a      	strh	r2, [r3, #0]
BUTTON3_Pin           = GPIO_PIN_1;
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <MX_GPIO_Init+0x32c>)
 80061a8:	2202      	movs	r2, #2
 80061aa:	801a      	strh	r2, [r3, #0]
BUTTON3_GPIO_Port     = GPIOD;
 80061ac:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <MX_GPIO_Init+0x330>)
 80061ae:	4a85      	ldr	r2, [pc, #532]	; (80063c4 <MX_GPIO_Init+0x324>)
 80061b0:	601a      	str	r2, [r3, #0]
BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 80061b2:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <MX_GPIO_Init+0x334>)
 80061b4:	2207      	movs	r2, #7
 80061b6:	801a      	strh	r2, [r3, #0]
LED_BLUE_Pin          = GPIO_PIN_5;
 80061b8:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <MX_GPIO_Init+0x338>)
 80061ba:	2220      	movs	r2, #32
 80061bc:	801a      	strh	r2, [r3, #0]
LED_BLUE_GPIO_Port    = GPIOB;
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <MX_GPIO_Init+0x33c>)
 80061c0:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <MX_GPIO_Init+0x298>)
 80061c2:	601a      	str	r2, [r3, #0]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	2004      	movs	r0, #4
 80061c6:	f7ff f8b1 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ca:	2002      	movs	r0, #2
 80061cc:	f7ff f8ae 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	2001      	movs	r0, #1
 80061d2:	f7ff f8ab 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	2008      	movs	r0, #8
 80061d8:	f7ff f8a8 	bl	800532c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80061dc:	4b5b      	ldr	r3, [pc, #364]	; (800634c <MX_GPIO_Init+0x2ac>)
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	4b5d      	ldr	r3, [pc, #372]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	4b62      	ldr	r3, [pc, #392]	; (8006374 <MX_GPIO_Init+0x2d4>)
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	4619      	mov	r1, r3
 80061f4:	4857      	ldr	r0, [pc, #348]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80061f6:	f007 f9b1 	bl	800d55c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80061fa:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a58      	ldr	r2, [pc, #352]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006200:	8811      	ldrh	r1, [r2, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f007 f9a9 	bl	800d55c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800620a:	4b5c      	ldr	r3, [pc, #368]	; (800637c <MX_GPIO_Init+0x2dc>)
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	4b70      	ldr	r3, [pc, #448]	; (80063d8 <MX_GPIO_Init+0x338>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2200      	movs	r2, #0
 8006220:	4619      	mov	r1, r3
 8006222:	4845      	ldr	r0, [pc, #276]	; (8006338 <MX_GPIO_Init+0x298>)
 8006224:	f007 f99a 	bl	800d55c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                          |CAN2_INT1_Pin;
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <MX_GPIO_Init+0x290>)
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <MX_GPIO_Init+0x2a0>)
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	4b55      	ldr	r3, [pc, #340]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	b29a      	uxth	r2, r3
 800623c:	4b56      	ldr	r3, [pc, #344]	; (8006398 <MX_GPIO_Init+0x2f8>)
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <MX_GPIO_Init+0x304>)
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	b29b      	uxth	r3, r3
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 800624c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800624e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006254:	2301      	movs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4836      	ldr	r0, [pc, #216]	; (8006338 <MX_GPIO_Init+0x298>)
 800625e:	f006 fff5 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 8006262:	4b3a      	ldr	r3, [pc, #232]	; (800634c <MX_GPIO_Init+0x2ac>)
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <MX_GPIO_Init+0x2b8>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006278:	2301      	movs	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4832      	ldr	r0, [pc, #200]	; (8006354 <MX_GPIO_Init+0x2b4>)
 800628a:	f006 ffdf 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006294:	2301      	movs	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 80062a0:	4b30      	ldr	r3, [pc, #192]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1d3a      	adds	r2, r7, #4
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 ffcf 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <MX_GPIO_Init+0x2c8>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80062b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80062b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062ba:	2301      	movs	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <MX_GPIO_Init+0x2cc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1d3a      	adds	r2, r7, #4
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f006 ffc0 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <MX_GPIO_Init+0x2dc>)
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <MX_GPIO_Init+0x2e4>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	4b3f      	ldr	r3, [pc, #252]	; (80063d8 <MX_GPIO_Init+0x338>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4811      	ldr	r0, [pc, #68]	; (8006338 <MX_GPIO_Init+0x298>)
 80062f4:	f006 ffaa 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80062f8:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <MX_GPIO_Init+0x310>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <MX_GPIO_Init+0x314>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1d3a      	adds	r2, r7, #4
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f006 ff9b 	bl	800d24c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <MX_GPIO_Init+0x32c>)
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006328:	e05a      	b.n	80063e0 <MX_GPIO_Init+0x340>
 800632a:	bf00      	nop
 800632c:	20000a58 	.word	0x20000a58
 8006330:	20000c66 	.word	0x20000c66
 8006334:	20000c68 	.word	0x20000c68
 8006338:	48000400 	.word	0x48000400
 800633c:	20000c6c 	.word	0x20000c6c
 8006340:	20000c6e 	.word	0x20000c6e
 8006344:	20000c70 	.word	0x20000c70
 8006348:	20000c74 	.word	0x20000c74
 800634c:	20000cbc 	.word	0x20000cbc
 8006350:	20000cc0 	.word	0x20000cc0
 8006354:	48000800 	.word	0x48000800
 8006358:	20000cc4 	.word	0x20000cc4
 800635c:	20000cc8 	.word	0x20000cc8
 8006360:	20000c76 	.word	0x20000c76
 8006364:	20000c78 	.word	0x20000c78
 8006368:	20000ccc 	.word	0x20000ccc
 800636c:	20000cd0 	.word	0x20000cd0
 8006370:	20000cd4 	.word	0x20000cd4
 8006374:	20000c96 	.word	0x20000c96
 8006378:	20000c98 	.word	0x20000c98
 800637c:	20000ce6 	.word	0x20000ce6
 8006380:	20000ce8 	.word	0x20000ce8
 8006384:	20000cec 	.word	0x20000cec
 8006388:	20000cf0 	.word	0x20000cf0
 800638c:	20000c7c 	.word	0x20000c7c
 8006390:	20000c80 	.word	0x20000c80
 8006394:	20000c84 	.word	0x20000c84
 8006398:	20000c86 	.word	0x20000c86
 800639c:	20000c88 	.word	0x20000c88
 80063a0:	20000c8c 	.word	0x20000c8c
 80063a4:	20000c8e 	.word	0x20000c8e
 80063a8:	20000c90 	.word	0x20000c90
 80063ac:	20000c94 	.word	0x20000c94
 80063b0:	20000c5e 	.word	0x20000c5e
 80063b4:	20000c60 	.word	0x20000c60
 80063b8:	20000c64 	.word	0x20000c64
 80063bc:	20000cd6 	.word	0x20000cd6
 80063c0:	20000cd8 	.word	0x20000cd8
 80063c4:	48000c00 	.word	0x48000c00
 80063c8:	20000cdc 	.word	0x20000cdc
 80063cc:	20000cde 	.word	0x20000cde
 80063d0:	20000ce0 	.word	0x20000ce0
 80063d4:	20000ce4 	.word	0x20000ce4
 80063d8:	20000cf4 	.word	0x20000cf4
 80063dc:	20000cf8 	.word	0x20000cf8
 80063e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	486e      	ldr	r0, [pc, #440]	; (80065a4 <MX_GPIO_Init+0x504>)
 80063ec:	f006 ff2e 	bl	800d24c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80063f0:	2200      	movs	r2, #0
 80063f2:	2100      	movs	r1, #0
 80063f4:	2006      	movs	r0, #6
 80063f6:	f006 fc1a 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80063fa:	2006      	movs	r0, #6
 80063fc:	f006 fc31 	bl	800cc62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006400:	2200      	movs	r2, #0
 8006402:	2100      	movs	r1, #0
 8006404:	2007      	movs	r0, #7
 8006406:	f006 fc12 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800640a:	2007      	movs	r0, #7
 800640c:	f006 fc29 	bl	800cc62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	200a      	movs	r0, #10
 8006416:	f006 fc0a 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800641a:	200a      	movs	r0, #10
 800641c:	f006 fc21 	bl	800cc62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	2017      	movs	r0, #23
 8006426:	f006 fc02 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800642a:	2017      	movs	r0, #23
 800642c:	f006 fc19 	bl	800cc62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	2028      	movs	r0, #40	; 0x28
 8006436:	f006 fbfa 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800643a:	2028      	movs	r0, #40	; 0x28
 800643c:	f006 fc11 	bl	800cc62 <HAL_NVIC_EnableIRQ>


  }
  /* USER CODE END MX_GPIO_Init_2 */

}
 8006440:	e0ac      	b.n	800659c <MX_GPIO_Init+0x4fc>
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006442:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <MX_GPIO_Init+0x508>)
 8006444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006448:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 800644a:	4b58      	ldr	r3, [pc, #352]	; (80065ac <MX_GPIO_Init+0x50c>)
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <MX_GPIO_Init+0x510>)
 800644e:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <MX_GPIO_Init+0x514>)
 8006452:	2228      	movs	r2, #40	; 0x28
 8006454:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006456:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <MX_GPIO_Init+0x518>)
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800645c:	4b57      	ldr	r3, [pc, #348]	; (80065bc <MX_GPIO_Init+0x51c>)
 800645e:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006460:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006462:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <MX_GPIO_Init+0x524>)
 8006464:	2217      	movs	r2, #23
 8006466:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006468:	4b57      	ldr	r3, [pc, #348]	; (80065c8 <MX_GPIO_Init+0x528>)
 800646a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800646e:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 8006470:	4b56      	ldr	r3, [pc, #344]	; (80065cc <MX_GPIO_Init+0x52c>)
 8006472:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006476:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <MX_GPIO_Init+0x530>)
 800647a:	2217      	movs	r2, #23
 800647c:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800647e:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <MX_GPIO_Init+0x534>)
 8006480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006486:	4b54      	ldr	r3, [pc, #336]	; (80065d8 <MX_GPIO_Init+0x538>)
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <MX_GPIO_Init+0x510>)
 800648a:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800648c:	4b53      	ldr	r3, [pc, #332]	; (80065dc <MX_GPIO_Init+0x53c>)
 800648e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006492:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006494:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <MX_GPIO_Init+0x540>)
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006498:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800649a:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <MX_GPIO_Init+0x544>)
 800649c:	2228      	movs	r2, #40	; 0x28
 800649e:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 80064a0:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <MX_GPIO_Init+0x548>)
 80064a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 80064a8:	4b50      	ldr	r3, [pc, #320]	; (80065ec <MX_GPIO_Init+0x54c>)
 80064aa:	4a45      	ldr	r2, [pc, #276]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064ac:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 80064ae:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <MX_GPIO_Init+0x550>)
 80064b0:	2228      	movs	r2, #40	; 0x28
 80064b2:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80064b4:	4b4f      	ldr	r3, [pc, #316]	; (80065f4 <MX_GPIO_Init+0x554>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <MX_GPIO_Init+0x558>)
 80064bc:	4a39      	ldr	r2, [pc, #228]	; (80065a4 <MX_GPIO_Init+0x504>)
 80064be:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80064c0:	4b4e      	ldr	r3, [pc, #312]	; (80065fc <MX_GPIO_Init+0x55c>)
 80064c2:	2206      	movs	r2, #6
 80064c4:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80064c6:	4b4e      	ldr	r3, [pc, #312]	; (8006600 <MX_GPIO_Init+0x560>)
 80064c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064cc:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064ce:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <MX_GPIO_Init+0x564>)
 80064d0:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064d2:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80064d4:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <MX_GPIO_Init+0x568>)
 80064d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064da:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <MX_GPIO_Init+0x56c>)
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064e0:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <MX_GPIO_Init+0x570>)
 80064e4:	2217      	movs	r2, #23
 80064e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80064e8:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <MX_GPIO_Init+0x574>)
 80064ea:	2210      	movs	r2, #16
 80064ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <MX_GPIO_Init+0x578>)
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064f2:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80064f4:	4b49      	ldr	r3, [pc, #292]	; (800661c <MX_GPIO_Init+0x57c>)
 80064f6:	220a      	movs	r2, #10
 80064f8:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80064fa:	4b49      	ldr	r3, [pc, #292]	; (8006620 <MX_GPIO_Init+0x580>)
 80064fc:	2220      	movs	r2, #32
 80064fe:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 8006500:	4b48      	ldr	r3, [pc, #288]	; (8006624 <MX_GPIO_Init+0x584>)
 8006502:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006504:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 8006506:	4b48      	ldr	r3, [pc, #288]	; (8006628 <MX_GPIO_Init+0x588>)
 8006508:	2217      	movs	r2, #23
 800650a:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <MX_GPIO_Init+0x58c>)
 800650e:	2202      	movs	r2, #2
 8006510:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <MX_GPIO_Init+0x590>)
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <MX_GPIO_Init+0x504>)
 8006516:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006518:	4b46      	ldr	r3, [pc, #280]	; (8006634 <MX_GPIO_Init+0x594>)
 800651a:	2201      	movs	r2, #1
 800651c:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800651e:	4b46      	ldr	r3, [pc, #280]	; (8006638 <MX_GPIO_Init+0x598>)
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006522:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006524:	4b45      	ldr	r3, [pc, #276]	; (800663c <MX_GPIO_Init+0x59c>)
 8006526:	2208      	movs	r2, #8
 8006528:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <MX_GPIO_Init+0x5a0>)
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <MX_GPIO_Init+0x520>)
 800652e:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <MX_GPIO_Init+0x5a4>)
 8006532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006536:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006538:	4b43      	ldr	r3, [pc, #268]	; (8006648 <MX_GPIO_Init+0x5a8>)
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <MX_GPIO_Init+0x510>)
 800653c:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800653e:	4b43      	ldr	r3, [pc, #268]	; (800664c <MX_GPIO_Init+0x5ac>)
 8006540:	2228      	movs	r2, #40	; 0x28
 8006542:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;
 8006544:	4b42      	ldr	r3, [pc, #264]	; (8006650 <MX_GPIO_Init+0x5b0>)
 8006546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800654a:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800654c:	4b41      	ldr	r3, [pc, #260]	; (8006654 <MX_GPIO_Init+0x5b4>)
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006550:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <MX_GPIO_Init+0x5b8>)
 8006554:	2206      	movs	r2, #6
 8006556:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;
 8006558:	4b40      	ldr	r3, [pc, #256]	; (800665c <MX_GPIO_Init+0x5bc>)
 800655a:	2204      	movs	r2, #4
 800655c:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <MX_GPIO_Init+0x5c0>)
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006562:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006564:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <MX_GPIO_Init+0x5c4>)
 8006566:	2208      	movs	r2, #8
 8006568:	801a      	strh	r2, [r3, #0]
    LED_CAN1_Pin         = GPIO_PIN_0;
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <MX_GPIO_Init+0x5c8>)
 800656c:	2201      	movs	r2, #1
 800656e:	801a      	strh	r2, [r3, #0]
    LED_CAN1_GPIO_Port   = GPIOB;
 8006570:	4b3e      	ldr	r3, [pc, #248]	; (800666c <MX_GPIO_Init+0x5cc>)
 8006572:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006574:	601a      	str	r2, [r3, #0]
    LED_CAN2_Pin         = GPIO_PIN_1;
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <MX_GPIO_Init+0x5d0>)
 8006578:	2202      	movs	r2, #2
 800657a:	801a      	strh	r2, [r3, #0]
    LED_CAN2_GPIO_Port   = GPIOB;
 800657c:	4b3d      	ldr	r3, [pc, #244]	; (8006674 <MX_GPIO_Init+0x5d4>)
 800657e:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006580:	601a      	str	r2, [r3, #0]
    LED_CAN3_Pin         = GPIO_PIN_4;
 8006582:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <MX_GPIO_Init+0x5d8>)
 8006584:	2210      	movs	r2, #16
 8006586:	801a      	strh	r2, [r3, #0]
    LED_CAN3_GPIO_Port   = GPIOE;
 8006588:	4b3c      	ldr	r3, [pc, #240]	; (800667c <MX_GPIO_Init+0x5dc>)
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <MX_GPIO_Init+0x5e0>)
 800658c:	601a      	str	r2, [r3, #0]
    LED_HBEAT_Pin        = GPIO_PIN_12;
 800658e:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <MX_GPIO_Init+0x5e4>)
 8006590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006594:	801a      	strh	r2, [r3, #0]
    LED_HBEAT_GPIO_Port  = GPIOB;
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <MX_GPIO_Init+0x5e8>)
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <MX_GPIO_Init+0x510>)
 800659a:	601a      	str	r2, [r3, #0]
}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	48000c00 	.word	0x48000c00
 80065a8:	20000c5e 	.word	0x20000c5e
 80065ac:	20000c60 	.word	0x20000c60
 80065b0:	48000400 	.word	0x48000400
 80065b4:	20000c64 	.word	0x20000c64
 80065b8:	20000c66 	.word	0x20000c66
 80065bc:	20000c68 	.word	0x20000c68
 80065c0:	48000800 	.word	0x48000800
 80065c4:	20000c6c 	.word	0x20000c6c
 80065c8:	20000c6e 	.word	0x20000c6e
 80065cc:	20000c70 	.word	0x20000c70
 80065d0:	20000c74 	.word	0x20000c74
 80065d4:	20000c76 	.word	0x20000c76
 80065d8:	20000c78 	.word	0x20000c78
 80065dc:	20000c7c 	.word	0x20000c7c
 80065e0:	20000c80 	.word	0x20000c80
 80065e4:	20000c84 	.word	0x20000c84
 80065e8:	20000c86 	.word	0x20000c86
 80065ec:	20000c88 	.word	0x20000c88
 80065f0:	20000c8c 	.word	0x20000c8c
 80065f4:	20000c8e 	.word	0x20000c8e
 80065f8:	20000c90 	.word	0x20000c90
 80065fc:	20000c94 	.word	0x20000c94
 8006600:	20000c96 	.word	0x20000c96
 8006604:	20000c98 	.word	0x20000c98
 8006608:	20000c9c 	.word	0x20000c9c
 800660c:	20000ca0 	.word	0x20000ca0
 8006610:	20000ca4 	.word	0x20000ca4
 8006614:	20000ca6 	.word	0x20000ca6
 8006618:	20000ca8 	.word	0x20000ca8
 800661c:	20000cac 	.word	0x20000cac
 8006620:	20000cae 	.word	0x20000cae
 8006624:	20000cb0 	.word	0x20000cb0
 8006628:	20000cb4 	.word	0x20000cb4
 800662c:	20000cb6 	.word	0x20000cb6
 8006630:	20000cb8 	.word	0x20000cb8
 8006634:	20000cbc 	.word	0x20000cbc
 8006638:	20000cc0 	.word	0x20000cc0
 800663c:	20000cc4 	.word	0x20000cc4
 8006640:	20000cc8 	.word	0x20000cc8
 8006644:	20000ccc 	.word	0x20000ccc
 8006648:	20000cd0 	.word	0x20000cd0
 800664c:	20000cd4 	.word	0x20000cd4
 8006650:	20000cd6 	.word	0x20000cd6
 8006654:	20000cd8 	.word	0x20000cd8
 8006658:	20000cdc 	.word	0x20000cdc
 800665c:	20000cde 	.word	0x20000cde
 8006660:	20000ce0 	.word	0x20000ce0
 8006664:	20000ce4 	.word	0x20000ce4
 8006668:	20000cfc 	.word	0x20000cfc
 800666c:	20000d00 	.word	0x20000d00
 8006670:	20000d04 	.word	0x20000d04
 8006674:	20000d08 	.word	0x20000d08
 8006678:	20000d0c 	.word	0x20000d0c
 800667c:	20000d10 	.word	0x20000d10
 8006680:	48001000 	.word	0x48001000
 8006684:	20000d14 	.word	0x20000d14
 8006688:	20000d18 	.word	0x20000d18

0800668c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006690:	4904      	ldr	r1, [pc, #16]	; (80066a4 <Error_Handler+0x18>)
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <Error_Handler+0x1c>)
 8006694:	f00d fada 	bl	8013c4c <siprintf>
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <Error_Handler+0x1c>)
 800669a:	f7fe fe61 	bl	8005360 <serialOut>
  return;
 800669e:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	0801704c 	.word	0x0801704c
 80066a8:	20000b64 	.word	0x20000b64

080066ac <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 80066b2:	f7fe ff97 	bl	80055e4 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 80066b6:	2254      	movs	r2, #84	; 0x54
 80066b8:	2100      	movs	r1, #0
 80066ba:	488a      	ldr	r0, [pc, #552]	; (80068e4 <PCU_Initialize+0x238>)
 80066bc:	f00c fab4 	bl	8012c28 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 80066c0:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <PCU_Initialize+0x23c>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b87      	ldr	r3, [pc, #540]	; (80068e4 <PCU_Initialize+0x238>)
 80066c8:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 80066ca:	4b86      	ldr	r3, [pc, #536]	; (80068e4 <PCU_Initialize+0x238>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 80066d0:	4b84      	ldr	r3, [pc, #528]	; (80068e4 <PCU_Initialize+0x238>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 80066d6:	4b83      	ldr	r3, [pc, #524]	; (80068e4 <PCU_Initialize+0x238>)
 80066d8:	2200      	movs	r2, #0
 80066da:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 80066dc:	4b81      	ldr	r3, [pc, #516]	; (80068e4 <PCU_Initialize+0x238>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 80066e4:	4b7f      	ldr	r3, [pc, #508]	; (80068e4 <PCU_Initialize+0x238>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	815a      	strh	r2, [r3, #10]
 80066ea:	e007      	b.n	80066fc <PCU_Initialize+0x50>
  else if (pack.id == 1)
 80066ec:	4b7d      	ldr	r3, [pc, #500]	; (80068e4 <PCU_Initialize+0x238>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d103      	bne.n	80066fc <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 80066f4:	4b7b      	ldr	r3, [pc, #492]	; (80068e4 <PCU_Initialize+0x238>)
 80066f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fa:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <PCU_Initialize+0x238>)
 80066fe:	2200      	movs	r2, #0
 8006700:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006702:	4b78      	ldr	r3, [pc, #480]	; (80068e4 <PCU_Initialize+0x238>)
 8006704:	2200      	movs	r2, #0
 8006706:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <PCU_Initialize+0x238>)
 800670a:	2200      	movs	r2, #0
 800670c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800670e:	4b75      	ldr	r3, [pc, #468]	; (80068e4 <PCU_Initialize+0x238>)
 8006710:	2200      	movs	r2, #0
 8006712:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006714:	4b73      	ldr	r3, [pc, #460]	; (80068e4 <PCU_Initialize+0x238>)
 8006716:	2200      	movs	r2, #0
 8006718:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800671a:	4b72      	ldr	r3, [pc, #456]	; (80068e4 <PCU_Initialize+0x238>)
 800671c:	2200      	movs	r2, #0
 800671e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006720:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <PCU_Initialize+0x238>)
 8006722:	2200      	movs	r2, #0
 8006724:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006726:	4b6f      	ldr	r3, [pc, #444]	; (80068e4 <PCU_Initialize+0x238>)
 8006728:	2200      	movs	r2, #0
 800672a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800672c:	4b6d      	ldr	r3, [pc, #436]	; (80068e4 <PCU_Initialize+0x238>)
 800672e:	2200      	movs	r2, #0
 8006730:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgTemp=0;
 8006732:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <PCU_Initialize+0x238>)
 8006734:	2200      	movs	r2, #0
 8006736:	84da      	strh	r2, [r3, #38]	; 0x26
  pack.cellHiVolt=0;
 8006738:	4b6a      	ldr	r3, [pc, #424]	; (80068e4 <PCU_Initialize+0x238>)
 800673a:	2200      	movs	r2, #0
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
  pack.cellLoVolt=0;
 800673e:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <PCU_Initialize+0x238>)
 8006740:	2200      	movs	r2, #0
 8006742:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellAvgVolt=0;
 8006744:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <PCU_Initialize+0x238>)
 8006746:	2200      	movs	r2, #0
 8006748:	861a      	strh	r2, [r3, #48]	; 0x30
  pack.status=0;
 800674a:	4b66      	ldr	r3, [pc, #408]	; (80068e4 <PCU_Initialize+0x238>)
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  pack.vcuStateChange=0;
 8006752:	4b64      	ldr	r3, [pc, #400]	; (80068e4 <PCU_Initialize+0x238>)
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pack.state=0;
 800675a:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <PCU_Initialize+0x238>)
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pack.vcuRequestedState=0;
 8006762:	4b60      	ldr	r3, [pc, #384]	; (80068e4 <PCU_Initialize+0x238>)
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pack.soc=0;
 800676a:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <PCU_Initialize+0x238>)
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  pack.soh=0;
 8006772:	4b5c      	ldr	r3, [pc, #368]	; (80068e4 <PCU_Initialize+0x238>)
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  pack.vcuLastContact.overflows=0;
 800677a:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <PCU_Initialize+0x238>)
 800677c:	2200      	movs	r2, #0
 800677e:	649a      	str	r2, [r3, #72]	; 0x48
  pack.vcuLastContact.ticks=0;
 8006780:	4b58      	ldr	r3, [pc, #352]	; (80068e4 <PCU_Initialize+0x238>)
 8006782:	2200      	movs	r2, #0
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
  pack.cellBalanceActive=0;
 8006786:	4b57      	ldr	r3, [pc, #348]	; (80068e4 <PCU_Initialize+0x238>)
 8006788:	2200      	movs	r2, #0
 800678a:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 800678c:	4b55      	ldr	r3, [pc, #340]	; (80068e4 <PCU_Initialize+0x238>)
 800678e:	2200      	movs	r2, #0
 8006790:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006792:	4b54      	ldr	r3, [pc, #336]	; (80068e4 <PCU_Initialize+0x238>)
 8006794:	2200      	movs	r2, #0
 8006796:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 8006798:	4b52      	ldr	r3, [pc, #328]	; (80068e4 <PCU_Initialize+0x238>)
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80067a0:	2300      	movs	r3, #0
 80067a2:	71fb      	strb	r3, [r7, #7]
 80067a4:	e00f      	b.n	80067c6 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	4a4e      	ldr	r2, [pc, #312]	; (80068ec <PCU_Initialize+0x240>)
 80067b2:	4413      	add	r3, r2
 80067b4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f00c fa34 	bl	8012c28 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	3301      	adds	r3, #1
 80067c4:	71fb      	strb	r3, [r7, #7]
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	2b1f      	cmp	r3, #31
 80067ca:	d9ec      	bls.n	80067a6 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 80067cc:	4848      	ldr	r0, [pc, #288]	; (80068f0 <PCU_Initialize+0x244>)
 80067ce:	f7fe fdc7 	bl	8005360 <serialOut>
  serialOut("");
 80067d2:	4847      	ldr	r0, [pc, #284]	; (80068f0 <PCU_Initialize+0x244>)
 80067d4:	f7fe fdc4 	bl	8005360 <serialOut>
  serialOut("        ██    ██");
 80067d8:	4846      	ldr	r0, [pc, #280]	; (80068f4 <PCU_Initialize+0x248>)
 80067da:	f7fe fdc1 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80067de:	4846      	ldr	r0, [pc, #280]	; (80068f8 <PCU_Initialize+0x24c>)
 80067e0:	f7fe fdbe 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 80067e4:	4845      	ldr	r0, [pc, #276]	; (80068fc <PCU_Initialize+0x250>)
 80067e6:	f7fe fdbb 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 80067ea:	4845      	ldr	r0, [pc, #276]	; (8006900 <PCU_Initialize+0x254>)
 80067ec:	f7fe fdb8 	bl	8005360 <serialOut>
  serialOut("     ██    ██    ██");
 80067f0:	4844      	ldr	r0, [pc, #272]	; (8006904 <PCU_Initialize+0x258>)
 80067f2:	f7fe fdb5 	bl	8005360 <serialOut>
  serialOut("     m o d b a t t");
 80067f6:	4844      	ldr	r0, [pc, #272]	; (8006908 <PCU_Initialize+0x25c>)
 80067f8:	f7fe fdb2 	bl	8005360 <serialOut>
  serialOut("");
 80067fc:	483c      	ldr	r0, [pc, #240]	; (80068f0 <PCU_Initialize+0x244>)
 80067fe:	f7fe fdaf 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8006802:	2000      	movs	r0, #0
 8006804:	f003 fcf8 	bl	800a1f8 <CAN_TestRamAccess>
 8006808:	4603      	mov	r3, r0
 800680a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800680c:	79bb      	ldrb	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <PCU_Initialize+0x176>
 8006812:	493e      	ldr	r1, [pc, #248]	; (800690c <PCU_Initialize+0x260>)
 8006814:	483e      	ldr	r0, [pc, #248]	; (8006910 <PCU_Initialize+0x264>)
 8006816:	f00d fa19 	bl	8013c4c <siprintf>
 800681a:	483d      	ldr	r0, [pc, #244]	; (8006910 <PCU_Initialize+0x264>)
 800681c:	f7fe fda0 	bl	8005360 <serialOut>
 8006820:	e006      	b.n	8006830 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006822:	493c      	ldr	r1, [pc, #240]	; (8006914 <PCU_Initialize+0x268>)
 8006824:	483a      	ldr	r0, [pc, #232]	; (8006910 <PCU_Initialize+0x264>)
 8006826:	f00d fa11 	bl	8013c4c <siprintf>
 800682a:	4839      	ldr	r0, [pc, #228]	; (8006910 <PCU_Initialize+0x264>)
 800682c:	f7fe fd98 	bl	8005360 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006830:	2000      	movs	r0, #0
 8006832:	f003 fc67 	bl	800a104 <CAN_TestRegisterAccess>
 8006836:	4603      	mov	r3, r0
 8006838:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800683a:	79bb      	ldrb	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <PCU_Initialize+0x1a4>
 8006840:	4935      	ldr	r1, [pc, #212]	; (8006918 <PCU_Initialize+0x26c>)
 8006842:	4833      	ldr	r0, [pc, #204]	; (8006910 <PCU_Initialize+0x264>)
 8006844:	f00d fa02 	bl	8013c4c <siprintf>
 8006848:	4831      	ldr	r0, [pc, #196]	; (8006910 <PCU_Initialize+0x264>)
 800684a:	f7fe fd89 	bl	8005360 <serialOut>
 800684e:	e006      	b.n	800685e <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006850:	4932      	ldr	r1, [pc, #200]	; (800691c <PCU_Initialize+0x270>)
 8006852:	482f      	ldr	r0, [pc, #188]	; (8006910 <PCU_Initialize+0x264>)
 8006854:	f00d f9fa 	bl	8013c4c <siprintf>
 8006858:	482d      	ldr	r0, [pc, #180]	; (8006910 <PCU_Initialize+0x264>)
 800685a:	f7fe fd81 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 800685e:	4930      	ldr	r1, [pc, #192]	; (8006920 <PCU_Initialize+0x274>)
 8006860:	482b      	ldr	r0, [pc, #172]	; (8006910 <PCU_Initialize+0x264>)
 8006862:	f00d f9f3 	bl	8013c4c <siprintf>
 8006866:	482a      	ldr	r0, [pc, #168]	; (8006910 <PCU_Initialize+0x264>)
 8006868:	f7fe fd7a 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 800686c:	2001      	movs	r0, #1
 800686e:	f003 fcc3 	bl	800a1f8 <CAN_TestRamAccess>
 8006872:	4603      	mov	r3, r0
 8006874:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8006876:	79bb      	ldrb	r3, [r7, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <PCU_Initialize+0x1e0>
 800687c:	4929      	ldr	r1, [pc, #164]	; (8006924 <PCU_Initialize+0x278>)
 800687e:	4824      	ldr	r0, [pc, #144]	; (8006910 <PCU_Initialize+0x264>)
 8006880:	f00d f9e4 	bl	8013c4c <siprintf>
 8006884:	4822      	ldr	r0, [pc, #136]	; (8006910 <PCU_Initialize+0x264>)
 8006886:	f7fe fd6b 	bl	8005360 <serialOut>
 800688a:	e006      	b.n	800689a <PCU_Initialize+0x1ee>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 800688c:	4926      	ldr	r1, [pc, #152]	; (8006928 <PCU_Initialize+0x27c>)
 800688e:	4820      	ldr	r0, [pc, #128]	; (8006910 <PCU_Initialize+0x264>)
 8006890:	f00d f9dc 	bl	8013c4c <siprintf>
 8006894:	481e      	ldr	r0, [pc, #120]	; (8006910 <PCU_Initialize+0x264>)
 8006896:	f7fe fd63 	bl	8005360 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 800689a:	2001      	movs	r0, #1
 800689c:	f003 fc32 	bl	800a104 <CAN_TestRegisterAccess>
 80068a0:	4603      	mov	r3, r0
 80068a2:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 80068a4:	79bb      	ldrb	r3, [r7, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <PCU_Initialize+0x20e>
 80068aa:	4920      	ldr	r1, [pc, #128]	; (800692c <PCU_Initialize+0x280>)
 80068ac:	4818      	ldr	r0, [pc, #96]	; (8006910 <PCU_Initialize+0x264>)
 80068ae:	f00d f9cd 	bl	8013c4c <siprintf>
 80068b2:	4817      	ldr	r0, [pc, #92]	; (8006910 <PCU_Initialize+0x264>)
 80068b4:	f7fe fd54 	bl	8005360 <serialOut>
 80068b8:	e006      	b.n	80068c8 <PCU_Initialize+0x21c>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 80068ba:	491d      	ldr	r1, [pc, #116]	; (8006930 <PCU_Initialize+0x284>)
 80068bc:	4814      	ldr	r0, [pc, #80]	; (8006910 <PCU_Initialize+0x264>)
 80068be:	f00d f9c5 	bl	8013c4c <siprintf>
 80068c2:	4813      	ldr	r0, [pc, #76]	; (8006910 <PCU_Initialize+0x264>)
 80068c4:	f7fe fd4c 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80068c8:	4915      	ldr	r1, [pc, #84]	; (8006920 <PCU_Initialize+0x274>)
 80068ca:	4811      	ldr	r0, [pc, #68]	; (8006910 <PCU_Initialize+0x264>)
 80068cc:	f00d f9be 	bl	8013c4c <siprintf>
 80068d0:	480f      	ldr	r0, [pc, #60]	; (8006910 <PCU_Initialize+0x264>)
 80068d2:	f7fe fd45 	bl	8005360 <serialOut>

  appData.state = PC_STATE_INIT;
 80068d6:	4b17      	ldr	r3, [pc, #92]	; (8006934 <PCU_Initialize+0x288>)
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000a664 	.word	0x2000a664
 80068e8:	2000098c 	.word	0x2000098c
 80068ec:	20000de4 	.word	0x20000de4
 80068f0:	0801705c 	.word	0x0801705c
 80068f4:	08017060 	.word	0x08017060
 80068f8:	0801707c 	.word	0x0801707c
 80068fc:	080170a4 	.word	0x080170a4
 8006900:	080170f4 	.word	0x080170f4
 8006904:	08017144 	.word	0x08017144
 8006908:	08017164 	.word	0x08017164
 800690c:	08017178 	.word	0x08017178
 8006910:	20000b64 	.word	0x20000b64
 8006914:	080171a8 	.word	0x080171a8
 8006918:	080171e0 	.word	0x080171e0
 800691c:	08017210 	.word	0x08017210
 8006920:	08017248 	.word	0x08017248
 8006924:	0801724c 	.word	0x0801724c
 8006928:	0801727c 	.word	0x0801727c
 800692c:	080172b4 	.word	0x080172b4
 8006930:	080172e4 	.word	0x080172e4
 8006934:	20000d28 	.word	0x20000d28

08006938 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800693e:	4bad      	ldr	r3, [pc, #692]	; (8006bf4 <PCU_Tasks+0x2bc>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d126      	bne.n	8006994 <PCU_Tasks+0x5c>
    switchLedOn(GREEN_LED);
 8006946:	2001      	movs	r0, #1
 8006948:	f7fe feb8 	bl	80056bc <switchLedOn>
    switchLedOn(RED_LED);
 800694c:	2000      	movs	r0, #0
 800694e:	f7fe feb5 	bl	80056bc <switchLedOn>
    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 8006952:	2000      	movs	r0, #0
 8006954:	f000 fcee 	bl	8007334 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8006958:	2001      	movs	r0, #1
 800695a:	f000 fceb 	bl	8007334 <DRV_CANFDSPI_Init>
    switchLedOff(GREEN_LED);
 800695e:	2001      	movs	r0, #1
 8006960:	f7fe fee8 	bl	8005734 <switchLedOff>
    switchLedOff(RED_LED);
 8006964:	2000      	movs	r0, #0
 8006966:	f7fe fee5 	bl	8005734 <switchLedOff>

    MCU_IsolateAllModules();
 800696a:	f001 fdc1 	bl	80084f0 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 800696e:	f001 fd6b 	bl	8008448 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 8006972:	4ba1      	ldr	r3, [pc, #644]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 800697a:	4ba0      	ldr	r3, [pc, #640]	; (8006bfc <PCU_Tasks+0x2c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a9e      	ldr	r2, [pc, #632]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006980:	6493      	str	r3, [r2, #72]	; 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8006982:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <PCU_Tasks+0x2c8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	4a9b      	ldr	r2, [pc, #620]	; (8006bf8 <PCU_Tasks+0x2c0>)
 800698a:	6453      	str	r3, [r2, #68]	; 0x44

    appData.state = PC_STATE_RUN;
 800698c:	4b99      	ldr	r3, [pc, #612]	; (8006bf4 <PCU_Tasks+0x2bc>)
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e126      	b.n	8006be2 <PCU_Tasks+0x2aa>

  }else if (appData.state == PC_STATE_RUN){
 8006994:	4b97      	ldr	r3, [pc, #604]	; (8006bf4 <PCU_Tasks+0x2bc>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 8122 	bne.w	8006be2 <PCU_Tasks+0x2aa>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800699e:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <PCU_Tasks+0x2cc>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <PCU_Tasks+0x72>
      VCU_ReceiveMessages();
 80069a6:	f004 f88f 	bl	800aac8 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 80069aa:	4b97      	ldr	r3, [pc, #604]	; (8006c08 <PCU_Tasks+0x2d0>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <PCU_Tasks+0x7e>
      MCU_ReceiveMessages();
 80069b2:	f001 fa5d 	bl	8007e70 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 80069b6:	f004 fd13 	bl	800b3e0 <VCU_TicksSinceLastMessage>
 80069ba:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80069c2:	d920      	bls.n	8006a06 <PCU_Tasks+0xce>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 80069c4:	4b8c      	ldr	r3, [pc, #560]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d009      	beq.n	80069e2 <PCU_Tasks+0xaa>
 80069ce:	4b8a      	ldr	r3, [pc, #552]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d004      	beq.n	80069e2 <PCU_Tasks+0xaa>
 80069d8:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d130      	bne.n	8006a44 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80069e2:	4b8a      	ldr	r3, [pc, #552]	; (8006c0c <PCU_Tasks+0x2d4>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <PCU_Tasks+0xc4>
 80069ee:	4988      	ldr	r1, [pc, #544]	; (8006c10 <PCU_Tasks+0x2d8>)
 80069f0:	4888      	ldr	r0, [pc, #544]	; (8006c14 <PCU_Tasks+0x2dc>)
 80069f2:	f00d f92b 	bl	8013c4c <siprintf>
 80069f6:	4887      	ldr	r0, [pc, #540]	; (8006c14 <PCU_Tasks+0x2dc>)
 80069f8:	f7fe fcb2 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packOff;
 80069fc:	4b7e      	ldr	r3, [pc, #504]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a04:	e01e      	b.n	8006a44 <PCU_Tasks+0x10c>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006a0c:	d91a      	bls.n	8006a44 <PCU_Tasks+0x10c>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 8006a0e:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d004      	beq.n	8006a22 <PCU_Tasks+0xea>
 8006a18:	4b77      	ldr	r3, [pc, #476]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d110      	bne.n	8006a44 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8006a22:	4b7a      	ldr	r3, [pc, #488]	; (8006c0c <PCU_Tasks+0x2d4>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <PCU_Tasks+0x104>
 8006a2e:	497a      	ldr	r1, [pc, #488]	; (8006c18 <PCU_Tasks+0x2e0>)
 8006a30:	4878      	ldr	r0, [pc, #480]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006a32:	f00d f90b 	bl	8013c4c <siprintf>
 8006a36:	4877      	ldr	r0, [pc, #476]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006a38:	f7fe fc92 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packStandby;
 8006a3c:	4b6e      	ldr	r3, [pc, #440]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }

    //Check for expired last contact from module
    for (index =0;index < pack.moduleCount;index++){
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e0c5      	b.n	8006bd6 <PCU_Tasks+0x29e>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	4a73      	ldr	r2, [pc, #460]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a4e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	3308      	adds	r3, #8
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fa61 	bl	8009f24 <MCU_TicksSinceLastMessage>
 8006a62:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006a6a:	d95d      	bls.n	8006b28 <PCU_Tasks+0x1f0>
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a6b      	ldr	r2, [pc, #428]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a70:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d051      	beq.n	8006b28 <PCU_Tasks+0x1f0>
        if( module[index].faultCode.commsError == false){
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a88:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006a96:	789b      	ldrb	r3, [r3, #2]
 8006a98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8096 	bne.w	8006bd0 <PCU_Tasks+0x298>
          // Isolate Module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 8006aa4:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <PCU_Tasks+0x2d4>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d110      	bne.n	8006ad2 <PCU_Tasks+0x19a>
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4a5a      	ldr	r2, [pc, #360]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006ab4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	3308      	adds	r3, #8
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4956      	ldr	r1, [pc, #344]	; (8006c20 <PCU_Tasks+0x2e8>)
 8006ac6:	4853      	ldr	r0, [pc, #332]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006ac8:	f00d f8c0 	bl	8013c4c <siprintf>
 8006acc:	4851      	ldr	r0, [pc, #324]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006ace:	f7fe fc47 	bl	8005360 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8006ad2:	4b49      	ldr	r3, [pc, #292]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d10d      	bne.n	8006af8 <PCU_Tasks+0x1c0>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4a4f      	ldr	r2, [pc, #316]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006ae0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	3327      	adds	r3, #39	; 0x27
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d102      	bne.n	8006af8 <PCU_Tasks+0x1c0>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 8006af2:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	4a48      	ldr	r2, [pc, #288]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006afc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	3328      	adds	r3, #40	; 0x28
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4a43      	ldr	r2, [pc, #268]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b10:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006b1e:	7893      	ldrb	r3, [r2, #2]
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 8006b26:	e053      	b.n	8006bd0 <PCU_Tasks+0x298>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b2e:	d933      	bls.n	8006b98 <PCU_Tasks+0x260>
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b34:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	f083 0301 	eor.w	r3, r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d024      	beq.n	8006b98 <PCU_Tasks+0x260>
        // Send State
        MCU_RequestModuleStatus(module[index].moduleId);
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4a32      	ldr	r2, [pc, #200]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b52:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 f8f3 	bl	8008d4c <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b6a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d028      	beq.n	8006bd0 <PCU_Tasks+0x298>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b82:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fd81 	bl	8008698 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 8006b96:	e01b      	b.n	8006bd0 <PCU_Tasks+0x298>
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b9c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006baa:	789b      	ldrb	r3, [r3, #2]
 8006bac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10c      	bne.n	8006bd0 <PCU_Tasks+0x298>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006bba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006bc8:	7893      	ldrb	r3, [r2, #2]
 8006bca:	f36f 0300 	bfc	r3, #0, #1
 8006bce:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	73fb      	strb	r3, [r7, #15]
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006bd8:	7d1b      	ldrb	r3, [r3, #20]
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	f4ff af34 	bcc.w	8006a4a <PCU_Tasks+0x112>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006be4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	f040 80e4 	bne.w	8006db6 <PCU_Tasks+0x47e>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e0c7      	b.n	8006d84 <PCU_Tasks+0x44c>
 8006bf4:	20000d28 	.word	0x20000d28
 8006bf8:	2000a664 	.word	0x2000a664
 8006bfc:	20000d20 	.word	0x20000d20
 8006c00:	200005d8 	.word	0x200005d8
 8006c04:	20000d1e 	.word	0x20000d1e
 8006c08:	20000d1c 	.word	0x20000d1c
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	0801731c 	.word	0x0801731c
 8006c14:	20000b64 	.word	0x20000b64
 8006c18:	08017340 	.word	0x08017340
 8006c1c:	20000de4 	.word	0x20000de4
 8006c20:	08017364 	.word	0x08017364
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	4ab3      	ldr	r2, [pc, #716]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006c36:	789b      	ldrb	r3, [r3, #2]
 8006c38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d123      	bne.n	8006c8a <PCU_Tasks+0x352>
        if (module[index].currentState != moduleOff){
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	4aab      	ldr	r2, [pc, #684]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c46:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3327      	adds	r3, #39	; 0x27
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8092 	beq.w	8006d7e <PCU_Tasks+0x446>
          // Turn off the module
          module[index].nextState = moduleOff;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	4aa5      	ldr	r2, [pc, #660]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c5e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	3328      	adds	r3, #40	; 0x28
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	4aa0      	ldr	r2, [pc, #640]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c72:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006c80:	7893      	ldrb	r3, [r2, #2]
 8006c82:	f36f 0382 	bfc	r3, #2, #1
 8006c86:	7093      	strb	r3, [r2, #2]
 8006c88:	e079      	b.n	8006d7e <PCU_Tasks+0x446>
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	4a99      	ldr	r2, [pc, #612]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c8e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006c9c:	789b      	ldrb	r3, [r3, #2]
 8006c9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d16a      	bne.n	8006d7e <PCU_Tasks+0x446>
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4a92      	ldr	r2, [pc, #584]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d15b      	bne.n	8006d7e <PCU_Tasks+0x446>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	4a8a      	ldr	r2, [pc, #552]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	332a      	adds	r3, #42	; 0x2a
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d13a      	bne.n	8006d52 <PCU_Tasks+0x41a>
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	4a85      	ldr	r2, [pc, #532]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006ce0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	4413      	add	r3, r2
 8006cea:	3329      	adds	r3, #41	; 0x29
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	4980      	ldr	r1, [pc, #512]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cf2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006cf6:	fb00 f303 	mul.w	r3, r0, r3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3328      	adds	r3, #40	; 0x28
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d126      	bne.n	8006d52 <PCU_Tasks+0x41a>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	4a7b      	ldr	r2, [pc, #492]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d08:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	3308      	adds	r3, #8
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f003 f97c 	bl	800a014 <MCU_TicksSinceLastStateTx>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d22:	d92c      	bls.n	8006d7e <PCU_Tasks+0x446>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	4a73      	ldr	r2, [pc, #460]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	3308      	adds	r3, #8
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	496e      	ldr	r1, [pc, #440]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d3a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006d3e:	fb00 f303 	mul.w	r3, r0, r3
 8006d42:	440b      	add	r3, r1
 8006d44:	3328      	adds	r3, #40	; 0x28
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f002 fecc 	bl	8009ae8 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8006d50:	e015      	b.n	8006d7e <PCU_Tasks+0x446>
          }
        }else {
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	4a67      	ldr	r2, [pc, #412]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d56:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3308      	adds	r3, #8
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	4963      	ldr	r1, [pc, #396]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d68:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006d6c:	fb00 f303 	mul.w	r3, r0, r3
 8006d70:	440b      	add	r3, r1
 8006d72:	3328      	adds	r3, #40	; 0x28
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f002 feb5 	bl	8009ae8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3301      	adds	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	4b5c      	ldr	r3, [pc, #368]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	f4ff af4a 	bcc.w	8006c24 <PCU_Tasks+0x2ec>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8006d90:	4b5a      	ldr	r3, [pc, #360]	; (8006efc <PCU_Tasks+0x5c4>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 82c2 	beq.w	800731e <PCU_Tasks+0x9e6>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8006d9a:	f005 f9f7 	bl	800c18c <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8006d9e:	f005 fb0f 	bl	800c3c0 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8006da2:	f005 fb99 	bl	800c4d8 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8006da6:	f005 fc2b 	bl	800c600 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8006daa:	f005 fcbd 	bl	800c728 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8006dae:	4b53      	ldr	r3, [pc, #332]	; (8006efc <PCU_Tasks+0x5c4>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8006db4:	e2b3      	b.n	800731e <PCU_Tasks+0x9e6>
  } else if(pack.controlMode == packMode){
 8006db6:	4b50      	ldr	r3, [pc, #320]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006db8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 82ae 	bne.w	800731e <PCU_Tasks+0x9e6>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8006dc2:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d005      	beq.n	8006dd8 <PCU_Tasks+0x4a0>
 8006dcc:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	f040 813c 	bne.w	8007050 <PCU_Tasks+0x718>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8006dd8:	4b47      	ldr	r3, [pc, #284]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dda:	7e9b      	ldrb	r3, [r3, #26]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 80a1 	bne.w	8006f24 <PCU_Tasks+0x5ec>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 030a 	and.w	r3, r3, #10
 8006dea:	2b0a      	cmp	r3, #10
 8006dec:	d115      	bne.n	8006e1a <PCU_Tasks+0x4e2>
 8006dee:	4b42      	ldr	r3, [pc, #264]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006df0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006df4:	4a43      	ldr	r2, [pc, #268]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006df6:	fba2 1203 	umull	r1, r2, r2, r3
 8006dfa:	0b12      	lsrs	r2, r2, #12
 8006dfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e00:	fb01 f202 	mul.w	r2, r1, r2
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <PCU_Tasks+0x4e2>
 8006e0c:	493e      	ldr	r1, [pc, #248]	; (8006f08 <PCU_Tasks+0x5d0>)
 8006e0e:	483f      	ldr	r0, [pc, #252]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e10:	f00c ff1c 	bl	8013c4c <siprintf>
 8006e14:	483d      	ldr	r0, [pc, #244]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e16:	f7fe faa3 	bl	8005360 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8006e1a:	f002 f82f 	bl	8008e7c <MCU_FindMaxVoltageModule>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d12f      	bne.n	8006e88 <PCU_Tasks+0x550>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d115      	bne.n	8006e60 <PCU_Tasks+0x528>
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e36:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e3a:	4a32      	ldr	r2, [pc, #200]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006e3c:	fba2 1203 	umull	r1, r2, r2, r3
 8006e40:	0b12      	lsrs	r2, r2, #12
 8006e42:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e46:	fb01 f202 	mul.w	r2, r1, r2
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <PCU_Tasks+0x528>
 8006e52:	492f      	ldr	r1, [pc, #188]	; (8006f10 <PCU_Tasks+0x5d8>)
 8006e54:	482d      	ldr	r0, [pc, #180]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e56:	f00c fef9 	bl	8013c4c <siprintf>
 8006e5a:	482c      	ldr	r0, [pc, #176]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e5c:	f7fe fa80 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e62:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e66:	3301      	adds	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006e70:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e76:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d952      	bls.n	8006f24 <PCU_Tasks+0x5ec>
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006e86:	e04d      	b.n	8006f24 <PCU_Tasks+0x5ec>
        }else if (moduleId == pack.moduleCount +1 ){
 8006e88:	79fa      	ldrb	r2, [r7, #7]
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e8c:	7d1b      	ldrb	r3, [r3, #20]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d141      	bne.n	8006f18 <PCU_Tasks+0x5e0>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8006e94:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d115      	bne.n	8006ecc <PCU_Tasks+0x594>
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ea2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006ea8:	fba2 1203 	umull	r1, r2, r2, r3
 8006eac:	0b12      	lsrs	r2, r2, #12
 8006eae:	f241 3188 	movw	r1, #5000	; 0x1388
 8006eb2:	fb01 f202 	mul.w	r2, r1, r2
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <PCU_Tasks+0x594>
 8006ebe:	4915      	ldr	r1, [pc, #84]	; (8006f14 <PCU_Tasks+0x5dc>)
 8006ec0:	4812      	ldr	r0, [pc, #72]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006ec2:	f00c fec3 	bl	8013c4c <siprintf>
 8006ec6:	4811      	ldr	r0, [pc, #68]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006ec8:	f7fe fa4a 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ece:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ed8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ede:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ee2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d91c      	bls.n	8006f24 <PCU_Tasks+0x5ec>
 8006eea:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006ef2:	e017      	b.n	8006f24 <PCU_Tasks+0x5ec>
 8006ef4:	20000de4 	.word	0x20000de4
 8006ef8:	2000a664 	.word	0x2000a664
 8006efc:	20000d25 	.word	0x20000d25
 8006f00:	2000000c 	.word	0x2000000c
 8006f04:	d1b71759 	.word	0xd1b71759
 8006f08:	08017388 	.word	0x08017388
 8006f0c:	20000b64 	.word	0x20000b64
 8006f10:	080173bc 	.word	0x080173bc
 8006f14:	080173e0 	.word	0x080173e0
          pack.powerStatus.firstModuleId = moduleId;
 8006f18:	4ab6      	ldr	r2, [pc, #728]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8006f1e:	4bb5      	ldr	r3, [pc, #724]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8006f24:	4bb3      	ldr	r3, [pc, #716]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f26:	7e9b      	ldrb	r3, [r3, #26]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	f040 8091 	bne.w	8007050 <PCU_Tasks+0x718>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8006f2e:	4bb1      	ldr	r3, [pc, #708]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f30:	7e5b      	ldrb	r3, [r3, #25]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 ffc2 	bl	8009ebc <MCU_ModuleIndexFromId>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 8006f3c:	4bad      	ldr	r3, [pc, #692]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f3e:	7d1b      	ldrb	r3, [r3, #20]
 8006f40:	7bba      	ldrb	r2, [r7, #14]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d077      	beq.n	8007036 <PCU_Tasks+0x6fe>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	4aab      	ldr	r2, [pc, #684]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006f4a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f58:	789b      	ldrb	r3, [r3, #2]
 8006f5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d00e      	beq.n	8006f82 <PCU_Tasks+0x64a>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	4aa4      	ldr	r2, [pc, #656]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006f68:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f76:	789b      	ldrb	r3, [r3, #2]
 8006f78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d113      	bne.n	8006faa <PCU_Tasks+0x672>
             pack.powerStatus.powerStage = stageSelectModule;
 8006f82:	4b9c      	ldr	r3, [pc, #624]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8006f88:	4b9c      	ldr	r3, [pc, #624]	; (80071fc <PCU_Tasks+0x8c4>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d15d      	bne.n	8007050 <PCU_Tasks+0x718>
 8006f94:	4b97      	ldr	r3, [pc, #604]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f96:	7e5b      	ldrb	r3, [r3, #25]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4999      	ldr	r1, [pc, #612]	; (8007200 <PCU_Tasks+0x8c8>)
 8006f9c:	4899      	ldr	r0, [pc, #612]	; (8007204 <PCU_Tasks+0x8cc>)
 8006f9e:	f00c fe55 	bl	8013c4c <siprintf>
 8006fa2:	4898      	ldr	r0, [pc, #608]	; (8007204 <PCU_Tasks+0x8cc>)
 8006fa4:	f7fe f9dc 	bl	8005360 <serialOut>
 8006fa8:	e052      	b.n	8007050 <PCU_Tasks+0x718>
          } else if (pack.vcuRequestedState == packOn){
 8006faa:	4b92      	ldr	r3, [pc, #584]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d11d      	bne.n	8006ff0 <PCU_Tasks+0x6b8>
            if (module[firstModuleIndex].currentState == moduleOn){
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	4a90      	ldr	r2, [pc, #576]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006fb8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3327      	adds	r3, #39	; 0x27
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <PCU_Tasks+0x6a2>
              pack.state = packOn;
 8006fca:	4b8a      	ldr	r3, [pc, #552]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8006fd2:	4b88      	ldr	r3, [pc, #544]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	769a      	strb	r2, [r3, #26]
 8006fd8:	e03a      	b.n	8007050 <PCU_Tasks+0x718>
                module[firstModuleIndex].nextState = moduleOn;
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4a86      	ldr	r2, [pc, #536]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006fde:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3328      	adds	r3, #40	; 0x28
 8006fea:	2203      	movs	r2, #3
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e02f      	b.n	8007050 <PCU_Tasks+0x718>
          } else if (pack.vcuRequestedState == packPrecharge){
 8006ff0:	4b80      	ldr	r3, [pc, #512]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d12a      	bne.n	8007050 <PCU_Tasks+0x718>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	4a7e      	ldr	r2, [pc, #504]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006ffe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3327      	adds	r3, #39	; 0x27
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d107      	bne.n	8007020 <PCU_Tasks+0x6e8>
              pack.state = packPrecharge;
 8007010:	4b78      	ldr	r3, [pc, #480]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007018:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <PCU_Tasks+0x8bc>)
 800701a:	2202      	movs	r2, #2
 800701c:	769a      	strb	r2, [r3, #26]
 800701e:	e017      	b.n	8007050 <PCU_Tasks+0x718>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	4a75      	ldr	r2, [pc, #468]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007024:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	3328      	adds	r3, #40	; 0x28
 8007030:	2202      	movs	r2, #2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e00c      	b.n	8007050 <PCU_Tasks+0x718>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007036:	4b71      	ldr	r3, [pc, #452]	; (80071fc <PCU_Tasks+0x8c4>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d106      	bne.n	8007050 <PCU_Tasks+0x718>
 8007042:	4971      	ldr	r1, [pc, #452]	; (8007208 <PCU_Tasks+0x8d0>)
 8007044:	486f      	ldr	r0, [pc, #444]	; (8007204 <PCU_Tasks+0x8cc>)
 8007046:	f00c fe01 	bl	8013c4c <siprintf>
 800704a:	486e      	ldr	r0, [pc, #440]	; (8007204 <PCU_Tasks+0x8cc>)
 800704c:	f7fe f988 	bl	8005360 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
 8007054:	e13a      	b.n	80072cc <PCU_Tasks+0x994>
      if(module[index].faultCode.overCurrent == true){
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	4a67      	ldr	r2, [pc, #412]	; (80071f8 <PCU_Tasks+0x8c0>)
 800705a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	4413      	add	r3, r2
 8007064:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007068:	789b      	ldrb	r3, [r3, #2]
 800706a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d127      	bne.n	80070c4 <PCU_Tasks+0x78c>
        if (pack.vcuRequestedState != packOff){
 8007074:	4b5f      	ldr	r3, [pc, #380]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <PCU_Tasks+0x75c>
          module[index].nextState = moduleStandby;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	4a5d      	ldr	r2, [pc, #372]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007082:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3328      	adds	r3, #40	; 0x28
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e0bc      	b.n	800720e <PCU_Tasks+0x8d6>
          module[index].nextState = moduleOff;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	4a58      	ldr	r2, [pc, #352]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007098:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	3328      	adds	r3, #40	; 0x28
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	4a53      	ldr	r2, [pc, #332]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070ac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80070ba:	7893      	ldrb	r3, [r2, #2]
 80070bc:	f36f 0382 	bfc	r3, #2, #1
 80070c0:	7093      	strb	r3, [r2, #2]
 80070c2:	e0a4      	b.n	800720e <PCU_Tasks+0x8d6>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4a4c      	ldr	r2, [pc, #304]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070c8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80070d6:	789b      	ldrb	r3, [r3, #2]
 80070d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 8086 	bne.w	80071f0 <PCU_Tasks+0x8b8>
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4a44      	ldr	r2, [pc, #272]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070e8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80070f6:	789b      	ldrb	r3, [r3, #2]
 80070f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d176      	bne.n	80071f0 <PCU_Tasks+0x8b8>
        switch (pack.vcuRequestedState){
 8007102:	4b3c      	ldr	r3, [pc, #240]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007108:	2b03      	cmp	r3, #3
 800710a:	d87f      	bhi.n	800720c <PCU_Tasks+0x8d4>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <PCU_Tasks+0x7dc>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	080071cb 	.word	0x080071cb
 8007118:	080071a5 	.word	0x080071a5
 800711c:	08007175 	.word	0x08007175
 8007120:	08007125 	.word	0x08007125
            if(pack.state == packOn){
 8007124:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800712a:	2b03      	cmp	r3, #3
 800712c:	d109      	bne.n	8007142 <PCU_Tasks+0x80a>
              module[index].nextState = moduleOn;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007132:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3328      	adds	r3, #40	; 0x28
 800713e:	2203      	movs	r2, #3
 8007140:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8007142:	4b2c      	ldr	r3, [pc, #176]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007148:	2b09      	cmp	r3, #9
 800714a:	d804      	bhi.n	8007156 <PCU_Tasks+0x81e>
 800714c:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <PCU_Tasks+0x8bc>)
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007154:	e05b      	b.n	800720e <PCU_Tasks+0x8d6>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8007156:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715c:	2bbe      	cmp	r3, #190	; 0xbe
 800715e:	d904      	bls.n	800716a <PCU_Tasks+0x832>
 8007160:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007162:	2203      	movs	r2, #3
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007168:	e051      	b.n	800720e <PCU_Tasks+0x8d6>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 800716a:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <PCU_Tasks+0x8bc>)
 800716c:	2202      	movs	r2, #2
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007172:	e04c      	b.n	800720e <PCU_Tasks+0x8d6>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8007174:	4b1f      	ldr	r3, [pc, #124]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10d      	bne.n	800719a <PCU_Tasks+0x862>
 800717e:	7bfa      	ldrb	r2, [r7, #15]
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	429a      	cmp	r2, r3
 8007184:	d009      	beq.n	800719a <PCU_Tasks+0x862>
              module[index].nextState = moduleStandby;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <PCU_Tasks+0x8c0>)
 800718a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	4413      	add	r3, r2
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <PCU_Tasks+0x8bc>)
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071a2:	e034      	b.n	800720e <PCU_Tasks+0x8d6>
            module[index].nextState = moduleStandby;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <PCU_Tasks+0x8c0>)
 80071a8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	3328      	adds	r3, #40	; 0x28
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071c8:	e021      	b.n	800720e <PCU_Tasks+0x8d6>
            module[index].nextState = moduleOff;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	4a0a      	ldr	r2, [pc, #40]	; (80071f8 <PCU_Tasks+0x8c0>)
 80071ce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	4413      	add	r3, r2
 80071d8:	3328      	adds	r3, #40	; 0x28
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071ee:	e00e      	b.n	800720e <PCU_Tasks+0x8d6>
      }
 80071f0:	bf00      	nop
 80071f2:	e00c      	b.n	800720e <PCU_Tasks+0x8d6>
 80071f4:	2000a664 	.word	0x2000a664
 80071f8:	20000de4 	.word	0x20000de4
 80071fc:	2000000c 	.word	0x2000000c
 8007200:	08017404 	.word	0x08017404
 8007204:	20000b64 	.word	0x20000b64
 8007208:	08017444 	.word	0x08017444
            break;
 800720c:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	4a45      	ldr	r2, [pc, #276]	; (8007328 <PCU_Tasks+0x9f0>)
 8007212:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	4413      	add	r3, r2
 800721c:	332a      	adds	r3, #42	; 0x2a
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d13a      	bne.n	800729a <PCU_Tasks+0x962>
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4a40      	ldr	r2, [pc, #256]	; (8007328 <PCU_Tasks+0x9f0>)
 8007228:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800722c:	fb01 f303 	mul.w	r3, r1, r3
 8007230:	4413      	add	r3, r2
 8007232:	3329      	adds	r3, #41	; 0x29
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	493b      	ldr	r1, [pc, #236]	; (8007328 <PCU_Tasks+0x9f0>)
 800723a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800723e:	fb00 f303 	mul.w	r3, r0, r3
 8007242:	440b      	add	r3, r1
 8007244:	3328      	adds	r3, #40	; 0x28
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d126      	bne.n	800729a <PCU_Tasks+0x962>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	4a36      	ldr	r2, [pc, #216]	; (8007328 <PCU_Tasks+0x9f0>)
 8007250:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	3308      	adds	r3, #8
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f002 fed8 	bl	800a014 <MCU_TicksSinceLastStateTx>
 8007264:	4603      	mov	r3, r0
 8007266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726a:	d92c      	bls.n	80072c6 <PCU_Tasks+0x98e>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <PCU_Tasks+0x9f0>)
 8007270:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	3308      	adds	r3, #8
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	4929      	ldr	r1, [pc, #164]	; (8007328 <PCU_Tasks+0x9f0>)
 8007282:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007286:	fb00 f303 	mul.w	r3, r0, r3
 800728a:	440b      	add	r3, r1
 800728c:	3328      	adds	r3, #40	; 0x28
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f002 fc28 	bl	8009ae8 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007298:	e015      	b.n	80072c6 <PCU_Tasks+0x98e>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	4a22      	ldr	r2, [pc, #136]	; (8007328 <PCU_Tasks+0x9f0>)
 800729e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	3308      	adds	r3, #8
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	491e      	ldr	r1, [pc, #120]	; (8007328 <PCU_Tasks+0x9f0>)
 80072b0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80072b4:	fb00 f303 	mul.w	r3, r0, r3
 80072b8:	440b      	add	r3, r1
 80072ba:	3328      	adds	r3, #40	; 0x28
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f002 fc11 	bl	8009ae8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	3301      	adds	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <PCU_Tasks+0x9f4>)
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f4ff aebf 	bcc.w	8007056 <PCU_Tasks+0x71e>
    MCU_UpdateStats();
 80072d8:	f000 f8de 	bl	8007498 <MCU_UpdateStats>
    if(sendState > 0){
 80072dc:	4b14      	ldr	r3, [pc, #80]	; (8007330 <PCU_Tasks+0x9f8>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01c      	beq.n	800731e <PCU_Tasks+0x9e6>
      if (pack.rtcValid == false) VCU_RequestTime();
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <PCU_Tasks+0x9f4>)
 80072e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072ea:	f083 0301 	eor.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <PCU_Tasks+0x9c0>
 80072f4:	f005 faac 	bl	800c850 <VCU_RequestTime>
      VCU_TransmitBmsState();
 80072f8:	f004 f8aa 	bl	800b450 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 80072fc:	f004 f990 	bl	800b620 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007300:	f004 fa72 	bl	800b7e8 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007304:	f004 fbb4 	bl	800ba70 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 8007308:	f004 fcde 	bl	800bcc8 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 800730c:	f004 fdfc 	bl	800bf08 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007310:	f004 fe68 	bl	800bfe4 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007314:	f004 fed4 	bl	800c0c0 <VCU_TransmitBmsData10>
      sendState=0;
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <PCU_Tasks+0x9f8>)
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000de4 	.word	0x20000de4
 800732c:	2000a664 	.word	0x2000a664
 8007330:	20000d25 	.word	0x20000d25

08007334 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	4618      	mov	r0, r3
 8007342:	f7f9 fe55 	bl	8000ff0 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	4618      	mov	r0, r3
 800734a:	f7fb f9b4 	bl	80026b6 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	21ff      	movs	r1, #255	; 0xff
 8007352:	4618      	mov	r0, r3
 8007354:	f7fb f9e3 	bl	800271e <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8007358:	484a      	ldr	r0, [pc, #296]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 800735a:	f7fa fbc5 	bl	8001ae8 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 800735e:	4a49      	ldr	r2, [pc, #292]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 8007360:	7813      	ldrb	r3, [r2, #0]
 8007362:	f043 0320 	orr.w	r3, r3, #32
 8007366:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8007368:	4a46      	ldr	r2, [pc, #280]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 800736a:	7853      	ldrb	r3, [r2, #1]
 800736c:	f36f 1386 	bfc	r3, #6, #1
 8007370:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	4943      	ldr	r1, [pc, #268]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 8007376:	4618      	mov	r0, r3
 8007378:	f7fa fb28 	bl	80019cc <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 800737c:	4842      	ldr	r0, [pc, #264]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 800737e:	f7fa fcc3 	bl	8001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8007382:	4a41      	ldr	r2, [pc, #260]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 8007384:	7853      	ldrb	r3, [r2, #1]
 8007386:	2107      	movs	r1, #7
 8007388:	f361 0304 	bfi	r3, r1, #0, #5
 800738c:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 800738e:	4a3e      	ldr	r2, [pc, #248]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 8007390:	7853      	ldrb	r3, [r2, #1]
 8007392:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8007396:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8007398:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 800739a:	7813      	ldrb	r3, [r2, #0]
 800739c:	2101      	movs	r1, #1
 800739e:	f361 0345 	bfi	r3, r1, #1, #5
 80073a2:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	4a38      	ldr	r2, [pc, #224]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fa fc54 	bl	8001c58 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80073b0:	4836      	ldr	r0, [pc, #216]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073b2:	f7fa ff01 	bl	80021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 80073b6:	4a35      	ldr	r2, [pc, #212]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073b8:	7813      	ldrb	r3, [r2, #0]
 80073ba:	210f      	movs	r1, #15
 80073bc:	f361 0345 	bfi	r3, r1, #1, #5
 80073c0:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80073c2:	4a32      	ldr	r2, [pc, #200]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073c4:	8813      	ldrh	r3, [r2, #0]
 80073c6:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80073ca:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fa fea4 	bl	8002120 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 80073de:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073e0:	8813      	ldrh	r3, [r2, #0]
 80073e2:	f36f 030a 	bfc	r3, #0, #11
 80073e6:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 80073e8:	4a29      	ldr	r2, [pc, #164]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073ea:	78d3      	ldrb	r3, [r2, #3]
 80073ec:	f36f 1386 	bfc	r3, #6, #1
 80073f0:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 80073f2:	4a27      	ldr	r2, [pc, #156]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	f36f 23dc 	bfc	r3, #11, #18
 80073fa:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	4a24      	ldr	r2, [pc, #144]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa fe0e 	bl	8002024 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8007408:	4b22      	ldr	r3, [pc, #136]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007410:	8813      	ldrh	r3, [r2, #0]
 8007412:	f36f 030a 	bfc	r3, #0, #11
 8007416:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8007418:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 800741a:	78d3      	ldrb	r3, [r2, #3]
 800741c:	f36f 1386 	bfc	r3, #6, #1
 8007420:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8007422:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	f36f 23dc 	bfc	r3, #11, #18
 800742a:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	4a19      	ldr	r2, [pc, #100]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f7fa fe18 	bl	8002068 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8007438:	79f8      	ldrb	r0, [r7, #7]
 800743a:	2301      	movs	r3, #1
 800743c:	2201      	movs	r2, #1
 800743e:	2100      	movs	r1, #0
 8007440:	f7fa fe36 	bl	80020b0 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8007444:	79f8      	ldrb	r0, [r7, #7]
 8007446:	2300      	movs	r3, #0
 8007448:	2202      	movs	r2, #2
 800744a:	2101      	movs	r1, #1
 800744c:	f7fb f9a7 	bl	800279e <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f7fc f8c0 	bl	80035dc <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	2201      	movs	r2, #1
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f7fb f8a7 	bl	80025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	2103      	movs	r1, #3
 800746c:	4618      	mov	r0, r3
 800746e:	f7fa fff6 	bl	800245e <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f7fa fbb2 	bl	8001be0 <DRV_CANFDSPI_OperationModeSelect>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000d2c 	.word	0x20000d2c
 8007488:	20000d30 	.word	0x20000d30
 800748c:	20000d84 	.word	0x20000d84
 8007490:	20000d88 	.word	0x20000d88
 8007494:	20000d8c 	.word	0x20000d8c

08007498 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8007498:	b5b0      	push	{r4, r5, r7, lr}
 800749a:	b094      	sub	sp, #80	; 0x50
 800749c:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint32_t voltage             = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	643b      	str	r3, [r7, #64]	; 0x40
  float moduleCurrent          = 0;
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float moduleMaxChargeA       = 0;
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 80074c0:	23ff      	movs	r3, #255	; 0xff
 80074c2:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t lowestSoh           = 255;
 80074c4:	23ff      	movs	r3, #255	; 0xff
 80074c6:	873b      	strh	r3, [r7, #56]	; 0x38
  uint32_t totalAvgCellVolt    = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t highestCellVolt     = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t lowestCellVolt      = 65535;
 80074d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074d4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t totalAvgCellTemp    = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t highestCellTemp     = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t lowestCellTemp      = 65535;
 80074de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074e2:	853b      	strh	r3, [r7, #40]	; 0x28
  float    maxChargeA          = 0;
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
  float    maxDischargeA       = 0;
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007514:	e275      	b.n	8007a02 <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 8007516:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800751a:	4a85      	ldr	r2, [pc, #532]	; (8007730 <MCU_UpdateStats+0x298>)
 800751c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 8260 	bne.w	80079f8 <MCU_UpdateStats+0x560>
 8007538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800753c:	4a7c      	ldr	r2, [pc, #496]	; (8007730 <MCU_UpdateStats+0x298>)
 800753e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	4413      	add	r3, r2
 8007548:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 824f 	bne.w	80079f8 <MCU_UpdateStats+0x560>
 800755a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800755e:	4a74      	ldr	r2, [pc, #464]	; (8007730 <MCU_UpdateStats+0x298>)
 8007560:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	4413      	add	r3, r2
 800756a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800756e:	789b      	ldrb	r3, [r3, #2]
 8007570:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 823e 	bne.w	80079f8 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 800757c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007580:	4a6b      	ldr	r2, [pc, #428]	; (8007730 <MCU_UpdateStats+0x298>)
 8007582:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	3327      	adds	r3, #39	; 0x27
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b03      	cmp	r3, #3
 8007592:	f040 8146 	bne.w	8007822 <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 8007596:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800759a:	4a65      	ldr	r2, [pc, #404]	; (8007730 <MCU_UpdateStats+0x298>)
 800759c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	330e      	adds	r3, #14
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7f8 ff9c 	bl	80004e8 <__aeabi_i2d>
 80075b0:	a359      	add	r3, pc, #356	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f9 f801 	bl	80005bc <__aeabi_dmul>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	a357      	add	r3, pc, #348	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f8 fe40 	bl	800024c <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4610      	mov	r0, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	f7f9 faea 	bl	8000bac <__aeabi_d2f>
 80075d8:	4603      	mov	r3, r0
 80075da:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 80075dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075e0:	4a53      	ldr	r2, [pc, #332]	; (8007730 <MCU_UpdateStats+0x298>)
 80075e2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	4413      	add	r3, r2
 80075ec:	3310      	adds	r3, #16
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7f8 ff79 	bl	80004e8 <__aeabi_i2d>
 80075f6:	a348      	add	r3, pc, #288	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 ffde 	bl	80005bc <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	a345      	add	r3, pc, #276	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fe1d 	bl	800024c <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f7f9 fac7 	bl	8000bac <__aeabi_d2f>
 800761e:	4603      	mov	r3, r0
 8007620:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 8007622:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007626:	4a42      	ldr	r2, [pc, #264]	; (8007730 <MCU_UpdateStats+0x298>)
 8007628:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	3314      	adds	r3, #20
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	4413      	add	r3, r2
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
        //increment module on count
        modulesOn++;
 800763e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007642:	3301      	adds	r3, #1
 8007644:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8007648:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800764c:	4a38      	ldr	r2, [pc, #224]	; (8007730 <MCU_UpdateStats+0x298>)
 800764e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	3316      	adds	r3, #22
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f8 ff43 	bl	80004e8 <__aeabi_i2d>
 8007662:	a32d      	add	r3, pc, #180	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 ffa8 	bl	80005bc <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
 8007674:	a32a      	add	r3, pc, #168	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fde7 	bl	800024c <__aeabi_dsub>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fa91 	bl	8000bac <__aeabi_d2f>
 800768a:	4603      	mov	r3, r0
 800768c:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 800768e:	6938      	ldr	r0, [r7, #16]
 8007690:	f7f8 ff3c 	bl	800050c <__aeabi_f2d>
 8007694:	a324      	add	r3, pc, #144	; (adr r3, 8007728 <MCU_UpdateStats+0x290>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 fdd7 	bl	800024c <__aeabi_dsub>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	461d      	mov	r5, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7f8 ff30 	bl	800050c <__aeabi_f2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4620      	mov	r0, r4
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7f9 fa12 	bl	8000adc <__aeabi_dcmpgt>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d040      	beq.n	8007740 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 80076be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <MCU_UpdateStats+0x298>)
 80076c4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80076d2:	7893      	ldrb	r3, [r2, #2]
 80076d4:	f043 0304 	orr.w	r3, r3, #4
 80076d8:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <MCU_UpdateStats+0x29c>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d16d      	bne.n	80077c2 <MCU_UpdateStats+0x32a>
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f7f8 ff10 	bl	800050c <__aeabi_f2d>
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7f8 ff0b 	bl	800050c <__aeabi_f2d>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9cd 2300 	strd	r2, r3, [sp]
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	490d      	ldr	r1, [pc, #52]	; (8007738 <MCU_UpdateStats+0x2a0>)
 8007704:	480d      	ldr	r0, [pc, #52]	; (800773c <MCU_UpdateStats+0x2a4>)
 8007706:	f00c faa1 	bl	8013c4c <siprintf>
 800770a:	480c      	ldr	r0, [pc, #48]	; (800773c <MCU_UpdateStats+0x2a4>)
 800770c:	f7fd fe28 	bl	8005360 <serialOut>
 8007710:	e057      	b.n	80077c2 <MCU_UpdateStats+0x32a>
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	47ae147b 	.word	0x47ae147b
 800771c:	3f947ae1 	.word	0x3f947ae1
 8007720:	47ae147b 	.word	0x47ae147b
 8007724:	40847ae1 	.word	0x40847ae1
 8007728:	33333333 	.word	0x33333333
 800772c:	3fd33333 	.word	0x3fd33333
 8007730:	20000de4 	.word	0x20000de4
 8007734:	2000000c 	.word	0x2000000c
 8007738:	08017468 	.word	0x08017468
 800773c:	20000b64 	.word	0x20000b64
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8007740:	6938      	ldr	r0, [r7, #16]
 8007742:	f7f8 fee3 	bl	800050c <__aeabi_f2d>
 8007746:	a3d7      	add	r3, pc, #860	; (adr r3, 8007aa4 <MCU_UpdateStats+0x60c>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f7f8 fd80 	bl	8000250 <__adddf3>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4614      	mov	r4, r2
 8007756:	461d      	mov	r5, r3
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f7f8 fed7 	bl	800050c <__aeabi_f2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f9 f99b 	bl	8000aa0 <__aeabi_dcmplt>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d028      	beq.n	80077c2 <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8007770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007774:	4ac4      	ldr	r2, [pc, #784]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007776:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	4413      	add	r3, r2
 8007780:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007784:	7893      	ldrb	r3, [r2, #2]
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 800778c:	4bbf      	ldr	r3, [pc, #764]	; (8007a8c <MCU_UpdateStats+0x5f4>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b03      	cmp	r3, #3
 8007796:	d114      	bne.n	80077c2 <MCU_UpdateStats+0x32a>
 8007798:	6938      	ldr	r0, [r7, #16]
 800779a:	f7f8 feb7 	bl	800050c <__aeabi_f2d>
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	68b8      	ldr	r0, [r7, #8]
 80077a4:	f7f8 feb2 	bl	800050c <__aeabi_f2d>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9cd 2300 	strd	r2, r3, [sp]
 80077b0:	4622      	mov	r2, r4
 80077b2:	462b      	mov	r3, r5
 80077b4:	49b6      	ldr	r1, [pc, #728]	; (8007a90 <MCU_UpdateStats+0x5f8>)
 80077b6:	48b7      	ldr	r0, [pc, #732]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 80077b8:	f00c fa48 	bl	8013c4c <siprintf>
 80077bc:	48b5      	ldr	r0, [pc, #724]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 80077be:	f7fd fdcf 	bl	8005360 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 80077c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077c6:	4ab0      	ldr	r2, [pc, #704]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80077c8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80077d6:	789b      	ldrb	r3, [r3, #2]
 80077d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d107      	bne.n	80077f2 <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 80077e2:	4bad      	ldr	r3, [pc, #692]	; (8007a98 <MCU_UpdateStats+0x600>)
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d102      	bne.n	80077f2 <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 80077ec:	4baa      	ldr	r3, [pc, #680]	; (8007a98 <MCU_UpdateStats+0x600>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 80077f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80077f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80077fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8007802:	ed97 7a08 	vldr	s14, [r7, #32]
 8007806:	edd7 7a02 	vldr	s15, [r7, #8]
 800780a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800780e:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 8007812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007816:	edd7 7a03 	vldr	s15, [r7, #12]
 800781a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 8007822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007826:	4a98      	ldr	r2, [pc, #608]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007828:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	3312      	adds	r3, #18
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 800783e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007842:	4a91      	ldr	r2, [pc, #580]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007844:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	4413      	add	r3, r2
 800784e:	3322      	adds	r3, #34	; 0x22
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	4413      	add	r3, r2
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 800785a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800785e:	4a8a      	ldr	r2, [pc, #552]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007860:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	4413      	add	r3, r2
 800786a:	331c      	adds	r3, #28
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	4413      	add	r3, r2
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8007876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800787a:	4a83      	ldr	r2, [pc, #524]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800787c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	332b      	adds	r3, #43	; 0x2b
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800788e:	429a      	cmp	r2, r3
 8007890:	d90a      	bls.n	80078a8 <MCU_UpdateStats+0x410>
 8007892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007896:	4a7c      	ldr	r2, [pc, #496]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007898:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	332b      	adds	r3, #43	; 0x2b
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 80078a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078ac:	4a76      	ldr	r2, [pc, #472]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078ae:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	332c      	adds	r3, #44	; 0x2c
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d90a      	bls.n	80078da <MCU_UpdateStats+0x442>
 80078c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078c8:	4a6f      	ldr	r2, [pc, #444]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078ca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	332c      	adds	r3, #44	; 0x2c
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	873b      	strh	r3, [r7, #56]	; 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 80078da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078de:	4a6a      	ldr	r2, [pc, #424]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	3320      	adds	r3, #32
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d915      	bls.n	8007920 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 80078f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078f8:	4a63      	ldr	r2, [pc, #396]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078fa:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	3320      	adds	r3, #32
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	863b      	strh	r3, [r7, #48]	; 0x30
        modLowestCellVolt = module[index].moduleId;
 800790a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800790e:	4a5e      	ldr	r2, [pc, #376]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007910:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	3308      	adds	r3, #8
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 8007920:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007924:	4a58      	ldr	r2, [pc, #352]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007926:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	331e      	adds	r3, #30
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007936:	429a      	cmp	r2, r3
 8007938:	d215      	bcs.n	8007966 <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 800793a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800793e:	4a52      	ldr	r2, [pc, #328]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007940:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	331e      	adds	r3, #30
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	867b      	strh	r3, [r7, #50]	; 0x32
        modHighestCellVolt = module[index].moduleId;
 8007950:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007954:	4a4c      	ldr	r2, [pc, #304]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007956:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3308      	adds	r3, #8
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 8007966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800796a:	4a47      	ldr	r2, [pc, #284]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800796c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	4413      	add	r3, r2
 8007976:	3318      	adds	r3, #24
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800797c:	429a      	cmp	r2, r3
 800797e:	d215      	bcs.n	80079ac <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8007980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007984:	4a40      	ldr	r2, [pc, #256]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007986:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3318      	adds	r3, #24
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	857b      	strh	r3, [r7, #42]	; 0x2a
        modHighestCellTemp = module[index].moduleId;
 8007996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800799a:	4a3b      	ldr	r2, [pc, #236]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800799c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	3308      	adds	r3, #8
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 80079ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079b0:	4a35      	ldr	r2, [pc, #212]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079b2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	331a      	adds	r3, #26
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d915      	bls.n	80079f2 <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 80079c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079ca:	4a2f      	ldr	r2, [pc, #188]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079cc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	331a      	adds	r3, #26
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	853b      	strh	r3, [r7, #40]	; 0x28
        modLowestCellTemp = module[index].moduleId;
 80079dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079e0:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079e2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	3308      	adds	r3, #8
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 80079f2:	7efb      	ldrb	r3, [r7, #27]
 80079f4:	3301      	adds	r3, #1
 80079f6:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 80079f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079fc:	3301      	adds	r3, #1
 80079fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a02:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a04:	7d1b      	ldrb	r3, [r3, #20]
 8007a06:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f4ff ad83 	bcc.w	8007516 <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 8007a10:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a12:	7efb      	ldrb	r3, [r7, #27]
 8007a14:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a18:	7d1a      	ldrb	r2, [r3, #20]
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a1c:	7ddb      	ldrb	r3, [r3, #23]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4b1d      	ldr	r3, [pc, #116]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a24:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 8007a26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8087 	beq.w	8007b3e <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 8007a30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a3e:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007a40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007a44:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007a9c <MCU_UpdateStats+0x604>
 8007a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a50:	dd32      	ble.n	8007ab8 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <MCU_UpdateStats+0x5f4>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d129      	bne.n	8007ab2 <MCU_UpdateStats+0x61a>
 8007a5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a60:	f7f8 fd54 	bl	800050c <__aeabi_f2d>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	a105      	add	r1, pc, #20	; (adr r1, 8007a80 <MCU_UpdateStats+0x5e8>)
 8007a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a72:	490b      	ldr	r1, [pc, #44]	; (8007aa0 <MCU_UpdateStats+0x608>)
 8007a74:	4807      	ldr	r0, [pc, #28]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 8007a76:	f00c f8e9 	bl	8013c4c <siprintf>
 8007a7a:	e017      	b.n	8007aac <MCU_UpdateStats+0x614>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	00000000 	.word	0x00000000
 8007a84:	409a3300 	.word	0x409a3300
 8007a88:	20000de4 	.word	0x20000de4
 8007a8c:	2000000c 	.word	0x2000000c
 8007a90:	080174b4 	.word	0x080174b4
 8007a94:	20000b64 	.word	0x20000b64
 8007a98:	2000a664 	.word	0x2000a664
 8007a9c:	44d19800 	.word	0x44d19800
 8007aa0:	08017504 	.word	0x08017504
 8007aa4:	33333333 	.word	0x33333333
 8007aa8:	3fd33333 	.word	0x3fd33333
 8007aac:	48b0      	ldr	r0, [pc, #704]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007aae:	f7fd fc57 	bl	8005360 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007ab2:	4bb0      	ldr	r3, [pc, #704]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab6:	e01e      	b.n	8007af6 <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8007ab8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007abc:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	d515      	bpl.n	8007af6 <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007aca:	4bac      	ldr	r3, [pc, #688]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d10d      	bne.n	8007af2 <MCU_UpdateStats+0x65a>
 8007ad6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ad8:	f7f8 fd18 	bl	800050c <__aeabi_f2d>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	49a7      	ldr	r1, [pc, #668]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007ae2:	9100      	str	r1, [sp, #0]
 8007ae4:	49a7      	ldr	r1, [pc, #668]	; (8007d84 <MCU_UpdateStats+0x8ec>)
 8007ae6:	48a2      	ldr	r0, [pc, #648]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007ae8:	f00c f8b0 	bl	8013c4c <siprintf>
 8007aec:	48a0      	ldr	r0, [pc, #640]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007aee:	f7fd fc37 	bl	8005360 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 8007af2:	4ba5      	ldr	r3, [pc, #660]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007af8:	f7f8 fd08 	bl	800050c <__aeabi_f2d>
 8007afc:	a398      	add	r3, pc, #608	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fe85 	bl	8000810 <__aeabi_ddiv>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	4b9e      	ldr	r3, [pc, #632]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007b14:	f7f8 fb9c 	bl	8000250 <__adddf3>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f7f9 f844 	bl	8000bac <__aeabi_d2f>
 8007b24:	4603      	mov	r3, r0
 8007b26:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b30:	ee17 3a90 	vmov	r3, s15
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	4b95      	ldr	r3, [pc, #596]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b3a:	611a      	str	r2, [r3, #16]
 8007b3c:	e00e      	b.n	8007b5c <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 8007b3e:	4b94      	ldr	r3, [pc, #592]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8007b44:	4b93      	ldr	r3, [pc, #588]	; (8007d94 <MCU_UpdateStats+0x8fc>)
 8007b46:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b50:	ee17 3a90 	vmov	r3, s15
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b5a:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007b60:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007d98 <MCU_UpdateStats+0x900>
 8007b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	dd19      	ble.n	8007ba2 <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007b6e:	4b83      	ldr	r3, [pc, #524]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d110      	bne.n	8007b9c <MCU_UpdateStats+0x704>
 8007b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b7c:	f7f8 fcc6 	bl	800050c <__aeabi_f2d>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	a178      	add	r1, pc, #480	; (adr r1, 8007d68 <MCU_UpdateStats+0x8d0>)
 8007b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8e:	4983      	ldr	r1, [pc, #524]	; (8007d9c <MCU_UpdateStats+0x904>)
 8007b90:	4877      	ldr	r0, [pc, #476]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007b92:	f00c f85b 	bl	8013c4c <siprintf>
 8007b96:	4876      	ldr	r0, [pc, #472]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007b98:	f7fd fbe2 	bl	8005360 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007b9c:	4b75      	ldr	r3, [pc, #468]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	e01e      	b.n	8007be0 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8007ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007ba6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb2:	d515      	bpl.n	8007be0 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007bb4:	4b71      	ldr	r3, [pc, #452]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d10d      	bne.n	8007bdc <MCU_UpdateStats+0x744>
 8007bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc2:	f7f8 fca3 	bl	800050c <__aeabi_f2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	496d      	ldr	r1, [pc, #436]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007bcc:	9100      	str	r1, [sp, #0]
 8007bce:	4974      	ldr	r1, [pc, #464]	; (8007da0 <MCU_UpdateStats+0x908>)
 8007bd0:	4867      	ldr	r0, [pc, #412]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007bd2:	f00c f83b 	bl	8013c4c <siprintf>
 8007bd6:	4866      	ldr	r0, [pc, #408]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007bd8:	f7fd fbc2 	bl	8005360 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8007bdc:	4b6a      	ldr	r3, [pc, #424]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be2:	f7f8 fc93 	bl	800050c <__aeabi_f2d>
 8007be6:	a35e      	add	r3, pc, #376	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fe10 	bl	8000810 <__aeabi_ddiv>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	4b63      	ldr	r3, [pc, #396]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007bfe:	f7f8 fb27 	bl	8000250 <__adddf3>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7f8 ffaf 	bl	8000b6c <__aeabi_d2uiz>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4a5f      	ldr	r2, [pc, #380]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007c12:	6353      	str	r3, [r2, #52]	; 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c18:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007d98 <MCU_UpdateStats+0x900>
 8007c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c24:	dd19      	ble.n	8007c5a <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007c26:	4b55      	ldr	r3, [pc, #340]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d110      	bne.n	8007c54 <MCU_UpdateStats+0x7bc>
 8007c32:	6a38      	ldr	r0, [r7, #32]
 8007c34:	f7f8 fc6a 	bl	800050c <__aeabi_f2d>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	a14a      	add	r1, pc, #296	; (adr r1, 8007d68 <MCU_UpdateStats+0x8d0>)
 8007c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c42:	e9cd 0100 	strd	r0, r1, [sp]
 8007c46:	4957      	ldr	r1, [pc, #348]	; (8007da4 <MCU_UpdateStats+0x90c>)
 8007c48:	4849      	ldr	r0, [pc, #292]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c4a:	f00b ffff 	bl	8013c4c <siprintf>
 8007c4e:	4848      	ldr	r0, [pc, #288]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c50:	f7fd fb86 	bl	8005360 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007c54:	4b47      	ldr	r3, [pc, #284]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007c56:	623b      	str	r3, [r7, #32]
 8007c58:	e01e      	b.n	8007c98 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8007c5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c5e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	d515      	bpl.n	8007c98 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007c6c:	4b43      	ldr	r3, [pc, #268]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d10d      	bne.n	8007c94 <MCU_UpdateStats+0x7fc>
 8007c78:	6a38      	ldr	r0, [r7, #32]
 8007c7a:	f7f8 fc47 	bl	800050c <__aeabi_f2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	493f      	ldr	r1, [pc, #252]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007c84:	9100      	str	r1, [sp, #0]
 8007c86:	4948      	ldr	r1, [pc, #288]	; (8007da8 <MCU_UpdateStats+0x910>)
 8007c88:	4839      	ldr	r0, [pc, #228]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c8a:	f00b ffdf 	bl	8013c4c <siprintf>
 8007c8e:	4838      	ldr	r0, [pc, #224]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c90:	f7fd fb66 	bl	8005360 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8007c94:	4b3c      	ldr	r3, [pc, #240]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007c96:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c9a:	f7f8 fc37 	bl	800050c <__aeabi_f2d>
 8007c9e:	a330      	add	r3, pc, #192	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fdb4 	bl	8000810 <__aeabi_ddiv>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	4b35      	ldr	r3, [pc, #212]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007cb6:	f7f8 facb 	bl	8000250 <__adddf3>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7f8 ff53 	bl	8000b6c <__aeabi_d2uiz>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4a31      	ldr	r2, [pc, #196]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007cca:	6353      	str	r3, [r2, #52]	; 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007ccc:	6a38      	ldr	r0, [r7, #32]
 8007cce:	f7f8 fc1d 	bl	800050c <__aeabi_f2d>
 8007cd2:	a323      	add	r3, pc, #140	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fd9a 	bl	8000810 <__aeabi_ddiv>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	4b28      	ldr	r3, [pc, #160]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007cea:	f7f8 fab1 	bl	8000250 <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f7f8 ff39 	bl	8000b6c <__aeabi_d2uiz>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4a24      	ldr	r2, [pc, #144]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007cfe:	6393      	str	r3, [r2, #56]	; 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8007d00:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d02:	7ddb      	ldrb	r3, [r3, #23]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <MCU_UpdateStats+0x884>
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d0a:	7ddb      	ldrb	r3, [r3, #23]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	4b1e      	ldr	r3, [pc, #120]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d18:	879a      	strh	r2, [r3, #60]	; 0x3c
 8007d1a:	e002      	b.n	8007d22 <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8007d1c:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	879a      	strh	r2, [r3, #60]	; 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8007d22:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d24:	7ddb      	ldrb	r3, [r3, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <MCU_UpdateStats+0x8a4>
 8007d2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8007d2e:	d805      	bhi.n	8007d3c <MCU_UpdateStats+0x8a4>
 8007d30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d3a:	e003      	b.n	8007d44 <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8007d3c:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8007d44:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d46:	7ddb      	ldrb	r3, [r3, #23]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02f      	beq.n	8007dac <MCU_UpdateStats+0x914>
 8007d4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8007d50:	d82c      	bhi.n	8007dac <MCU_UpdateStats+0x914>
 8007d52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d5c:	e02a      	b.n	8007db4 <MCU_UpdateStats+0x91c>
 8007d5e:	bf00      	nop
 8007d60:	9999999a 	.word	0x9999999a
 8007d64:	3fa99999 	.word	0x3fa99999
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	409a3300 	.word	0x409a3300
 8007d70:	20000b64 	.word	0x20000b64
 8007d74:	44d19800 	.word	0x44d19800
 8007d78:	c4c80000 	.word	0xc4c80000
 8007d7c:	2000000c 	.word	0x2000000c
 8007d80:	fffff9c0 	.word	0xfffff9c0
 8007d84:	08017548 	.word	0x08017548
 8007d88:	c4c80000 	.word	0xc4c80000
 8007d8c:	40df4000 	.word	0x40df4000
 8007d90:	2000a664 	.word	0x2000a664
 8007d94:	46fa0000 	.word	0x46fa0000
 8007d98:	44d19800 	.word	0x44d19800
 8007d9c:	0801758c 	.word	0x0801758c
 8007da0:	080175d4 	.word	0x080175d4
 8007da4:	0801761c 	.word	0x0801761c
 8007da8:	08017668 	.word	0x08017668
  else pack.soh = 0;
 8007dac:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8007db4:	4b2d      	ldr	r3, [pc, #180]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007db6:	7ddb      	ldrb	r3, [r3, #23]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <MCU_UpdateStats+0x938>
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dbe:	7ddb      	ldrb	r3, [r3, #23]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dcc:	861a      	strh	r2, [r3, #48]	; 0x30
 8007dce:	e002      	b.n	8007dd6 <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8007dd0:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	861a      	strh	r2, [r3, #48]	; 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8007dd6:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007dda:	8513      	strh	r3, [r2, #40]	; 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8007ddc:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dde:	7e7b      	ldrb	r3, [r7, #25]
 8007de0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
  if (lowestCellVolt < 65535){
 8007de4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8007dee:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007df0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007df2:	8593      	strh	r3, [r2, #44]	; 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8007df4:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007df6:	7ebb      	ldrb	r3, [r7, #26]
 8007df8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8007dfc:	e006      	b.n	8007e0c <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	859a      	strh	r2, [r3, #44]	; 0x2c
    pack.modCellLoVolt = 0;
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8007e0c:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e0e:	7ddb      	ldrb	r3, [r3, #23]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <MCU_UpdateStats+0x990>
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e16:	7ddb      	ldrb	r3, [r3, #23]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e24:	84da      	strh	r2, [r3, #38]	; 0x26
 8007e26:	e002      	b.n	8007e2e <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8007e28:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	84da      	strh	r2, [r3, #38]	; 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8007e2e:	4a0f      	ldr	r2, [pc, #60]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e32:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8007e3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e4a:	8453      	strh	r3, [r2, #34]	; 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8007e4c:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e4e:	7e3b      	ldrb	r3, [r7, #24]
 8007e50:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8007e54:	e006      	b.n	8007e64 <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	845a      	strh	r2, [r3, #34]	; 0x22
    pack.modCellLoTemp = 0;
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8007e64:	bf00      	nop
 8007e66:	3748      	adds	r7, #72	; 0x48
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6c:	2000a664 	.word	0x2000a664

08007e70 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b08b      	sub	sp, #44	; 0x2c
 8007e74:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007e76:	4a64      	ldr	r2, [pc, #400]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007e78:	2101      	movs	r1, #1
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	f7fa fb62 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007e80:	e0b6      	b.n	8007ff0 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4b61      	ldr	r3, [pc, #388]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007e88:	4a61      	ldr	r2, [pc, #388]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	f7fa f9bd 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007e92:	4b60      	ldr	r3, [pc, #384]	; (8008014 <MCU_ReceiveMessages+0x1a4>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 030a 	and.w	r3, r3, #10
 8007e9a:	2b0a      	cmp	r3, #10
 8007e9c:	d133      	bne.n	8007f06 <MCU_ReceiveMessages+0x96>
 8007e9e:	4b5c      	ldr	r3, [pc, #368]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	469c      	mov	ip, r3
 8007eaa:	4b59      	ldr	r3, [pc, #356]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007eb2:	469e      	mov	lr, r3
 8007eb4:	4b55      	ldr	r3, [pc, #340]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b54      	ldr	r3, [pc, #336]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4b52      	ldr	r3, [pc, #328]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ec2:	789b      	ldrb	r3, [r3, #2]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4b51      	ldr	r3, [pc, #324]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ec8:	78db      	ldrb	r3, [r3, #3]
 8007eca:	461c      	mov	r4, r3
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ece:	791b      	ldrb	r3, [r3, #4]
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	4b4e      	ldr	r3, [pc, #312]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ed4:	795b      	ldrb	r3, [r3, #5]
 8007ed6:	461e      	mov	r6, r3
 8007ed8:	4b4c      	ldr	r3, [pc, #304]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007eda:	799b      	ldrb	r3, [r3, #6]
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	4b4b      	ldr	r3, [pc, #300]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ee0:	79db      	ldrb	r3, [r3, #7]
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	9306      	str	r3, [sp, #24]
 8007ee8:	9605      	str	r6, [sp, #20]
 8007eea:	9504      	str	r5, [sp, #16]
 8007eec:	9403      	str	r4, [sp, #12]
 8007eee:	9002      	str	r0, [sp, #8]
 8007ef0:	9101      	str	r1, [sp, #4]
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	4673      	mov	r3, lr
 8007ef6:	4662      	mov	r2, ip
 8007ef8:	4947      	ldr	r1, [pc, #284]	; (8008018 <MCU_ReceiveMessages+0x1a8>)
 8007efa:	4848      	ldr	r0, [pc, #288]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007efc:	f00b fea6 	bl	8013c4c <siprintf>
 8007f00:	4846      	ldr	r0, [pc, #280]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007f02:	f7fd fa2d 	bl	8005360 <serialOut>

    switch (rxObj.bF.id.SID) {
 8007f06:	4b42      	ldr	r3, [pc, #264]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8007f14:	2b07      	cmp	r3, #7
 8007f16:	d82b      	bhi.n	8007f70 <MCU_ReceiveMessages+0x100>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <MCU_ReceiveMessages+0xb0>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f41 	.word	0x08007f41
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f53 	.word	0x08007f53
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	08007f5f 	.word	0x08007f5f
 8007f34:	08007f47 	.word	0x08007f47
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f6b 	.word	0x08007f6b
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8007f40:	f000 f8ce 	bl	80080e0 <MCU_RegisterModule>
        break;
 8007f44:	e04f      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8007f46:	f001 fe91 	bl	8009c6c <MCU_ProcessCellDetail>
        break;
 8007f4a:	e04c      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8007f4c:	f000 fc3c 	bl	80087c8 <MCU_ProcessModuleHardware>
        break;
 8007f50:	e049      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8007f52:	f001 f80d 	bl	8008f70 <MCU_ProcessModuleStatus1>
        break;
 8007f56:	e046      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8007f58:	f001 fa92 	bl	8009480 <MCU_ProcessModuleStatus2>
        break;
 8007f5c:	e043      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8007f5e:	f001 fc03 	bl	8009768 <MCU_ProcessModuleStatus3>
        break;
 8007f62:	e040      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8007f64:	f000 fb1e 	bl	80085a4 <MCU_ProcessModuleTime>
        break;
 8007f68:	e03d      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8007f6a:	f001 fd39 	bl	80099e0 <MCU_ProcessCellCommStatus1>
        break;
 8007f6e:	e03a      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <MCU_ReceiveMessages+0x1a4>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d133      	bne.n	8007fe4 <MCU_ReceiveMessages+0x174>
 8007f7c:	4b24      	ldr	r3, [pc, #144]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	469c      	mov	ip, r3
 8007f88:	4b21      	ldr	r3, [pc, #132]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007f90:	469e      	mov	lr, r3
 8007f92:	4b1e      	ldr	r3, [pc, #120]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fa6:	78db      	ldrb	r3, [r3, #3]
 8007fa8:	461c      	mov	r4, r3
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	461d      	mov	r5, r3
 8007fb0:	4b16      	ldr	r3, [pc, #88]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fb2:	795b      	ldrb	r3, [r3, #5]
 8007fb4:	461e      	mov	r6, r3
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fb8:	799b      	ldrb	r3, [r3, #6]
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fbe:	79db      	ldrb	r3, [r3, #7]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	9605      	str	r6, [sp, #20]
 8007fc8:	9504      	str	r5, [sp, #16]
 8007fca:	9403      	str	r4, [sp, #12]
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9101      	str	r1, [sp, #4]
 8007fd0:	9200      	str	r2, [sp, #0]
 8007fd2:	4673      	mov	r3, lr
 8007fd4:	4662      	mov	r2, ip
 8007fd6:	4912      	ldr	r1, [pc, #72]	; (8008020 <MCU_ReceiveMessages+0x1b0>)
 8007fd8:	4810      	ldr	r0, [pc, #64]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007fda:	f00b fe37 	bl	8013c4c <siprintf>
 8007fde:	480f      	ldr	r0, [pc, #60]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007fe0:	f7fd f9be 	bl	8005360 <serialOut>
        break;
 8007fe4:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007fe6:	4a08      	ldr	r2, [pc, #32]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007fe8:	2101      	movs	r1, #1
 8007fea:	2001      	movs	r0, #1
 8007fec:	f7fa faaa 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f af42 	bne.w	8007e82 <MCU_ReceiveMessages+0x12>
  }
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	20000d90 	.word	0x20000d90
 800800c:	20000da0 	.word	0x20000da0
 8008010:	20000d94 	.word	0x20000d94
 8008014:	2000000c 	.word	0x2000000c
 8008018:	080176b0 	.word	0x080176b0
 800801c:	20000b64 	.word	0x20000b64
 8008020:	08017714 	.word	0x08017714

08008024 <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800802e:	2332      	movs	r3, #50	; 0x32
 8008030:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <MCU_TransmitMessageQueue+0x98>)
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fa fa50 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d11a      	bne.n	800807a <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008044:	bf00      	nop
        Nop();
 8008046:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008048:	79f8      	ldrb	r0, [r7, #7]
 800804a:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <MCU_TransmitMessageQueue+0x9c>)
 800804c:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <MCU_TransmitMessageQueue+0xa0>)
 800804e:	491e      	ldr	r1, [pc, #120]	; (80080c8 <MCU_TransmitMessageQueue+0xa4>)
 8008050:	f7fa faff 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <MCU_TransmitMessageQueue+0xa8>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b03      	cmp	r3, #3
 800805e:	d106      	bne.n	800806e <MCU_TransmitMessageQueue+0x4a>
 8008060:	491b      	ldr	r1, [pc, #108]	; (80080d0 <MCU_TransmitMessageQueue+0xac>)
 8008062:	481c      	ldr	r0, [pc, #112]	; (80080d4 <MCU_TransmitMessageQueue+0xb0>)
 8008064:	f00b fdf2 	bl	8013c4c <siprintf>
 8008068:	481a      	ldr	r0, [pc, #104]	; (80080d4 <MCU_TransmitMessageQueue+0xb0>)
 800806a:	f7fd f979 	bl	8005360 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	2102      	movs	r1, #2
 8008072:	4618      	mov	r0, r3
 8008074:	f7f9 ff76 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008078:	e01c      	b.n	80080b4 <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3b01      	subs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008080:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <MCU_TransmitMessageQueue+0x98>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0d2      	beq.n	8008032 <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <MCU_TransmitMessageQueue+0xb4>)
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4618      	mov	r0, r3
 8008098:	f7fb fae8 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	79f8      	ldrb	r0, [r7, #7]
 80080a4:	2201      	movs	r2, #1
 80080a6:	9201      	str	r2, [sp, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <MCU_TransmitMessageQueue+0xb8>)
 80080ac:	4a0a      	ldr	r2, [pc, #40]	; (80080d8 <MCU_TransmitMessageQueue+0xb4>)
 80080ae:	2102      	movs	r1, #2
 80080b0:	f7f9 fe66 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000d34 	.word	0x20000d34
 80080c0:	20000de3 	.word	0x20000de3
 80080c4:	20000de2 	.word	0x20000de2
 80080c8:	20000de1 	.word	0x20000de1
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	08017780 	.word	0x08017780
 80080d4:	20000b64 	.word	0x20000b64
 80080d8:	20000d38 	.word	0x20000d38
 80080dc:	20000d44 	.word	0x20000d44

080080e0 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b08b      	sub	sp, #44	; 0x2c
 80080e4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 80080ea:	4a12      	ldr	r2, [pc, #72]	; (8008134 <MCU_RegisterModule+0x54>)
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080f4:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <MCU_RegisterModule+0x58>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <MCU_RegisterModule+0x46>
 8008104:	89bb      	ldrh	r3, [r7, #12]
 8008106:	4619      	mov	r1, r3
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	4618      	mov	r0, r3
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	9201      	str	r2, [sp, #4]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4603      	mov	r3, r0
 8008116:	460a      	mov	r2, r1
 8008118:	4908      	ldr	r1, [pc, #32]	; (800813c <MCU_RegisterModule+0x5c>)
 800811a:	4809      	ldr	r0, [pc, #36]	; (8008140 <MCU_RegisterModule+0x60>)
 800811c:	f00b fd96 	bl	8013c4c <siprintf>
 8008120:	4807      	ldr	r0, [pc, #28]	; (8008140 <MCU_RegisterModule+0x60>)
 8008122:	f7fd f91d 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8008126:	4b07      	ldr	r3, [pc, #28]	; (8008144 <MCU_RegisterModule+0x64>)
 8008128:	7d1b      	ldrb	r3, [r3, #20]
 800812a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800812c:	2300      	movs	r3, #0
 800812e:	75bb      	strb	r3, [r7, #22]
 8008130:	e06f      	b.n	8008212 <MCU_RegisterModule+0x132>
 8008132:	bf00      	nop
 8008134:	20000da0 	.word	0x20000da0
 8008138:	2000000c 	.word	0x2000000c
 800813c:	080177b0 	.word	0x080177b0
 8008140:	20000b64 	.word	0x20000b64
 8008144:	2000a664 	.word	0x2000a664
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8008148:	7bba      	ldrb	r2, [r7, #14]
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	49b4      	ldr	r1, [pc, #720]	; (8008420 <MCU_RegisterModule+0x340>)
 800814e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008152:	fb00 f303 	mul.w	r3, r0, r3
 8008156:	440b      	add	r3, r1
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d156      	bne.n	800820c <MCU_RegisterModule+0x12c>
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	7dbb      	ldrb	r3, [r7, #22]
 8008162:	49af      	ldr	r1, [pc, #700]	; (8008420 <MCU_RegisterModule+0x340>)
 8008164:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008168:	fb00 f303 	mul.w	r3, r0, r3
 800816c:	440b      	add	r3, r1
 800816e:	3301      	adds	r3, #1
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d14a      	bne.n	800820c <MCU_RegisterModule+0x12c>
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	7dbb      	ldrb	r3, [r7, #22]
 800817a:	49a9      	ldr	r1, [pc, #676]	; (8008420 <MCU_RegisterModule+0x340>)
 800817c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008180:	fb00 f303 	mul.w	r3, r0, r3
 8008184:	440b      	add	r3, r1
 8008186:	3304      	adds	r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d13e      	bne.n	800820c <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 800818e:	7dbb      	ldrb	r3, [r7, #22]
 8008190:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	4aa2      	ldr	r2, [pc, #648]	; (8008420 <MCU_RegisterModule+0x340>)
 8008196:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80081a4:	7893      	ldrb	r3, [r2, #2]
 80081a6:	f36f 0300 	bfc	r3, #0, #1
 80081aa:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80081ac:	4b9d      	ldr	r3, [pc, #628]	; (8008424 <MCU_RegisterModule+0x344>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081b4:	499a      	ldr	r1, [pc, #616]	; (8008420 <MCU_RegisterModule+0x340>)
 80081b6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80081ba:	fb00 f303 	mul.w	r3, r0, r3
 80081be:	440b      	add	r3, r1
 80081c0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80081c4:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	4a97      	ldr	r2, [pc, #604]	; (8008428 <MCU_RegisterModule+0x348>)
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	4994      	ldr	r1, [pc, #592]	; (8008420 <MCU_RegisterModule+0x340>)
 80081ce:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80081d2:	fb00 f303 	mul.w	r3, r0, r3
 80081d6:	440b      	add	r3, r1
 80081d8:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80081dc:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 80081de:	4b93      	ldr	r3, [pc, #588]	; (800842c <MCU_RegisterModule+0x34c>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d110      	bne.n	800820c <MCU_RegisterModule+0x12c>
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	4a8c      	ldr	r2, [pc, #560]	; (8008420 <MCU_RegisterModule+0x340>)
 80081ee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	3308      	adds	r3, #8
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	498c      	ldr	r1, [pc, #560]	; (8008430 <MCU_RegisterModule+0x350>)
 8008200:	488c      	ldr	r0, [pc, #560]	; (8008434 <MCU_RegisterModule+0x354>)
 8008202:	f00b fd23 	bl	8013c4c <siprintf>
 8008206:	488b      	ldr	r0, [pc, #556]	; (8008434 <MCU_RegisterModule+0x354>)
 8008208:	f7fd f8aa 	bl	8005360 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	3301      	adds	r3, #1
 8008210:	75bb      	strb	r3, [r7, #22]
 8008212:	4b89      	ldr	r3, [pc, #548]	; (8008438 <MCU_RegisterModule+0x358>)
 8008214:	7d1b      	ldrb	r3, [r3, #20]
 8008216:	7dba      	ldrb	r2, [r7, #22]
 8008218:	429a      	cmp	r2, r3
 800821a:	d395      	bcc.n	8008148 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 800821c:	4b86      	ldr	r3, [pc, #536]	; (8008438 <MCU_RegisterModule+0x358>)
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	7dfa      	ldrb	r2, [r7, #23]
 8008222:	429a      	cmp	r2, r3
 8008224:	d15f      	bne.n	80082e6 <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	89b8      	ldrh	r0, [r7, #12]
 800822a:	4a7d      	ldr	r2, [pc, #500]	; (8008420 <MCU_RegisterModule+0x340>)
 800822c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	330a      	adds	r3, #10
 8008238:	4602      	mov	r2, r0
 800823a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	7bf8      	ldrb	r0, [r7, #15]
 8008240:	4a77      	ldr	r2, [pc, #476]	; (8008420 <MCU_RegisterModule+0x340>)
 8008242:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	4413      	add	r3, r2
 800824c:	3301      	adds	r3, #1
 800824e:	4602      	mov	r2, r0
 8008250:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	7bb8      	ldrb	r0, [r7, #14]
 8008256:	4a72      	ldr	r2, [pc, #456]	; (8008420 <MCU_RegisterModule+0x340>)
 8008258:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	4602      	mov	r2, r0
 8008264:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	496d      	ldr	r1, [pc, #436]	; (8008420 <MCU_RegisterModule+0x340>)
 800826c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008270:	fb00 f303 	mul.w	r3, r0, r3
 8008274:	440b      	add	r3, r1
 8008276:	3304      	adds	r3, #4
 8008278:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800827a:	4b6a      	ldr	r3, [pc, #424]	; (8008424 <MCU_RegisterModule+0x344>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008282:	4967      	ldr	r1, [pc, #412]	; (8008420 <MCU_RegisterModule+0x340>)
 8008284:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008288:	fb00 f303 	mul.w	r3, r0, r3
 800828c:	440b      	add	r3, r1
 800828e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008292:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	4a64      	ldr	r2, [pc, #400]	; (8008428 <MCU_RegisterModule+0x348>)
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	4961      	ldr	r1, [pc, #388]	; (8008420 <MCU_RegisterModule+0x340>)
 800829c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80082a0:	fb00 f303 	mul.w	r3, r0, r3
 80082a4:	440b      	add	r3, r1
 80082a6:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80082aa:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	4a5c      	ldr	r2, [pc, #368]	; (8008420 <MCU_RegisterModule+0x340>)
 80082b0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80082be:	2201      	movs	r2, #1
 80082c0:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 80082c2:	4b5d      	ldr	r3, [pc, #372]	; (8008438 <MCU_RegisterModule+0x358>)
 80082c4:	7d1b      	ldrb	r3, [r3, #20]
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b5b      	ldr	r3, [pc, #364]	; (8008438 <MCU_RegisterModule+0x358>)
 80082cc:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	4a59      	ldr	r2, [pc, #356]	; (8008438 <MCU_RegisterModule+0x358>)
 80082d2:	7d10      	ldrb	r0, [r2, #20]
 80082d4:	4a52      	ldr	r2, [pc, #328]	; (8008420 <MCU_RegisterModule+0x340>)
 80082d6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	3308      	adds	r3, #8
 80082e2:	4602      	mov	r2, r0
 80082e4:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	4a4d      	ldr	r2, [pc, #308]	; (8008420 <MCU_RegisterModule+0x340>)
 80082ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	4413      	add	r3, r2
 80082f4:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	4a48      	ldr	r2, [pc, #288]	; (8008420 <MCU_RegisterModule+0x340>)
 8008300:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008304:	fb01 f303 	mul.w	r3, r1, r3
 8008308:	4413      	add	r3, r2
 800830a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800830e:	2201      	movs	r2, #1
 8008310:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	4a42      	ldr	r2, [pc, #264]	; (8008420 <MCU_RegisterModule+0x340>)
 8008316:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	3308      	adds	r3, #8
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <MCU_RegisterModule+0x358>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	4a3c      	ldr	r2, [pc, #240]	; (8008420 <MCU_RegisterModule+0x340>)
 8008330:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	4413      	add	r3, r2
 800833a:	3301      	adds	r3, #1
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	4a37      	ldr	r2, [pc, #220]	; (8008420 <MCU_RegisterModule+0x340>)
 8008344:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	4a32      	ldr	r2, [pc, #200]	; (8008420 <MCU_RegisterModule+0x340>)
 8008356:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8008366:	4b35      	ldr	r3, [pc, #212]	; (800843c <MCU_RegisterModule+0x35c>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800836c:	4b33      	ldr	r3, [pc, #204]	; (800843c <MCU_RegisterModule+0x35c>)
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008372:	4b32      	ldr	r3, [pc, #200]	; (800843c <MCU_RegisterModule+0x35c>)
 8008374:	2200      	movs	r2, #0
 8008376:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 8008378:	4b31      	ldr	r3, [pc, #196]	; (8008440 <MCU_RegisterModule+0x360>)
 800837a:	461a      	mov	r2, r3
 800837c:	1d3b      	adds	r3, r7, #4
 800837e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008382:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8008386:	4a2d      	ldr	r2, [pc, #180]	; (800843c <MCU_RegisterModule+0x35c>)
 8008388:	8813      	ldrh	r3, [r2, #0]
 800838a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 800838e:	f361 030a 	bfi	r3, r1, #0, #11
 8008392:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	4a22      	ldr	r2, [pc, #136]	; (8008420 <MCU_RegisterModule+0x340>)
 8008398:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	4413      	add	r3, r2
 80083a2:	3308      	adds	r3, #8
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80083ac:	4923      	ldr	r1, [pc, #140]	; (800843c <MCU_RegisterModule+0x35c>)
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	f362 23dc 	bfi	r3, r2, #11, #18
 80083b4:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80083b6:	4a21      	ldr	r2, [pc, #132]	; (800843c <MCU_RegisterModule+0x35c>)
 80083b8:	7913      	ldrb	r3, [r2, #4]
 80083ba:	f36f 1386 	bfc	r3, #6, #1
 80083be:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80083c0:	4a1e      	ldr	r2, [pc, #120]	; (800843c <MCU_RegisterModule+0x35c>)
 80083c2:	7913      	ldrb	r3, [r2, #4]
 80083c4:	2108      	movs	r1, #8
 80083c6:	f361 0303 	bfi	r3, r1, #0, #4
 80083ca:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80083cc:	4a1b      	ldr	r2, [pc, #108]	; (800843c <MCU_RegisterModule+0x35c>)
 80083ce:	7913      	ldrb	r3, [r2, #4]
 80083d0:	f36f 13c7 	bfc	r3, #7, #1
 80083d4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80083d6:	4a19      	ldr	r2, [pc, #100]	; (800843c <MCU_RegisterModule+0x35c>)
 80083d8:	7913      	ldrb	r3, [r2, #4]
 80083da:	f043 0310 	orr.w	r3, r3, #16
 80083de:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <MCU_RegisterModule+0x34c>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d012      	beq.n	8008412 <MCU_RegisterModule+0x332>
 80083ec:	793b      	ldrb	r3, [r7, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	797b      	ldrb	r3, [r7, #5]
 80083f2:	461c      	mov	r4, r3
 80083f4:	79bb      	ldrb	r3, [r7, #6]
 80083f6:	79fa      	ldrb	r2, [r7, #7]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	9102      	str	r1, [sp, #8]
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4623      	mov	r3, r4
 8008402:	4602      	mov	r2, r0
 8008404:	490f      	ldr	r1, [pc, #60]	; (8008444 <MCU_RegisterModule+0x364>)
 8008406:	480b      	ldr	r0, [pc, #44]	; (8008434 <MCU_RegisterModule+0x354>)
 8008408:	f00b fc20 	bl	8013c4c <siprintf>
 800840c:	4809      	ldr	r0, [pc, #36]	; (8008434 <MCU_RegisterModule+0x354>)
 800840e:	f7fc ffa7 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008412:	2001      	movs	r0, #1
 8008414:	f7ff fe06 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}
 8008420:	20000de4 	.word	0x20000de4
 8008424:	200005d8 	.word	0x200005d8
 8008428:	20000d20 	.word	0x20000d20
 800842c:	2000000c 	.word	0x2000000c
 8008430:	080177f0 	.word	0x080177f0
 8008434:	20000b64 	.word	0x20000b64
 8008438:	2000a664 	.word	0x2000a664
 800843c:	20000d38 	.word	0x20000d38
 8008440:	20000d44 	.word	0x20000d44
 8008444:	08017824 	.word	0x08017824

08008448 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 800844e:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <MCU_DeRegisterAllModules+0x90>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8008454:	4b21      	ldr	r3, [pc, #132]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800845a:	4b20      	ldr	r3, [pc, #128]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800845c:	2200      	movs	r2, #0
 800845e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008460:	4b1e      	ldr	r3, [pc, #120]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008462:	2200      	movs	r2, #0
 8008464:	609a      	str	r2, [r3, #8]
 8008466:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <MCU_DeRegisterAllModules+0x98>)
 800846a:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800846e:	8813      	ldrh	r3, [r2, #0]
 8008470:	f240 511e 	movw	r1, #1310	; 0x51e
 8008474:	f361 030a 	bfi	r3, r1, #0, #11
 8008478:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 800847a:	4a18      	ldr	r2, [pc, #96]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800847c:	6813      	ldr	r3, [r2, #0]
 800847e:	f36f 23dc 	bfc	r3, #11, #18
 8008482:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008484:	4a15      	ldr	r2, [pc, #84]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008486:	7913      	ldrb	r3, [r2, #4]
 8008488:	f36f 1386 	bfc	r3, #6, #1
 800848c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800848e:	4a13      	ldr	r2, [pc, #76]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008490:	7913      	ldrb	r3, [r2, #4]
 8008492:	2101      	movs	r1, #1
 8008494:	f361 0303 	bfi	r3, r1, #0, #4
 8008498:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800849a:	4a10      	ldr	r2, [pc, #64]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800849c:	7913      	ldrb	r3, [r2, #4]
 800849e:	f36f 13c7 	bfc	r3, #7, #1
 80084a2:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80084a4:	4a0d      	ldr	r2, [pc, #52]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 80084a6:	7913      	ldrb	r3, [r2, #4]
 80084a8:	f043 0310 	orr.w	r3, r3, #16
 80084ac:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <MCU_DeRegisterAllModules+0x9c>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d006      	beq.n	80084c8 <MCU_DeRegisterAllModules+0x80>
 80084ba:	490b      	ldr	r1, [pc, #44]	; (80084e8 <MCU_DeRegisterAllModules+0xa0>)
 80084bc:	480b      	ldr	r0, [pc, #44]	; (80084ec <MCU_DeRegisterAllModules+0xa4>)
 80084be:	f00b fbc5 	bl	8013c4c <siprintf>
 80084c2:	480a      	ldr	r0, [pc, #40]	; (80084ec <MCU_DeRegisterAllModules+0xa4>)
 80084c4:	f7fc ff4c 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7ff fdab 	bl	8008024 <MCU_TransmitMessageQueue>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000a664 	.word	0x2000a664
 80084dc:	20000d38 	.word	0x20000d38
 80084e0:	20000d44 	.word	0x20000d44
 80084e4:	2000000c 	.word	0x2000000c
 80084e8:	08017870 	.word	0x08017870
 80084ec:	20000b64 	.word	0x20000b64

080084f0 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	2201      	movs	r2, #1
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00a fb93 	bl	8012c28 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <MCU_IsolateAllModules+0x9c>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8008508:	4b21      	ldr	r3, [pc, #132]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800850e:	4b20      	ldr	r3, [pc, #128]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
 800851a:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 800851c:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <MCU_IsolateAllModules+0xa4>)
 800851e:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8008520:	4a1b      	ldr	r2, [pc, #108]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008522:	8813      	ldrh	r3, [r2, #0]
 8008524:	f240 511f 	movw	r1, #1311	; 0x51f
 8008528:	f361 030a 	bfi	r3, r1, #0, #11
 800852c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800852e:	4a18      	ldr	r2, [pc, #96]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008530:	6813      	ldr	r3, [r2, #0]
 8008532:	f36f 23dc 	bfc	r3, #11, #18
 8008536:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008538:	4a15      	ldr	r2, [pc, #84]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800853a:	7913      	ldrb	r3, [r2, #4]
 800853c:	f36f 1386 	bfc	r3, #6, #1
 8008540:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008542:	4a13      	ldr	r2, [pc, #76]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008544:	7913      	ldrb	r3, [r2, #4]
 8008546:	2101      	movs	r1, #1
 8008548:	f361 0303 	bfi	r3, r1, #0, #4
 800854c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800854e:	4a10      	ldr	r2, [pc, #64]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008550:	7913      	ldrb	r3, [r2, #4]
 8008552:	f36f 13c7 	bfc	r3, #7, #1
 8008556:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008558:	4a0d      	ldr	r2, [pc, #52]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800855a:	7913      	ldrb	r3, [r2, #4]
 800855c:	f043 0310 	orr.w	r3, r3, #16
 8008560:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <MCU_IsolateAllModules+0xa8>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <MCU_IsolateAllModules+0x8c>
 800856e:	490b      	ldr	r1, [pc, #44]	; (800859c <MCU_IsolateAllModules+0xac>)
 8008570:	480b      	ldr	r0, [pc, #44]	; (80085a0 <MCU_IsolateAllModules+0xb0>)
 8008572:	f00b fb6b 	bl	8013c4c <siprintf>
 8008576:	480a      	ldr	r0, [pc, #40]	; (80085a0 <MCU_IsolateAllModules+0xb0>)
 8008578:	f7fc fef2 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800857c:	2001      	movs	r0, #1
 800857e:	f7ff fd51 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000a664 	.word	0x2000a664
 8008590:	20000d38 	.word	0x20000d38
 8008594:	20000d44 	.word	0x20000d44
 8008598:	2000000c 	.word	0x2000000c
 800859c:	08017898 	.word	0x08017898
 80085a0:	20000b64 	.word	0x20000b64

080085a4 <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 80085a4:	b5b0      	push	{r4, r5, r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 80085aa:	4b34      	ldr	r3, [pc, #208]	; (800867c <MCU_ProcessModuleTime+0xd8>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <MCU_ProcessModuleTime+0x20>
 80085b6:	4932      	ldr	r1, [pc, #200]	; (8008680 <MCU_ProcessModuleTime+0xdc>)
 80085b8:	4832      	ldr	r0, [pc, #200]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 80085ba:	f00b fb47 	bl	8013c4c <siprintf>
 80085be:	4831      	ldr	r0, [pc, #196]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 80085c0:	f7fc fece 	bl	8005360 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80085c4:	f7fc ffb4 	bl	8005530 <readRTC>
 80085c8:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80085cc:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <MCU_ProcessModuleTime+0xe4>)
 80085ce:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80085d8:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80085da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085de:	4614      	mov	r4, r2
 80085e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80085e4:	4623      	mov	r3, r4
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	462a      	mov	r2, r5
 80085ec:	f362 031e 	bfi	r3, r2, #0, #31
 80085f0:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80085f8:	4b24      	ldr	r3, [pc, #144]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008600:	2200      	movs	r2, #0
 8008602:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 8008604:	463b      	mov	r3, r7
 8008606:	2208      	movs	r2, #8
 8008608:	4619      	mov	r1, r3
 800860a:	4821      	ldr	r0, [pc, #132]	; (8008690 <MCU_ProcessModuleTime+0xec>)
 800860c:	f00a fafe 	bl	8012c0c <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8008610:	4a1e      	ldr	r2, [pc, #120]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008612:	8813      	ldrh	r3, [r2, #0]
 8008614:	f240 5116 	movw	r1, #1302	; 0x516
 8008618:	f361 030a 	bfi	r3, r1, #0, #11
 800861c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800861e:	4a1b      	ldr	r2, [pc, #108]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008620:	6813      	ldr	r3, [r2, #0]
 8008622:	f36f 23dc 	bfc	r3, #11, #18
 8008626:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008628:	4a18      	ldr	r2, [pc, #96]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 800862a:	7913      	ldrb	r3, [r2, #4]
 800862c:	f36f 1386 	bfc	r3, #6, #1
 8008630:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008632:	4a16      	ldr	r2, [pc, #88]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008634:	7913      	ldrb	r3, [r2, #4]
 8008636:	2108      	movs	r1, #8
 8008638:	f361 0303 	bfi	r3, r1, #0, #4
 800863c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800863e:	4a13      	ldr	r2, [pc, #76]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008640:	7913      	ldrb	r3, [r2, #4]
 8008642:	f36f 13c7 	bfc	r3, #7, #1
 8008646:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008648:	4a10      	ldr	r2, [pc, #64]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 800864a:	7913      	ldrb	r3, [r2, #4]
 800864c:	f043 0310 	orr.w	r3, r3, #16
 8008650:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <MCU_ProcessModuleTime+0xd8>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <MCU_ProcessModuleTime+0xc8>
 800865e:	490d      	ldr	r1, [pc, #52]	; (8008694 <MCU_ProcessModuleTime+0xf0>)
 8008660:	4808      	ldr	r0, [pc, #32]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 8008662:	f00b faf3 	bl	8013c4c <siprintf>
 8008666:	4807      	ldr	r0, [pc, #28]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 8008668:	f7fc fe7a 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800866c:	2001      	movs	r0, #1
 800866e:	f7ff fcd9 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bdb0      	pop	{r4, r5, r7, pc}
 800867a:	bf00      	nop
 800867c:	2000000c 	.word	0x2000000c
 8008680:	080178bc 	.word	0x080178bc
 8008684:	20000b64 	.word	0x20000b64
 8008688:	2000a664 	.word	0x2000a664
 800868c:	20000d38 	.word	0x20000d38
 8008690:	20000d44 	.word	0x20000d44
 8008694:	080178d8 	.word	0x080178d8

08008698 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 80086a2:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086a4:	7d1b      	ldrb	r3, [r3, #20]
 80086a6:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80086a8:	2300      	movs	r3, #0
 80086aa:	73bb      	strb	r3, [r7, #14]
 80086ac:	e010      	b.n	80086d0 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	4a3e      	ldr	r2, [pc, #248]	; (80087ac <MCU_RequestHardware+0x114>)
 80086b2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	3308      	adds	r3, #8
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d101      	bne.n	80086ca <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	3301      	adds	r3, #1
 80086ce:	73bb      	strb	r3, [r7, #14]
 80086d0:	4b35      	ldr	r3, [pc, #212]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086d2:	7d1b      	ldrb	r3, [r3, #20]
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d3e9      	bcc.n	80086ae <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086dc:	7d1b      	ldrb	r3, [r3, #20]
 80086de:	7bfa      	ldrb	r2, [r7, #15]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d10d      	bne.n	8008700 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <MCU_RequestHardware+0x118>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d156      	bne.n	800879e <MCU_RequestHardware+0x106>
 80086f0:	4930      	ldr	r1, [pc, #192]	; (80087b4 <MCU_RequestHardware+0x11c>)
 80086f2:	4831      	ldr	r0, [pc, #196]	; (80087b8 <MCU_RequestHardware+0x120>)
 80086f4:	f00b faaa 	bl	8013c4c <siprintf>
 80086f8:	482f      	ldr	r0, [pc, #188]	; (80087b8 <MCU_RequestHardware+0x120>)
 80086fa:	f7fc fe31 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 80086fe:	e04e      	b.n	800879e <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4a2a      	ldr	r2, [pc, #168]	; (80087ac <MCU_RequestHardware+0x114>)
 8008704:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 800871a:	4b28      	ldr	r3, [pc, #160]	; (80087bc <MCU_RequestHardware+0x124>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008720:	4b26      	ldr	r3, [pc, #152]	; (80087bc <MCU_RequestHardware+0x124>)
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008726:	4b25      	ldr	r3, [pc, #148]	; (80087bc <MCU_RequestHardware+0x124>)
 8008728:	2200      	movs	r2, #0
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <MCU_RequestHardware+0x128>)
 8008730:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8008732:	4a22      	ldr	r2, [pc, #136]	; (80087bc <MCU_RequestHardware+0x124>)
 8008734:	8813      	ldrh	r3, [r2, #0]
 8008736:	f240 5111 	movw	r1, #1297	; 0x511
 800873a:	f361 030a 	bfi	r3, r1, #0, #11
 800873e:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008740:	79fa      	ldrb	r2, [r7, #7]
 8008742:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008746:	491d      	ldr	r1, [pc, #116]	; (80087bc <MCU_RequestHardware+0x124>)
 8008748:	680b      	ldr	r3, [r1, #0]
 800874a:	f362 23dc 	bfi	r3, r2, #11, #18
 800874e:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008750:	4a1a      	ldr	r2, [pc, #104]	; (80087bc <MCU_RequestHardware+0x124>)
 8008752:	7913      	ldrb	r3, [r2, #4]
 8008754:	f36f 1386 	bfc	r3, #6, #1
 8008758:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <MCU_RequestHardware+0x124>)
 800875c:	7913      	ldrb	r3, [r2, #4]
 800875e:	2101      	movs	r1, #1
 8008760:	f361 0303 	bfi	r3, r1, #0, #4
 8008764:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008766:	4a15      	ldr	r2, [pc, #84]	; (80087bc <MCU_RequestHardware+0x124>)
 8008768:	7913      	ldrb	r3, [r2, #4]
 800876a:	f36f 13c7 	bfc	r3, #7, #1
 800876e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008770:	4a12      	ldr	r2, [pc, #72]	; (80087bc <MCU_RequestHardware+0x124>)
 8008772:	7913      	ldrb	r3, [r2, #4]
 8008774:	f043 0310 	orr.w	r3, r3, #16
 8008778:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <MCU_RequestHardware+0x118>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <MCU_RequestHardware+0x100>
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	461a      	mov	r2, r3
 800878a:	490e      	ldr	r1, [pc, #56]	; (80087c4 <MCU_RequestHardware+0x12c>)
 800878c:	480a      	ldr	r0, [pc, #40]	; (80087b8 <MCU_RequestHardware+0x120>)
 800878e:	f00b fa5d 	bl	8013c4c <siprintf>
 8008792:	4809      	ldr	r0, [pc, #36]	; (80087b8 <MCU_RequestHardware+0x120>)
 8008794:	f7fc fde4 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008798:	2001      	movs	r0, #1
 800879a:	f7ff fc43 	bl	8008024 <MCU_TransmitMessageQueue>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	2000a664 	.word	0x2000a664
 80087ac:	20000de4 	.word	0x20000de4
 80087b0:	2000000c 	.word	0x2000000c
 80087b4:	080178f0 	.word	0x080178f0
 80087b8:	20000b64 	.word	0x20000b64
 80087bc:	20000d38 	.word	0x20000d38
 80087c0:	20000d44 	.word	0x20000d44
 80087c4:	0801792c 	.word	0x0801792c

080087c8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	b08e      	sub	sp, #56	; 0x38
 80087ce:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 80087d0:	463b      	mov	r3, r7
 80087d2:	2208      	movs	r2, #8
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00a fa26 	bl	8012c28 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 80087dc:	4a94      	ldr	r2, [pc, #592]	; (8008a30 <MCU_ProcessModuleHardware+0x268>)
 80087de:	463b      	mov	r3, r7
 80087e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087e4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80087e8:	4b92      	ldr	r3, [pc, #584]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 80087ea:	7d1b      	ldrb	r3, [r3, #20]
 80087ec:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80087ee:	2300      	movs	r3, #0
 80087f0:	75bb      	strb	r3, [r7, #22]
 80087f2:	e015      	b.n	8008820 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <MCU_ProcessModuleHardware+0x270>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
 80087fe:	498f      	ldr	r1, [pc, #572]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008800:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008804:	fb00 f303 	mul.w	r3, r0, r3
 8008808:	440b      	add	r3, r1
 800880a:	3308      	adds	r3, #8
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008812:	429a      	cmp	r2, r3
 8008814:	d101      	bne.n	800881a <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 8008816:	7dbb      	ldrb	r3, [r7, #22]
 8008818:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800881a:	7dbb      	ldrb	r3, [r7, #22]
 800881c:	3301      	adds	r3, #1
 800881e:	75bb      	strb	r3, [r7, #22]
 8008820:	4b84      	ldr	r3, [pc, #528]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 8008822:	7d1b      	ldrb	r3, [r3, #20]
 8008824:	7dba      	ldrb	r2, [r7, #22]
 8008826:	429a      	cmp	r2, r3
 8008828:	d3e4      	bcc.n	80087f4 <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 800882a:	4b82      	ldr	r3, [pc, #520]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 800882c:	7d1b      	ldrb	r3, [r3, #20]
 800882e:	7dfa      	ldrb	r2, [r7, #23]
 8008830:	429a      	cmp	r2, r3
 8008832:	d10e      	bne.n	8008852 <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8008834:	4b82      	ldr	r3, [pc, #520]	; (8008a40 <MCU_ProcessModuleHardware+0x278>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b03      	cmp	r3, #3
 800883e:	f040 825d 	bne.w	8008cfc <MCU_ProcessModuleHardware+0x534>
 8008842:	4980      	ldr	r1, [pc, #512]	; (8008a44 <MCU_ProcessModuleHardware+0x27c>)
 8008844:	4880      	ldr	r0, [pc, #512]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 8008846:	f00b fa01 	bl	8013c4c <siprintf>
 800884a:	487f      	ldr	r0, [pc, #508]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 800884c:	f7fc fd88 	bl	8005360 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8008850:	e254      	b.n	8008cfc <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	8838      	ldrh	r0, [r7, #0]
 8008856:	4a79      	ldr	r2, [pc, #484]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008858:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800885c:	fb01 f303 	mul.w	r3, r1, r3
 8008860:	4413      	add	r3, r2
 8008862:	330e      	adds	r3, #14
 8008864:	4602      	mov	r2, r0
 8008866:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	8878      	ldrh	r0, [r7, #2]
 800886c:	4a73      	ldr	r2, [pc, #460]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800886e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008872:	fb01 f303 	mul.w	r3, r1, r3
 8008876:	4413      	add	r3, r2
 8008878:	3310      	adds	r3, #16
 800887a:	4602      	mov	r2, r0
 800887c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	88b8      	ldrh	r0, [r7, #4]
 8008882:	4a6e      	ldr	r2, [pc, #440]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008884:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	3312      	adds	r3, #18
 8008890:	4602      	mov	r2, r0
 8008892:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	88f8      	ldrh	r0, [r7, #6]
 8008898:	4a68      	ldr	r2, [pc, #416]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800889a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	4413      	add	r3, r2
 80088a4:	330c      	adds	r3, #12
 80088a6:	4602      	mov	r2, r0
 80088a8:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80088aa:	4b68      	ldr	r3, [pc, #416]	; (8008a4c <MCU_ProcessModuleHardware+0x284>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088b2:	4962      	ldr	r1, [pc, #392]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088b4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80088b8:	fb00 f303 	mul.w	r3, r0, r3
 80088bc:	440b      	add	r3, r1
 80088be:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80088c2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	4a62      	ldr	r2, [pc, #392]	; (8008a50 <MCU_ProcessModuleHardware+0x288>)
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	495c      	ldr	r1, [pc, #368]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088cc:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80088d0:	fb00 f303 	mul.w	r3, r0, r3
 80088d4:	440b      	add	r3, r1
 80088d6:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80088da:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	4a57      	ldr	r2, [pc, #348]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	4a51      	ldr	r2, [pc, #324]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088f6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	330e      	adds	r3, #14
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f7f7 fdef 	bl	80004e8 <__aeabi_i2d>
 800890a:	a345      	add	r3, pc, #276	; (adr r3, 8008a20 <MCU_ProcessModuleHardware+0x258>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fe54 	bl	80005bc <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4610      	mov	r0, r2
 800891a:	4619      	mov	r1, r3
 800891c:	a342      	add	r3, pc, #264	; (adr r3, 8008a28 <MCU_ProcessModuleHardware+0x260>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fc93 	bl	800024c <__aeabi_dsub>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	f7f8 f93d 	bl	8000bac <__aeabi_d2f>
 8008932:	4603      	mov	r3, r0
 8008934:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	4a40      	ldr	r2, [pc, #256]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800893a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	3310      	adds	r3, #16
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fdcd 	bl	80004e8 <__aeabi_i2d>
 800894e:	a334      	add	r3, pc, #208	; (adr r3, 8008a20 <MCU_ProcessModuleHardware+0x258>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fe32 	bl	80005bc <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	a331      	add	r3, pc, #196	; (adr r3, 8008a28 <MCU_ProcessModuleHardware+0x260>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fc71 	bl	800024c <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	f7f8 f91b 	bl	8000bac <__aeabi_d2f>
 8008976:	4603      	mov	r3, r0
 8008978:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 800897a:	edd7 7a04 	vldr	s15, [r7, #16]
 800897e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008986:	d567      	bpl.n	8008a58 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8008988:	4b2d      	ldr	r3, [pc, #180]	; (8008a40 <MCU_ProcessModuleHardware+0x278>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	2b03      	cmp	r3, #3
 8008992:	d113      	bne.n	80089bc <MCU_ProcessModuleHardware+0x1f4>
 8008994:	4b28      	ldr	r3, [pc, #160]	; (8008a38 <MCU_ProcessModuleHardware+0x270>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800899c:	461c      	mov	r4, r3
 800899e:	6938      	ldr	r0, [r7, #16]
 80089a0:	f7f7 fdb4 	bl	800050c <__aeabi_f2d>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9cd 2300 	strd	r2, r3, [sp]
 80089ac:	4622      	mov	r2, r4
 80089ae:	4929      	ldr	r1, [pc, #164]	; (8008a54 <MCU_ProcessModuleHardware+0x28c>)
 80089b0:	4825      	ldr	r0, [pc, #148]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 80089b2:	f00b f94b 	bl	8013c4c <siprintf>
 80089b6:	4824      	ldr	r0, [pc, #144]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 80089b8:	f7fc fcd2 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	4a1f      	ldr	r2, [pc, #124]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089c0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	330e      	adds	r3, #14
 80089cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089d0:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089d6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	3310      	adds	r3, #16
 80089e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089e6:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	4a14      	ldr	r2, [pc, #80]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089ec:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80089fa:	7893      	ldrb	r3, [r2, #2]
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008a06:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3308      	adds	r3, #8
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 f866 	bl	8009ae8 <MCU_TransmitState>
 8008a1c:	e04f      	b.n	8008abe <MCU_ProcessModuleHardware+0x2f6>
 8008a1e:	bf00      	nop
 8008a20:	47ae147b 	.word	0x47ae147b
 8008a24:	3f947ae1 	.word	0x3f947ae1
 8008a28:	47ae147b 	.word	0x47ae147b
 8008a2c:	40847ae1 	.word	0x40847ae1
 8008a30:	20000da0 	.word	0x20000da0
 8008a34:	2000a664 	.word	0x2000a664
 8008a38:	20000d94 	.word	0x20000d94
 8008a3c:	20000de4 	.word	0x20000de4
 8008a40:	2000000c 	.word	0x2000000c
 8008a44:	08017954 	.word	0x08017954
 8008a48:	20000b64 	.word	0x20000b64
 8008a4c:	200005d8 	.word	0x200005d8
 8008a50:	20000d20 	.word	0x20000d20
 8008a54:	08017994 	.word	0x08017994
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8008a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	dd29      	ble.n	8008abe <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8008a6a:	4bad      	ldr	r3, [pc, #692]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d018      	beq.n	8008aa8 <MCU_ProcessModuleHardware+0x2e0>
 8008a76:	4bab      	ldr	r3, [pc, #684]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008a7e:	461c      	mov	r4, r3
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7f7 fd43 	bl	800050c <__aeabi_f2d>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	f04f 0000 	mov.w	r0, #0
 8008a8e:	49a6      	ldr	r1, [pc, #664]	; (8008d28 <MCU_ProcessModuleHardware+0x560>)
 8008a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a94:	e9cd 2300 	strd	r2, r3, [sp]
 8008a98:	4622      	mov	r2, r4
 8008a9a:	49a4      	ldr	r1, [pc, #656]	; (8008d2c <MCU_ProcessModuleHardware+0x564>)
 8008a9c:	48a4      	ldr	r0, [pc, #656]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008a9e:	f00b f8d5 	bl	8013c4c <siprintf>
 8008aa2:	48a3      	ldr	r0, [pc, #652]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008aa4:	f7fc fc5c 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	4aa2      	ldr	r2, [pc, #648]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008aac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	330e      	adds	r3, #14
 8008ab8:	f248 12f4 	movw	r2, #33268	; 0x81f4
 8008abc:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8008abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	dd4a      	ble.n	8008b62 <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8008acc:	4b94      	ldr	r3, [pc, #592]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d113      	bne.n	8008b00 <MCU_ProcessModuleHardware+0x338>
 8008ad8:	4b92      	ldr	r3, [pc, #584]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008ae0:	461c      	mov	r4, r3
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7f7 fd12 	bl	800050c <__aeabi_f2d>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9cd 2300 	strd	r2, r3, [sp]
 8008af0:	4622      	mov	r2, r4
 8008af2:	4991      	ldr	r1, [pc, #580]	; (8008d38 <MCU_ProcessModuleHardware+0x570>)
 8008af4:	488e      	ldr	r0, [pc, #568]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008af6:	f00b f8a9 	bl	8013c4c <siprintf>
 8008afa:	488d      	ldr	r0, [pc, #564]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008afc:	f7fc fc30 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	4a8c      	ldr	r2, [pc, #560]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b04:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	330e      	adds	r3, #14
 8008b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b14:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	4a86      	ldr	r2, [pc, #536]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b1a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	3310      	adds	r3, #16
 8008b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b2a:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	4a81      	ldr	r2, [pc, #516]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b30:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8008b3e:	7893      	ldrb	r3, [r2, #2]
 8008b40:	f043 0302 	orr.w	r3, r3, #2
 8008b44:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	4a7a      	ldr	r2, [pc, #488]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b4a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	3308      	adds	r3, #8
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 ffc4 	bl	8009ae8 <MCU_TransmitState>
 8008b60:	e032      	b.n	8008bc8 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8008b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b66:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008d3c <MCU_ProcessModuleHardware+0x574>
 8008b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d529      	bpl.n	8008bc8 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8008b74:	4b6a      	ldr	r3, [pc, #424]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d018      	beq.n	8008bb2 <MCU_ProcessModuleHardware+0x3ea>
 8008b80:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008b88:	461c      	mov	r4, r3
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7f7 fcbe 	bl	800050c <__aeabi_f2d>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	f04f 0000 	mov.w	r0, #0
 8008b98:	4969      	ldr	r1, [pc, #420]	; (8008d40 <MCU_ProcessModuleHardware+0x578>)
 8008b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4967      	ldr	r1, [pc, #412]	; (8008d44 <MCU_ProcessModuleHardware+0x57c>)
 8008ba6:	4862      	ldr	r0, [pc, #392]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008ba8:	f00b f850 	bl	8013c4c <siprintf>
 8008bac:	4860      	ldr	r0, [pc, #384]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008bae:	f7fc fbd7 	bl	8005360 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	4a5f      	ldr	r2, [pc, #380]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008bb6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	f247 72cc 	movw	r2, #30668	; 0x77cc
 8008bc6:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8008bc8:	4b55      	ldr	r3, [pc, #340]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8093 	beq.w	8008cfc <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	4a56      	ldr	r2, [pc, #344]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008bda:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	330e      	adds	r3, #14
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f7 fc7d 	bl	80004e8 <__aeabi_i2d>
 8008bee:	a346      	add	r3, pc, #280	; (adr r3, 8008d08 <MCU_ProcessModuleHardware+0x540>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 fce2 	bl	80005bc <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	a343      	add	r3, pc, #268	; (adr r3, 8008d10 <MCU_ProcessModuleHardware+0x548>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fb21 	bl	800024c <__aeabi_dsub>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7f7 ffcb 	bl	8000bac <__aeabi_d2f>
 8008c16:	4603      	mov	r3, r0
 8008c18:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	4a45      	ldr	r2, [pc, #276]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008c1e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	3310      	adds	r3, #16
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7f7 fc5b 	bl	80004e8 <__aeabi_i2d>
 8008c32:	a335      	add	r3, pc, #212	; (adr r3, 8008d08 <MCU_ProcessModuleHardware+0x540>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fcc0 	bl	80005bc <__aeabi_dmul>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4610      	mov	r0, r2
 8008c42:	4619      	mov	r1, r3
 8008c44:	a332      	add	r3, pc, #200	; (adr r3, 8008d10 <MCU_ProcessModuleHardware+0x548>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 faff 	bl	800024c <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4610      	mov	r0, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	f7f7 ffa9 	bl	8000bac <__aeabi_d2f>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	4a34      	ldr	r2, [pc, #208]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008c62:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3312      	adds	r3, #18
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f7 fc39 	bl	80004e8 <__aeabi_i2d>
 8008c76:	a328      	add	r3, pc, #160	; (adr r3, 8008d18 <MCU_ProcessModuleHardware+0x550>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 fc9e 	bl	80005bc <__aeabi_dmul>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4610      	mov	r0, r2
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	f7f7 fade 	bl	8000250 <__adddf3>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	f7f7 ff86 	bl	8000bac <__aeabi_d2f>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008ca4:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008cac:	469a      	mov	sl, r3
 8008cae:	6938      	ldr	r0, [r7, #16]
 8008cb0:	f7f7 fc2c 	bl	800050c <__aeabi_f2d>
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7f7 fc27 	bl	800050c <__aeabi_f2d>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4689      	mov	r9, r1
 8008cc2:	68b8      	ldr	r0, [r7, #8]
 8008cc4:	f7f7 fc22 	bl	800050c <__aeabi_f2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008ccc:	7df9      	ldrb	r1, [r7, #23]
 8008cce:	4819      	ldr	r0, [pc, #100]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008cd0:	f240 46c4 	movw	r6, #1220	; 0x4c4
 8008cd4:	fb06 f101 	mul.w	r1, r6, r1
 8008cd8:	4401      	add	r1, r0
 8008cda:	310c      	adds	r1, #12
 8008cdc:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008cde:	9106      	str	r1, [sp, #24]
 8008ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ce4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008ce8:	e9cd 4500 	strd	r4, r5, [sp]
 8008cec:	4652      	mov	r2, sl
 8008cee:	4916      	ldr	r1, [pc, #88]	; (8008d48 <MCU_ProcessModuleHardware+0x580>)
 8008cf0:	480f      	ldr	r0, [pc, #60]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008cf2:	f00a ffab 	bl	8013c4c <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008cf6:	480e      	ldr	r0, [pc, #56]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008cf8:	f7fc fb32 	bl	8005360 <serialOut>
}
 8008cfc:	bf00      	nop
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	bf00      	nop
 8008d08:	47ae147b 	.word	0x47ae147b
 8008d0c:	3f947ae1 	.word	0x3f947ae1
 8008d10:	47ae147b 	.word	0x47ae147b
 8008d14:	40847ae1 	.word	0x40847ae1
 8008d18:	eb851eb8 	.word	0xeb851eb8
 8008d1c:	3f8eb851 	.word	0x3f8eb851
 8008d20:	2000000c 	.word	0x2000000c
 8008d24:	20000d94 	.word	0x20000d94
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	080179dc 	.word	0x080179dc
 8008d30:	20000b64 	.word	0x20000b64
 8008d34:	20000de4 	.word	0x20000de4
 8008d38:	08017a24 	.word	0x08017a24
 8008d3c:	c2280000 	.word	0xc2280000
 8008d40:	c0450000 	.word	0xc0450000
 8008d44:	08017a6c 	.word	0x08017a6c
 8008d48:	08017ab8 	.word	0x08017ab8

08008d4c <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d58:	7d1b      	ldrb	r3, [r3, #20]
 8008d5a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]
 8008d60:	e010      	b.n	8008d84 <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	4a3e      	ldr	r2, [pc, #248]	; (8008e60 <MCU_RequestModuleStatus+0x114>)
 8008d66:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3308      	adds	r3, #8
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	79fa      	ldrb	r2, [r7, #7]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d101      	bne.n	8008d7e <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	3301      	adds	r3, #1
 8008d82:	73bb      	strb	r3, [r7, #14]
 8008d84:	4b35      	ldr	r3, [pc, #212]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d86:	7d1b      	ldrb	r3, [r3, #20]
 8008d88:	7bba      	ldrb	r2, [r7, #14]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d3e9      	bcc.n	8008d62 <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008d8e:	4b33      	ldr	r3, [pc, #204]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d90:	7d1b      	ldrb	r3, [r3, #20]
 8008d92:	7bfa      	ldrb	r2, [r7, #15]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d10d      	bne.n	8008db4 <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <MCU_RequestModuleStatus+0x118>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d156      	bne.n	8008e52 <MCU_RequestModuleStatus+0x106>
 8008da4:	4930      	ldr	r1, [pc, #192]	; (8008e68 <MCU_RequestModuleStatus+0x11c>)
 8008da6:	4831      	ldr	r0, [pc, #196]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008da8:	f00a ff50 	bl	8013c4c <siprintf>
 8008dac:	482f      	ldr	r0, [pc, #188]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008dae:	f7fc fad7 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008db2:	e04e      	b.n	8008e52 <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <MCU_RequestModuleStatus+0x114>)
 8008db8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008dce:	4b28      	ldr	r3, [pc, #160]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008dd4:	4b26      	ldr	r3, [pc, #152]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008dda:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8008de2:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <MCU_RequestModuleStatus+0x128>)
 8008de4:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8008de6:	4a22      	ldr	r2, [pc, #136]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008de8:	8813      	ldrh	r3, [r2, #0]
 8008dea:	f240 5112 	movw	r1, #1298	; 0x512
 8008dee:	f361 030a 	bfi	r3, r1, #0, #11
 8008df2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008dfa:	491d      	ldr	r1, [pc, #116]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dfc:	680b      	ldr	r3, [r1, #0]
 8008dfe:	f362 23dc 	bfi	r3, r2, #11, #18
 8008e02:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008e04:	4a1a      	ldr	r2, [pc, #104]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e06:	7913      	ldrb	r3, [r2, #4]
 8008e08:	f36f 1386 	bfc	r3, #6, #1
 8008e0c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008e0e:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e10:	7913      	ldrb	r3, [r2, #4]
 8008e12:	2101      	movs	r1, #1
 8008e14:	f361 0303 	bfi	r3, r1, #0, #4
 8008e18:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e1c:	7913      	ldrb	r3, [r2, #4]
 8008e1e:	f36f 13c7 	bfc	r3, #7, #1
 8008e22:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008e24:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e26:	7913      	ldrb	r3, [r2, #4]
 8008e28:	f043 0310 	orr.w	r3, r3, #16
 8008e2c:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <MCU_RequestModuleStatus+0x118>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <MCU_RequestModuleStatus+0x100>
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	490e      	ldr	r1, [pc, #56]	; (8008e78 <MCU_RequestModuleStatus+0x12c>)
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008e42:	f00a ff03 	bl	8013c4c <siprintf>
 8008e46:	4809      	ldr	r0, [pc, #36]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008e48:	f7fc fa8a 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f7ff f8e9 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	2000a664 	.word	0x2000a664
 8008e60:	20000de4 	.word	0x20000de4
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	08017b24 	.word	0x08017b24
 8008e6c:	20000b64 	.word	0x20000b64
 8008e70:	20000d38 	.word	0x20000d38
 8008e74:	20000d44 	.word	0x20000d44
 8008e78:	08017b64 	.word	0x08017b64

08008e7c <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8008e8a:	4b37      	ldr	r3, [pc, #220]	; (8008f68 <MCU_FindMaxVoltageModule+0xec>)
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8008e92:	2300      	movs	r3, #0
 8008e94:	71fb      	strb	r3, [r7, #7]
 8008e96:	e052      	b.n	8008f3e <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	4a34      	ldr	r2, [pc, #208]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008e9c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	88ba      	ldrh	r2, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d243      	bcs.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4a2e      	ldr	r2, [pc, #184]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008eb4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008ec2:	789b      	ldrb	r3, [r3, #2]
 8008ec4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d134      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	4a26      	ldr	r2, [pc, #152]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008ed2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008ee0:	789b      	ldrb	r3, [r3, #2]
 8008ee2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d125      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008ef0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	4a17      	ldr	r2, [pc, #92]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008f0e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f12:	fb01 f303 	mul.w	r3, r1, r3
 8008f16:	4413      	add	r3, r2
 8008f18:	3314      	adds	r3, #20
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008f22:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8008f32:	79bb      	ldrb	r3, [r7, #6]
 8008f34:	3301      	adds	r3, #1
 8008f36:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	71fb      	strb	r3, [r7, #7]
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <MCU_FindMaxVoltageModule+0xec>)
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3a7      	bcc.n	8008e98 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <MCU_FindMaxVoltageModule+0xdc>
 8008f4e:	79bb      	ldrb	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MCU_FindMaxVoltageModule+0xdc>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e000      	b.n	8008f5a <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000a664 	.word	0x2000a664
 8008f6c:	20000de4 	.word	0x20000de4

08008f70 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b09d      	sub	sp, #116	; 0x74
 8008f76:	af0a      	add	r7, sp, #40	; 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8008f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f009 fe51 	bl	8012c28 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8008f86:	4ab1      	ldr	r2, [pc, #708]	; (800924c <MCU_ProcessModuleStatus1+0x2dc>)
 8008f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f90:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008f94:	4bae      	ldr	r3, [pc, #696]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
 8008f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008fa2:	e01a      	b.n	8008fda <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8008fa4:	4bab      	ldr	r3, [pc, #684]	; (8009254 <MCU_ProcessModuleStatus1+0x2e4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008fac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fb0:	49a9      	ldr	r1, [pc, #676]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8008fb2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008fb6:	fb00 f303 	mul.w	r3, r0, r3
 8008fba:	440b      	add	r3, r1
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d103      	bne.n	8008fd0 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 8008fc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008fd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008fda:	4b9d      	ldr	r3, [pc, #628]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008fdc:	7d1b      	ldrb	r3, [r3, #20]
 8008fde:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d3de      	bcc.n	8008fa4 <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 8008fe6:	4b9a      	ldr	r3, [pc, #616]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008fe8:	7d1b      	ldrb	r3, [r3, #20]
 8008fea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d10e      	bne.n	8009010 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 8008ff2:	4b9a      	ldr	r3, [pc, #616]	; (800925c <MCU_ProcessModuleStatus1+0x2ec>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	f040 8222 	bne.w	8009444 <MCU_ProcessModuleStatus1+0x4d4>
 8009000:	4997      	ldr	r1, [pc, #604]	; (8009260 <MCU_ProcessModuleStatus1+0x2f0>)
 8009002:	4898      	ldr	r0, [pc, #608]	; (8009264 <MCU_ProcessModuleStatus1+0x2f4>)
 8009004:	f00a fe22 	bl	8013c4c <siprintf>
 8009008:	4896      	ldr	r0, [pc, #600]	; (8009264 <MCU_ProcessModuleStatus1+0x2f4>)
 800900a:	f7fc f9a9 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 800900e:	e219      	b.n	8009444 <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 8009010:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009014:	4a90      	ldr	r2, [pc, #576]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009016:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	4413      	add	r3, r2
 8009020:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8009028:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800902c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800902e:	4a8a      	ldr	r2, [pc, #552]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009030:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	4413      	add	r3, r2
 800903a:	3316      	adds	r3, #22
 800903c:	4602      	mov	r2, r0
 800903e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8009040:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009044:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8009046:	4a84      	ldr	r2, [pc, #528]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009048:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	4413      	add	r3, r2
 8009052:	3314      	adds	r3, #20
 8009054:	4602      	mov	r2, r0
 8009056:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8009058:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800905c:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8009060:	4a7d      	ldr	r2, [pc, #500]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009062:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	332b      	adds	r3, #43	; 0x2b
 800906e:	4602      	mov	r2, r0
 8009070:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8009072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009076:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800907a:	4a77      	ldr	r2, [pc, #476]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800907c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	4413      	add	r3, r2
 8009086:	332c      	adds	r3, #44	; 0x2c
 8009088:	4602      	mov	r2, r0
 800908a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800908c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009094:	b2da      	uxtb	r2, r3
 8009096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800909a:	4610      	mov	r0, r2
 800909c:	4a6e      	ldr	r2, [pc, #440]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800909e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	3327      	adds	r3, #39	; 0x27
 80090aa:	4602      	mov	r2, r0
 80090ac:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 80090ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090bc:	4610      	mov	r0, r2
 80090be:	4a66      	ldr	r2, [pc, #408]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090c0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	3326      	adds	r3, #38	; 0x26
 80090cc:	4602      	mov	r2, r0
 80090ce:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 80090d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090d4:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80090d8:	4a5f      	ldr	r2, [pc, #380]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090da:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	332d      	adds	r3, #45	; 0x2d
 80090e6:	4602      	mov	r2, r0
 80090e8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80090ea:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <MCU_ProcessModuleStatus1+0x2f8>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090f4:	4958      	ldr	r1, [pc, #352]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090f6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80090fa:	fb00 f303 	mul.w	r3, r0, r3
 80090fe:	440b      	add	r3, r1
 8009100:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009104:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009106:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800910a:	4a58      	ldr	r2, [pc, #352]	; (800926c <MCU_ProcessModuleStatus1+0x2fc>)
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	4952      	ldr	r1, [pc, #328]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009110:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009114:	fb00 f303 	mul.w	r3, r0, r3
 8009118:	440b      	add	r3, r1
 800911a:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800911e:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 8009120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009124:	4a4c      	ldr	r2, [pc, #304]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009126:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	4413      	add	r3, r2
 8009130:	3327      	adds	r3, #39	; 0x27
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009138:	4947      	ldr	r1, [pc, #284]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800913a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800913e:	fb00 f303 	mul.w	r3, r0, r3
 8009142:	440b      	add	r3, r1
 8009144:	3329      	adds	r3, #41	; 0x29
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d10a      	bne.n	8009162 <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 800914c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009150:	4a41      	ldr	r2, [pc, #260]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009152:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009156:	fb01 f303 	mul.w	r3, r1, r3
 800915a:	4413      	add	r3, r2
 800915c:	332a      	adds	r3, #42	; 0x2a
 800915e:	2201      	movs	r2, #1
 8009160:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <MCU_ProcessModuleStatus1+0x2ec>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 816a 	beq.w	8009444 <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 8009170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009174:	4a38      	ldr	r2, [pc, #224]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009176:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	3327      	adds	r3, #39	; 0x27
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d014      	beq.n	80091b2 <MCU_ProcessModuleStatus1+0x242>
 8009188:	2b03      	cmp	r3, #3
 800918a:	dc19      	bgt.n	80091c0 <MCU_ProcessModuleStatus1+0x250>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <MCU_ProcessModuleStatus1+0x226>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d007      	beq.n	80091a4 <MCU_ProcessModuleStatus1+0x234>
 8009194:	e014      	b.n	80091c0 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 8009196:	f107 031c 	add.w	r3, r7, #28
 800919a:	4935      	ldr	r1, [pc, #212]	; (8009270 <MCU_ProcessModuleStatus1+0x300>)
 800919c:	4618      	mov	r0, r3
 800919e:	f00a fd55 	bl	8013c4c <siprintf>
 80091a2:	e01f      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 80091a4:	f107 031c 	add.w	r3, r7, #28
 80091a8:	4932      	ldr	r1, [pc, #200]	; (8009274 <MCU_ProcessModuleStatus1+0x304>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00a fd4e 	bl	8013c4c <siprintf>
 80091b0:	e018      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 80091b2:	f107 031c 	add.w	r3, r7, #28
 80091b6:	4930      	ldr	r1, [pc, #192]	; (8009278 <MCU_ProcessModuleStatus1+0x308>)
 80091b8:	4618      	mov	r0, r3
 80091ba:	f00a fd47 	bl	8013c4c <siprintf>
 80091be:	e011      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 80091c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091c4:	4a24      	ldr	r2, [pc, #144]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80091c6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3327      	adds	r3, #39	; 0x27
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	f107 031c 	add.w	r3, r7, #28
 80091da:	4928      	ldr	r1, [pc, #160]	; (800927c <MCU_ProcessModuleStatus1+0x30c>)
 80091dc:	4618      	mov	r0, r3
 80091de:	f00a fd35 	bl	8013c4c <siprintf>
 80091e2:	bf00      	nop
      switch (module[moduleIndex].status){
 80091e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80091ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	3326      	adds	r3, #38	; 0x26
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d847      	bhi.n	800928c <MCU_ProcessModuleStatus1+0x31c>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <MCU_ProcessModuleStatus1+0x294>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009215 	.word	0x08009215
 8009208:	08009223 	.word	0x08009223
 800920c:	08009231 	.word	0x08009231
 8009210:	0800923f 	.word	0x0800923f
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	4915      	ldr	r1, [pc, #84]	; (8009270 <MCU_ProcessModuleStatus1+0x300>)
 800921a:	4618      	mov	r0, r3
 800921c:	f00a fd16 	bl	8013c4c <siprintf>
 8009220:	e046      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 8009222:	f107 030c 	add.w	r3, r7, #12
 8009226:	4916      	ldr	r1, [pc, #88]	; (8009280 <MCU_ProcessModuleStatus1+0x310>)
 8009228:	4618      	mov	r0, r3
 800922a:	f00a fd0f 	bl	8013c4c <siprintf>
 800922e:	e03f      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4913      	ldr	r1, [pc, #76]	; (8009284 <MCU_ProcessModuleStatus1+0x314>)
 8009236:	4618      	mov	r0, r3
 8009238:	f00a fd08 	bl	8013c4c <siprintf>
 800923c:	e038      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800923e:	f107 030c 	add.w	r3, r7, #12
 8009242:	4911      	ldr	r1, [pc, #68]	; (8009288 <MCU_ProcessModuleStatus1+0x318>)
 8009244:	4618      	mov	r0, r3
 8009246:	f00a fd01 	bl	8013c4c <siprintf>
 800924a:	e031      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
 800924c:	20000da0 	.word	0x20000da0
 8009250:	2000a664 	.word	0x2000a664
 8009254:	20000d94 	.word	0x20000d94
 8009258:	20000de4 	.word	0x20000de4
 800925c:	2000000c 	.word	0x2000000c
 8009260:	08017b8c 	.word	0x08017b8c
 8009264:	20000b64 	.word	0x20000b64
 8009268:	200005d8 	.word	0x200005d8
 800926c:	20000d20 	.word	0x20000d20
 8009270:	08017bcc 	.word	0x08017bcc
 8009274:	08017bd4 	.word	0x08017bd4
 8009278:	08017be0 	.word	0x08017be0
 800927c:	08017be8 	.word	0x08017be8
 8009280:	08017bf4 	.word	0x08017bf4
 8009284:	08017c00 	.word	0x08017c00
 8009288:	08017c0c 	.word	0x08017c0c
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800928c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009290:	4a75      	ldr	r2, [pc, #468]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 8009292:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009296:	fb01 f303 	mul.w	r3, r1, r3
 800929a:	4413      	add	r3, r2
 800929c:	3326      	adds	r3, #38	; 0x26
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	f107 030c 	add.w	r3, r7, #12
 80092a6:	4971      	ldr	r1, [pc, #452]	; (800946c <MCU_ProcessModuleStatus1+0x4fc>)
 80092a8:	4618      	mov	r0, r3
 80092aa:	f00a fccf 	bl	8013c4c <siprintf>
 80092ae:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 80092b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092b4:	4a6c      	ldr	r2, [pc, #432]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80092b6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4413      	add	r3, r2
 80092c0:	3314      	adds	r3, #20
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 f90f 	bl	80004e8 <__aeabi_i2d>
 80092ca:	a361      	add	r3, pc, #388	; (adr r3, 8009450 <MCU_ProcessModuleStatus1+0x4e0>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f7 f974 	bl	80005bc <__aeabi_dmul>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	f7f6 ffb4 	bl	8000250 <__adddf3>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	f7f7 fc5c 	bl	8000bac <__aeabi_d2f>
 80092f4:	4603      	mov	r3, r0
 80092f6:	643b      	str	r3, [r7, #64]	; 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 80092f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092fc:	4a5a      	ldr	r2, [pc, #360]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80092fe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	3316      	adds	r3, #22
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f7f7 f8eb 	bl	80004e8 <__aeabi_i2d>
 8009312:	a351      	add	r3, pc, #324	; (adr r3, 8009458 <MCU_ProcessModuleStatus1+0x4e8>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f7 f950 	bl	80005bc <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	a34e      	add	r3, pc, #312	; (adr r3, 8009460 <MCU_ProcessModuleStatus1+0x4f0>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ff8f 	bl	800024c <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fc39 	bl	8000bac <__aeabi_d2f>
 800933a:	4603      	mov	r3, r0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800933e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009342:	4a49      	ldr	r2, [pc, #292]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 8009344:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	332b      	adds	r3, #43	; 0x2b
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f7f7 f8c8 	bl	80004e8 <__aeabi_i2d>
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	4b44      	ldr	r3, [pc, #272]	; (8009470 <MCU_ProcessModuleStatus1+0x500>)
 800935e:	f7f7 f92d 	bl	80005bc <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4610      	mov	r0, r2
 8009368:	4619      	mov	r1, r3
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	f04f 0300 	mov.w	r3, #0
 8009372:	f7f6 ff6d 	bl	8000250 <__adddf3>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4610      	mov	r0, r2
 800937c:	4619      	mov	r1, r3
 800937e:	f7f7 fc15 	bl	8000bac <__aeabi_d2f>
 8009382:	4603      	mov	r3, r0
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 8009386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800938a:	4a37      	ldr	r2, [pc, #220]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 800938c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	332c      	adds	r3, #44	; 0x2c
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7f7 f8a4 	bl	80004e8 <__aeabi_i2d>
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	4b32      	ldr	r3, [pc, #200]	; (8009470 <MCU_ProcessModuleStatus1+0x500>)
 80093a6:	f7f7 f909 	bl	80005bc <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4610      	mov	r0, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	f7f6 ff49 	bl	8000250 <__adddf3>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4610      	mov	r0, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7f7 fbf1 	bl	8000bac <__aeabi_d2f>
 80093ca:	4603      	mov	r3, r0
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 80093ce:	4b29      	ldr	r3, [pc, #164]	; (8009474 <MCU_ProcessModuleStatus1+0x504>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 80093d6:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 80093d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093dc:	4a22      	ldr	r2, [pc, #136]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80093de:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	332d      	adds	r3, #45	; 0x2d
 80093ea:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 80093ec:	461e      	mov	r6, r3
 80093ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093f0:	f7f7 f88c 	bl	800050c <__aeabi_f2d>
 80093f4:	4604      	mov	r4, r0
 80093f6:	460d      	mov	r5, r1
 80093f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093fa:	f7f7 f887 	bl	800050c <__aeabi_f2d>
 80093fe:	4680      	mov	r8, r0
 8009400:	4689      	mov	r9, r1
 8009402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009404:	f7f7 f882 	bl	800050c <__aeabi_f2d>
 8009408:	4682      	mov	sl, r0
 800940a:	468b      	mov	fp, r1
 800940c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800940e:	f7f7 f87d 	bl	800050c <__aeabi_f2d>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	f107 011c 	add.w	r1, r7, #28
 800941a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800941e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009422:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009426:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800942a:	9601      	str	r6, [sp, #4]
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	460b      	mov	r3, r1
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4910      	ldr	r1, [pc, #64]	; (8009478 <MCU_ProcessModuleStatus1+0x508>)
 8009438:	4810      	ldr	r0, [pc, #64]	; (800947c <MCU_ProcessModuleStatus1+0x50c>)
 800943a:	f00a fc07 	bl	8013c4c <siprintf>
      serialOut(tempBuffer);
 800943e:	480f      	ldr	r0, [pc, #60]	; (800947c <MCU_ProcessModuleStatus1+0x50c>)
 8009440:	f7fb ff8e 	bl	8005360 <serialOut>
}
 8009444:	bf00      	nop
 8009446:	374c      	adds	r7, #76	; 0x4c
 8009448:	46bd      	mov	sp, r7
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	bf00      	nop
 8009450:	eb851eb8 	.word	0xeb851eb8
 8009454:	3f8eb851 	.word	0x3f8eb851
 8009458:	47ae147b 	.word	0x47ae147b
 800945c:	3f947ae1 	.word	0x3f947ae1
 8009460:	47ae147b 	.word	0x47ae147b
 8009464:	40847ae1 	.word	0x40847ae1
 8009468:	20000de4 	.word	0x20000de4
 800946c:	08017be8 	.word	0x08017be8
 8009470:	3fe00000 	.word	0x3fe00000
 8009474:	20000d94 	.word	0x20000d94
 8009478:	08017c14 	.word	0x08017c14
 800947c:	20000b64 	.word	0x20000b64

08009480 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b091      	sub	sp, #68	; 0x44
 8009486:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 8009488:	1d3b      	adds	r3, r7, #4
 800948a:	2208      	movs	r2, #8
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f009 fbca 	bl	8012c28 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 8009494:	4aaa      	ldr	r2, [pc, #680]	; (8009740 <MCU_ProcessModuleStatus2+0x2c0>)
 8009496:	1d3b      	adds	r3, r7, #4
 8009498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800949c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80094a0:	4ba8      	ldr	r3, [pc, #672]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094a2:	7d1b      	ldrb	r3, [r3, #20]
 80094a4:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 80094a6:	2300      	movs	r3, #0
 80094a8:	77bb      	strb	r3, [r7, #30]
 80094aa:	e015      	b.n	80094d8 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80094ac:	4ba6      	ldr	r3, [pc, #664]	; (8009748 <MCU_ProcessModuleStatus2+0x2c8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80094b4:	7fbb      	ldrb	r3, [r7, #30]
 80094b6:	49a5      	ldr	r1, [pc, #660]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 80094b8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80094bc:	fb00 f303 	mul.w	r3, r0, r3
 80094c0:	440b      	add	r3, r1
 80094c2:	3308      	adds	r3, #8
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d101      	bne.n	80094d2 <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 80094ce:	7fbb      	ldrb	r3, [r7, #30]
 80094d0:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 80094d2:	7fbb      	ldrb	r3, [r7, #30]
 80094d4:	3301      	adds	r3, #1
 80094d6:	77bb      	strb	r3, [r7, #30]
 80094d8:	4b9a      	ldr	r3, [pc, #616]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094da:	7d1b      	ldrb	r3, [r3, #20]
 80094dc:	7fba      	ldrb	r2, [r7, #30]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d3e4      	bcc.n	80094ac <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 80094e2:	4b98      	ldr	r3, [pc, #608]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094e4:	7d1b      	ldrb	r3, [r3, #20]
 80094e6:	7ffa      	ldrb	r2, [r7, #31]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d10e      	bne.n	800950a <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 80094ec:	4b98      	ldr	r3, [pc, #608]	; (8009750 <MCU_ProcessModuleStatus2+0x2d0>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	f040 8114 	bne.w	8009722 <MCU_ProcessModuleStatus2+0x2a2>
 80094fa:	4996      	ldr	r1, [pc, #600]	; (8009754 <MCU_ProcessModuleStatus2+0x2d4>)
 80094fc:	4896      	ldr	r0, [pc, #600]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 80094fe:	f00a fba5 	bl	8013c4c <siprintf>
 8009502:	4895      	ldr	r0, [pc, #596]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 8009504:	f7fb ff2c 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8009508:	e10b      	b.n	8009722 <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	4a8f      	ldr	r2, [pc, #572]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800950e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	4413      	add	r3, r2
 8009518:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	8938      	ldrh	r0, [r7, #8]
 8009524:	4a89      	ldr	r2, [pc, #548]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009526:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800952a:	fb01 f303 	mul.w	r3, r1, r3
 800952e:	4413      	add	r3, r2
 8009530:	3322      	adds	r3, #34	; 0x22
 8009532:	4602      	mov	r2, r0
 8009534:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 8009536:	7ffb      	ldrb	r3, [r7, #31]
 8009538:	88f8      	ldrh	r0, [r7, #6]
 800953a:	4a84      	ldr	r2, [pc, #528]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800953c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	4413      	add	r3, r2
 8009546:	331e      	adds	r3, #30
 8009548:	4602      	mov	r2, r0
 800954a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800954c:	7ffb      	ldrb	r3, [r7, #31]
 800954e:	88b8      	ldrh	r0, [r7, #4]
 8009550:	4a7e      	ldr	r2, [pc, #504]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009552:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	4413      	add	r3, r2
 800955c:	3320      	adds	r3, #32
 800955e:	4602      	mov	r2, r0
 8009560:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 8009562:	7ffb      	ldrb	r3, [r7, #31]
 8009564:	8978      	ldrh	r0, [r7, #10]
 8009566:	4a79      	ldr	r2, [pc, #484]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009568:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	3324      	adds	r3, #36	; 0x24
 8009574:	4602      	mov	r2, r0
 8009576:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009578:	4b78      	ldr	r3, [pc, #480]	; (800975c <MCU_ProcessModuleStatus2+0x2dc>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009580:	4972      	ldr	r1, [pc, #456]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009582:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009586:	fb00 f303 	mul.w	r3, r0, r3
 800958a:	440b      	add	r3, r1
 800958c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009590:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009592:	7ffb      	ldrb	r3, [r7, #31]
 8009594:	4a72      	ldr	r2, [pc, #456]	; (8009760 <MCU_ProcessModuleStatus2+0x2e0>)
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	496c      	ldr	r1, [pc, #432]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800959a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800959e:	fb00 f303 	mul.w	r3, r0, r3
 80095a2:	440b      	add	r3, r1
 80095a4:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80095a8:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80095aa:	4b69      	ldr	r3, [pc, #420]	; (8009750 <MCU_ProcessModuleStatus2+0x2d0>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80b5 	beq.w	8009722 <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	4a64      	ldr	r2, [pc, #400]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 80095bc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	3322      	adds	r3, #34	; 0x22
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f6 ff8c 	bl	80004e8 <__aeabi_i2d>
 80095d0:	a357      	add	r3, pc, #348	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fff1 	bl	80005bc <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	f7f6 fe31 	bl	8000250 <__adddf3>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7f7 fad9 	bl	8000bac <__aeabi_d2f>
 80095fa:	4603      	mov	r3, r0
 80095fc:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 80095fe:	7ffb      	ldrb	r3, [r7, #31]
 8009600:	4a52      	ldr	r2, [pc, #328]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009602:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	331e      	adds	r3, #30
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f7f6 ff69 	bl	80004e8 <__aeabi_i2d>
 8009616:	a346      	add	r3, pc, #280	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f6 ffce 	bl	80005bc <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4610      	mov	r0, r2
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	f7f6 fe0e 	bl	8000250 <__adddf3>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4610      	mov	r0, r2
 800963a:	4619      	mov	r1, r3
 800963c:	f7f7 fab6 	bl	8000bac <__aeabi_d2f>
 8009640:	4603      	mov	r3, r0
 8009642:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 8009644:	7ffb      	ldrb	r3, [r7, #31]
 8009646:	4a41      	ldr	r2, [pc, #260]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009648:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	4413      	add	r3, r2
 8009652:	3320      	adds	r3, #32
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 ff46 	bl	80004e8 <__aeabi_i2d>
 800965c:	a334      	add	r3, pc, #208	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f7f6 ffab 	bl	80005bc <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	f7f6 fdeb 	bl	8000250 <__adddf3>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	f7f7 fa93 	bl	8000bac <__aeabi_d2f>
 8009686:	4603      	mov	r3, r0
 8009688:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800968a:	7ffb      	ldrb	r3, [r7, #31]
 800968c:	4a2f      	ldr	r2, [pc, #188]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800968e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3324      	adds	r3, #36	; 0x24
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7f6 ff23 	bl	80004e8 <__aeabi_i2d>
 80096a2:	a325      	add	r3, pc, #148	; (adr r3, 8009738 <MCU_ProcessModuleStatus2+0x2b8>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ff88 	bl	80005bc <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4610      	mov	r0, r2
 80096b2:	4619      	mov	r1, r3
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	f7f6 fdc8 	bl	8000250 <__adddf3>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa70 	bl	8000bac <__aeabi_d2f>
 80096cc:	4603      	mov	r3, r0
 80096ce:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <MCU_ProcessModuleStatus2+0x2c8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 80096d8:	461e      	mov	r6, r3
 80096da:	69b8      	ldr	r0, [r7, #24]
 80096dc:	f7f6 ff16 	bl	800050c <__aeabi_f2d>
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	f7f6 ff11 	bl	800050c <__aeabi_f2d>
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f7f6 ff0c 	bl	800050c <__aeabi_f2d>
 80096f4:	4682      	mov	sl, r0
 80096f6:	468b      	mov	fp, r1
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7f6 ff07 	bl	800050c <__aeabi_f2d>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009706:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800970a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800970e:	e9cd 4500 	strd	r4, r5, [sp]
 8009712:	4632      	mov	r2, r6
 8009714:	4913      	ldr	r1, [pc, #76]	; (8009764 <MCU_ProcessModuleStatus2+0x2e4>)
 8009716:	4810      	ldr	r0, [pc, #64]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 8009718:	f00a fa98 	bl	8013c4c <siprintf>
      serialOut(tempBuffer);
 800971c:	480e      	ldr	r0, [pc, #56]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 800971e:	f7fb fe1f 	bl	8005360 <serialOut>
}
 8009722:	bf00      	nop
 8009724:	3724      	adds	r7, #36	; 0x24
 8009726:	46bd      	mov	sp, r7
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	f3af 8000 	nop.w
 8009730:	d2f1a9fc 	.word	0xd2f1a9fc
 8009734:	3f50624d 	.word	0x3f50624d
 8009738:	eb851eb8 	.word	0xeb851eb8
 800973c:	3f8eb851 	.word	0x3f8eb851
 8009740:	20000da0 	.word	0x20000da0
 8009744:	2000a664 	.word	0x2000a664
 8009748:	20000d94 	.word	0x20000d94
 800974c:	20000de4 	.word	0x20000de4
 8009750:	2000000c 	.word	0x2000000c
 8009754:	08017c94 	.word	0x08017c94
 8009758:	20000b64 	.word	0x20000b64
 800975c:	200005d8 	.word	0x200005d8
 8009760:	20000d20 	.word	0x20000d20
 8009764:	08017cd4 	.word	0x08017cd4

08009768 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 8009768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800976c:	b08d      	sub	sp, #52	; 0x34
 800976e:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 8009770:	463b      	mov	r3, r7
 8009772:	2208      	movs	r2, #8
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f009 fa56 	bl	8012c28 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800977c:	4a8e      	ldr	r2, [pc, #568]	; (80099b8 <MCU_ProcessModuleStatus3+0x250>)
 800977e:	463b      	mov	r3, r7
 8009780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009784:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009788:	4b8c      	ldr	r3, [pc, #560]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 800978a:	7d1b      	ldrb	r3, [r3, #20]
 800978c:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800978e:	2300      	movs	r3, #0
 8009790:	75bb      	strb	r3, [r7, #22]
 8009792:	e015      	b.n	80097c0 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009794:	4b8a      	ldr	r3, [pc, #552]	; (80099c0 <MCU_ProcessModuleStatus3+0x258>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800979c:	7dbb      	ldrb	r3, [r7, #22]
 800979e:	4989      	ldr	r1, [pc, #548]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80097a0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80097a4:	fb00 f303 	mul.w	r3, r0, r3
 80097a8:	440b      	add	r3, r1
 80097aa:	3308      	adds	r3, #8
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d101      	bne.n	80097ba <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 80097b6:	7dbb      	ldrb	r3, [r7, #22]
 80097b8:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80097ba:	7dbb      	ldrb	r3, [r7, #22]
 80097bc:	3301      	adds	r3, #1
 80097be:	75bb      	strb	r3, [r7, #22]
 80097c0:	4b7e      	ldr	r3, [pc, #504]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 80097c2:	7d1b      	ldrb	r3, [r3, #20]
 80097c4:	7dba      	ldrb	r2, [r7, #22]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d3e4      	bcc.n	8009794 <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 80097ca:	4b7c      	ldr	r3, [pc, #496]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 80097cc:	7d1b      	ldrb	r3, [r3, #20]
 80097ce:	7dfa      	ldrb	r2, [r7, #23]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d10e      	bne.n	80097f2 <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 80097d4:	4b7c      	ldr	r3, [pc, #496]	; (80099c8 <MCU_ProcessModuleStatus3+0x260>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	2b03      	cmp	r3, #3
 80097de:	f040 80dc 	bne.w	800999a <MCU_ProcessModuleStatus3+0x232>
 80097e2:	497a      	ldr	r1, [pc, #488]	; (80099cc <MCU_ProcessModuleStatus3+0x264>)
 80097e4:	487a      	ldr	r0, [pc, #488]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 80097e6:	f00a fa31 	bl	8013c4c <siprintf>
 80097ea:	4879      	ldr	r0, [pc, #484]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 80097ec:	f7fb fdb8 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 80097f0:	e0d3      	b.n	800999a <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	4a73      	ldr	r2, [pc, #460]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80097f6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	88b8      	ldrh	r0, [r7, #4]
 800980c:	4a6d      	ldr	r2, [pc, #436]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800980e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009812:	fb01 f303 	mul.w	r3, r1, r3
 8009816:	4413      	add	r3, r2
 8009818:	331c      	adds	r3, #28
 800981a:	4602      	mov	r2, r0
 800981c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	8878      	ldrh	r0, [r7, #2]
 8009822:	4a68      	ldr	r2, [pc, #416]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009824:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009828:	fb01 f303 	mul.w	r3, r1, r3
 800982c:	4413      	add	r3, r2
 800982e:	3318      	adds	r3, #24
 8009830:	4602      	mov	r2, r0
 8009832:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	8838      	ldrh	r0, [r7, #0]
 8009838:	4a62      	ldr	r2, [pc, #392]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800983a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	331a      	adds	r3, #26
 8009846:	4602      	mov	r2, r0
 8009848:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800984a:	4b62      	ldr	r3, [pc, #392]	; (80099d4 <MCU_ProcessModuleStatus3+0x26c>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009852:	495c      	ldr	r1, [pc, #368]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009854:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009858:	fb00 f303 	mul.w	r3, r0, r3
 800985c:	440b      	add	r3, r1
 800985e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009862:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	4a5c      	ldr	r2, [pc, #368]	; (80099d8 <MCU_ProcessModuleStatus3+0x270>)
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	4956      	ldr	r1, [pc, #344]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800986c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009870:	fb00 f303 	mul.w	r3, r0, r3
 8009874:	440b      	add	r3, r1
 8009876:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800987a:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800987c:	4b52      	ldr	r3, [pc, #328]	; (80099c8 <MCU_ProcessModuleStatus3+0x260>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8088 	beq.w	800999a <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	4a4d      	ldr	r2, [pc, #308]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800988e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	331c      	adds	r3, #28
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	4618      	mov	r0, r3
 800989e:	f7f6 fe23 	bl	80004e8 <__aeabi_i2d>
 80098a2:	a341      	add	r3, pc, #260	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f6 fe88 	bl	80005bc <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4610      	mov	r0, r2
 80098b2:	4619      	mov	r1, r3
 80098b4:	a33e      	add	r3, pc, #248	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 fcc7 	bl	800024c <__aeabi_dsub>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f7 f971 	bl	8000bac <__aeabi_d2f>
 80098ca:	4603      	mov	r3, r0
 80098cc:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	4a3c      	ldr	r2, [pc, #240]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80098d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	4413      	add	r3, r2
 80098dc:	3318      	adds	r3, #24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f6 fe01 	bl	80004e8 <__aeabi_i2d>
 80098e6:	a330      	add	r3, pc, #192	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fe66 	bl	80005bc <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	a32d      	add	r3, pc, #180	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fca5 	bl	800024c <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	f7f7 f94f 	bl	8000bac <__aeabi_d2f>
 800990e:	4603      	mov	r3, r0
 8009910:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	4a2b      	ldr	r2, [pc, #172]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009916:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	331a      	adds	r3, #26
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7f6 fddf 	bl	80004e8 <__aeabi_i2d>
 800992a:	a31f      	add	r3, pc, #124	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f6 fe44 	bl	80005bc <__aeabi_dmul>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4610      	mov	r0, r2
 800993a:	4619      	mov	r1, r3
 800993c:	a31c      	add	r3, pc, #112	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fc83 	bl	800024c <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	f7f7 f92d 	bl	8000bac <__aeabi_d2f>
 8009952:	4603      	mov	r3, r0
 8009954:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 8009956:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <MCU_ProcessModuleStatus3+0x258>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800995e:	461e      	mov	r6, r3
 8009960:	6938      	ldr	r0, [r7, #16]
 8009962:	f7f6 fdd3 	bl	800050c <__aeabi_f2d>
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7f6 fdce 	bl	800050c <__aeabi_f2d>
 8009970:	4680      	mov	r8, r0
 8009972:	4689      	mov	r9, r1
 8009974:	68b8      	ldr	r0, [r7, #8]
 8009976:	f7f6 fdc9 	bl	800050c <__aeabi_f2d>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009982:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009986:	e9cd 4500 	strd	r4, r5, [sp]
 800998a:	4632      	mov	r2, r6
 800998c:	4913      	ldr	r1, [pc, #76]	; (80099dc <MCU_ProcessModuleStatus3+0x274>)
 800998e:	4810      	ldr	r0, [pc, #64]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 8009990:	f00a f95c 	bl	8013c4c <siprintf>
      serialOut(tempBuffer);
 8009994:	480e      	ldr	r0, [pc, #56]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 8009996:	f7fb fce3 	bl	8005360 <serialOut>
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099a4:	f3af 8000 	nop.w
 80099a8:	47ae147b 	.word	0x47ae147b
 80099ac:	3f847ae1 	.word	0x3f847ae1
 80099b0:	cccccccd 	.word	0xcccccccd
 80099b4:	404baccc 	.word	0x404baccc
 80099b8:	20000da0 	.word	0x20000da0
 80099bc:	2000a664 	.word	0x2000a664
 80099c0:	20000d94 	.word	0x20000d94
 80099c4:	20000de4 	.word	0x20000de4
 80099c8:	2000000c 	.word	0x2000000c
 80099cc:	08017d64 	.word	0x08017d64
 80099d0:	20000b64 	.word	0x20000b64
 80099d4:	200005d8 	.word	0x200005d8
 80099d8:	20000d20 	.word	0x20000d20
 80099dc:	08017da4 	.word	0x08017da4

080099e0 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b094      	sub	sp, #80	; 0x50
 80099e4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 80099e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099ea:	2208      	movs	r2, #8
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f009 f91a 	bl	8012c28 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 80099f4:	4a31      	ldr	r2, [pc, #196]	; (8009abc <MCU_ProcessCellCommStatus1+0xdc>)
 80099f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099fe:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 8009a02:	4b2f      	ldr	r3, [pc, #188]	; (8009ac0 <MCU_ProcessCellCommStatus1+0xe0>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d052      	beq.n	8009ab4 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009a0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a12:	2bff      	cmp	r3, #255	; 0xff
 8009a14:	d10a      	bne.n	8009a2c <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 8009a16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 8009a1e:	f107 0318 	add.w	r3, r7, #24
 8009a22:	4928      	ldr	r1, [pc, #160]	; (8009ac4 <MCU_ProcessCellCommStatus1+0xe4>)
 8009a24:	4618      	mov	r0, r3
 8009a26:	f00a f911 	bl	8013c4c <siprintf>
 8009a2a:	e019      	b.n	8009a60 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 8009a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d109      	bne.n	8009a4c <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 8009a38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f107 0318 	add.w	r3, r7, #24
 8009a42:	4921      	ldr	r1, [pc, #132]	; (8009ac8 <MCU_ProcessCellCommStatus1+0xe8>)
 8009a44:	4618      	mov	r0, r3
 8009a46:	f00a f901 	bl	8013c4c <siprintf>
 8009a4a:	e009      	b.n	8009a60 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 8009a4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a50:	461a      	mov	r2, r3
 8009a52:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009a56:	f107 0018 	add.w	r0, r7, #24
 8009a5a:	491c      	ldr	r1, [pc, #112]	; (8009acc <MCU_ProcessCellCommStatus1+0xec>)
 8009a5c:	f00a f8f6 	bl	8013c4c <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 8009a60:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009a64:	2bff      	cmp	r3, #255	; 0xff
 8009a66:	d105      	bne.n	8009a74 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 8009a68:	1d3b      	adds	r3, r7, #4
 8009a6a:	4919      	ldr	r1, [pc, #100]	; (8009ad0 <MCU_ProcessCellCommStatus1+0xf0>)
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f00a f8ed 	bl	8013c4c <siprintf>
 8009a72:	e007      	b.n	8009a84 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 8009a74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009a78:	461a      	mov	r2, r3
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	4915      	ldr	r1, [pc, #84]	; (8009ad4 <MCU_ProcessCellCommStatus1+0xf4>)
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f00a f8e4 	bl	8013c4c <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a84:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <MCU_ProcessCellCommStatus1+0xf8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a8c:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a90:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a96:	f107 0218 	add.w	r2, r7, #24
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	1d3b      	adds	r3, r7, #4
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	9100      	str	r1, [sp, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	490d      	ldr	r1, [pc, #52]	; (8009adc <MCU_ProcessCellCommStatus1+0xfc>)
 8009aa8:	480d      	ldr	r0, [pc, #52]	; (8009ae0 <MCU_ProcessCellCommStatus1+0x100>)
 8009aaa:	f00a f8cf 	bl	8013c4c <siprintf>

    serialOut(tempBuffer);
 8009aae:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <MCU_ProcessCellCommStatus1+0x100>)
 8009ab0:	f7fb fc56 	bl	8005360 <serialOut>
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	3740      	adds	r7, #64	; 0x40
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000da0 	.word	0x20000da0
 8009ac0:	2000000c 	.word	0x2000000c
 8009ac4:	08017e10 	.word	0x08017e10
 8009ac8:	08017e1c 	.word	0x08017e1c
 8009acc:	08017e28 	.word	0x08017e28
 8009ad0:	08017e34 	.word	0x08017e34
 8009ad4:	08017e3c 	.word	0x08017e3c
 8009ad8:	20000d94 	.word	0x20000d94
 8009adc:	08017e50 	.word	0x08017e50
 8009ae0:	20000b64 	.word	0x20000b64
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 8009ae8:	b5b0      	push	{r4, r5, r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	4603      	mov	r3, r0
 8009af0:	460a      	mov	r2, r1
 8009af2:	71fb      	strb	r3, [r7, #7]
 8009af4:	4613      	mov	r3, r2
 8009af6:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 8009afc:	79bb      	ldrb	r3, [r7, #6]
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	7a7b      	ldrb	r3, [r7, #9]
 8009b06:	f362 0303 	bfi	r3, r2, #0, #4
 8009b0a:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 8009b0c:	7a7b      	ldrb	r3, [r7, #9]
 8009b0e:	f36f 1307 	bfc	r3, #4, #4
 8009b12:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 8009b14:	4b4c      	ldr	r3, [pc, #304]	; (8009c48 <MCU_TransmitState+0x160>)
 8009b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 8009b1c:	4b4b      	ldr	r3, [pc, #300]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8009b22:	4b4a      	ldr	r3, [pc, #296]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009b28:	4b48      	ldr	r3, [pc, #288]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]
 8009b2e:	68bb      	ldr	r3, [r7, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 8009b30:	4a47      	ldr	r2, [pc, #284]	; (8009c50 <MCU_TransmitState+0x168>)
 8009b32:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 8009b34:	4a45      	ldr	r2, [pc, #276]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b36:	8813      	ldrh	r3, [r2, #0]
 8009b38:	f240 5114 	movw	r1, #1300	; 0x514
 8009b3c:	f361 030a 	bfi	r3, r1, #0, #11
 8009b40:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 8009b42:	79fa      	ldrb	r2, [r7, #7]
 8009b44:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009b48:	4940      	ldr	r1, [pc, #256]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b4a:	680b      	ldr	r3, [r1, #0]
 8009b4c:	f362 23dc 	bfi	r3, r2, #11, #18
 8009b50:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009b52:	4a3e      	ldr	r2, [pc, #248]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b54:	7913      	ldrb	r3, [r2, #4]
 8009b56:	f36f 1386 	bfc	r3, #6, #1
 8009b5a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 8009b5c:	4a3b      	ldr	r2, [pc, #236]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b5e:	7913      	ldrb	r3, [r2, #4]
 8009b60:	2104      	movs	r1, #4
 8009b62:	f361 0303 	bfi	r3, r1, #0, #4
 8009b66:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009b68:	4a38      	ldr	r2, [pc, #224]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b6a:	7913      	ldrb	r3, [r2, #4]
 8009b6c:	f36f 13c7 	bfc	r3, #7, #1
 8009b70:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009b72:	4a36      	ldr	r2, [pc, #216]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b74:	7913      	ldrb	r3, [r2, #4]
 8009b76:	f043 0310 	orr.w	r3, r3, #16
 8009b7a:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 8009b7c:	4b35      	ldr	r3, [pc, #212]	; (8009c54 <MCU_TransmitState+0x16c>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d019      	beq.n	8009bbc <MCU_TransmitState+0xd4>
 8009b88:	79fc      	ldrb	r4, [r7, #7]
 8009b8a:	79bd      	ldrb	r5, [r7, #6]
 8009b8c:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <MCU_TransmitState+0x160>)
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7f6 fca8 	bl	80004e8 <__aeabi_i2d>
 8009b98:	a329      	add	r3, pc, #164	; (adr r3, 8009c40 <MCU_TransmitState+0x158>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fd0d 	bl	80005bc <__aeabi_dmul>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8009baa:	462b      	mov	r3, r5
 8009bac:	4622      	mov	r2, r4
 8009bae:	492a      	ldr	r1, [pc, #168]	; (8009c58 <MCU_TransmitState+0x170>)
 8009bb0:	482a      	ldr	r0, [pc, #168]	; (8009c5c <MCU_TransmitState+0x174>)
 8009bb2:	f00a f84b 	bl	8013c4c <siprintf>
 8009bb6:	4829      	ldr	r0, [pc, #164]	; (8009c5c <MCU_TransmitState+0x174>)
 8009bb8:	f7fb fbd2 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7fe fa31 	bl	8008024 <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f979 	bl	8009ebc <MCU_ModuleIndexFromId>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 8009bce:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <MCU_TransmitState+0x160>)
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
 8009bd2:	7bfa      	ldrb	r2, [r7, #15]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d02c      	beq.n	8009c32 <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <MCU_TransmitState+0x178>)
 8009bdc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	3329      	adds	r3, #41	; 0x29
 8009be8:	79ba      	ldrb	r2, [r7, #6]
 8009bea:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <MCU_TransmitState+0x178>)
 8009bf0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	332a      	adds	r3, #42	; 0x2a
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 8009c00:	4b18      	ldr	r3, [pc, #96]	; (8009c64 <MCU_TransmitState+0x17c>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c08:	4915      	ldr	r1, [pc, #84]	; (8009c60 <MCU_TransmitState+0x178>)
 8009c0a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009c0e:	fb00 f303 	mul.w	r3, r0, r3
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009c18:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	4a12      	ldr	r2, [pc, #72]	; (8009c68 <MCU_TransmitState+0x180>)
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	490f      	ldr	r1, [pc, #60]	; (8009c60 <MCU_TransmitState+0x178>)
 8009c22:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009c26:	fb00 f303 	mul.w	r3, r0, r3
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8009c30:	601a      	str	r2, [r3, #0]
  }
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bdb0      	pop	{r4, r5, r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	eb851eb8 	.word	0xeb851eb8
 8009c44:	3f8eb851 	.word	0x3f8eb851
 8009c48:	2000a664 	.word	0x2000a664
 8009c4c:	20000d38 	.word	0x20000d38
 8009c50:	20000d44 	.word	0x20000d44
 8009c54:	2000000c 	.word	0x2000000c
 8009c58:	08017ed4 	.word	0x08017ed4
 8009c5c:	20000b64 	.word	0x20000b64
 8009c60:	20000de4 	.word	0x20000de4
 8009c64:	200005d8 	.word	0x200005d8
 8009c68:	20000d20 	.word	0x20000d20

08009c6c <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 8009c76:	4a85      	ldr	r2, [pc, #532]	; (8009e8c <MCU_ProcessCellDetail+0x220>)
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c7e:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 8009c82:	4b83      	ldr	r3, [pc, #524]	; (8009e90 <MCU_ProcessCellDetail+0x224>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d017      	beq.n	8009cbe <MCU_ProcessCellDetail+0x52>
 8009c8e:	4b81      	ldr	r3, [pc, #516]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009c96:	461c      	mov	r4, r3
 8009c98:	797b      	ldrb	r3, [r7, #5]
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	793b      	ldrb	r3, [r7, #4]
 8009c9e:	7aba      	ldrb	r2, [r7, #10]
 8009ca0:	88f9      	ldrh	r1, [r7, #6]
 8009ca2:	8938      	ldrh	r0, [r7, #8]
 8009ca4:	9003      	str	r0, [sp, #12]
 8009ca6:	9102      	str	r1, [sp, #8]
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	462b      	mov	r3, r5
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4979      	ldr	r1, [pc, #484]	; (8009e98 <MCU_ProcessCellDetail+0x22c>)
 8009cb2:	487a      	ldr	r0, [pc, #488]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009cb4:	f009 ffca 	bl	8013c4c <siprintf>
 8009cb8:	4878      	ldr	r0, [pc, #480]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009cba:	f7fb fb51 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8009cbe:	4b78      	ldr	r3, [pc, #480]	; (8009ea0 <MCU_ProcessCellDetail+0x234>)
 8009cc0:	7d1b      	ldrb	r3, [r3, #20]
 8009cc2:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	75bb      	strb	r3, [r7, #22]
 8009cc8:	e015      	b.n	8009cf6 <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009cca:	4b72      	ldr	r3, [pc, #456]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009cd2:	7dbb      	ldrb	r3, [r7, #22]
 8009cd4:	4973      	ldr	r1, [pc, #460]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009cd6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009cda:	fb00 f303 	mul.w	r3, r0, r3
 8009cde:	440b      	add	r3, r1
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d101      	bne.n	8009cf0 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 8009cec:	7dbb      	ldrb	r3, [r7, #22]
 8009cee:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	75bb      	strb	r3, [r7, #22]
 8009cf6:	4b6a      	ldr	r3, [pc, #424]	; (8009ea0 <MCU_ProcessCellDetail+0x234>)
 8009cf8:	7d1b      	ldrb	r3, [r3, #20]
 8009cfa:	7dba      	ldrb	r2, [r7, #22]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d3e4      	bcc.n	8009cca <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	7978      	ldrb	r0, [r7, #5]
 8009d04:	4a67      	ldr	r2, [pc, #412]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d06:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	4413      	add	r3, r2
 8009d10:	332d      	adds	r3, #45	; 0x2d
 8009d12:	4602      	mov	r2, r0
 8009d14:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 8009d16:	7dfa      	ldrb	r2, [r7, #23]
 8009d18:	793b      	ldrb	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	7abc      	ldrb	r4, [r7, #10]
 8009d1e:	4961      	ldr	r1, [pc, #388]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d20:	4603      	mov	r3, r0
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	4403      	add	r3, r0
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d2c:	fb00 f202 	mul.w	r2, r0, r2
 8009d30:	4413      	add	r3, r2
 8009d32:	440b      	add	r3, r1
 8009d34:	3332      	adds	r3, #50	; 0x32
 8009d36:	4622      	mov	r2, r4
 8009d38:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 8009d3a:	7dfa      	ldrb	r2, [r7, #23]
 8009d3c:	793b      	ldrb	r3, [r7, #4]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	7afc      	ldrb	r4, [r7, #11]
 8009d42:	4958      	ldr	r1, [pc, #352]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d44:	4603      	mov	r3, r0
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	4403      	add	r3, r0
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d50:	fb00 f202 	mul.w	r2, r0, r2
 8009d54:	4413      	add	r3, r2
 8009d56:	440b      	add	r3, r1
 8009d58:	3333      	adds	r3, #51	; 0x33
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8009d5e:	7dfa      	ldrb	r2, [r7, #23]
 8009d60:	793b      	ldrb	r3, [r7, #4]
 8009d62:	4618      	mov	r0, r3
 8009d64:	88fc      	ldrh	r4, [r7, #6]
 8009d66:	494f      	ldr	r1, [pc, #316]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d68:	4603      	mov	r3, r0
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	4403      	add	r3, r0
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d74:	fb00 f202 	mul.w	r2, r0, r2
 8009d78:	4413      	add	r3, r2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3330      	adds	r3, #48	; 0x30
 8009d7e:	4622      	mov	r2, r4
 8009d80:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 8009d82:	7dfa      	ldrb	r2, [r7, #23]
 8009d84:	793b      	ldrb	r3, [r7, #4]
 8009d86:	4618      	mov	r0, r3
 8009d88:	893c      	ldrh	r4, [r7, #8]
 8009d8a:	4946      	ldr	r1, [pc, #280]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	4403      	add	r3, r0
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d98:	fb00 f202 	mul.w	r2, r0, r2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	440b      	add	r3, r1
 8009da0:	332e      	adds	r3, #46	; 0x2e
 8009da2:	4622      	mov	r2, r4
 8009da4:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <MCU_ProcessCellDetail+0x23c>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dae:	493d      	ldr	r1, [pc, #244]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009db0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009db4:	fb00 f303 	mul.w	r3, r0, r3
 8009db8:	440b      	add	r3, r1
 8009dba:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009dbe:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	4a3a      	ldr	r2, [pc, #232]	; (8009eac <MCU_ProcessCellDetail+0x240>)
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	4937      	ldr	r1, [pc, #220]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009dc8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009dcc:	fb00 f303 	mul.w	r3, r0, r3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009dd6:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8009dd8:	793b      	ldrb	r3, [r7, #4]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	797b      	ldrb	r3, [r7, #5]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	429a      	cmp	r2, r3
 8009de2:	da4f      	bge.n	8009e84 <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 8009de4:	793b      	ldrb	r3, [r7, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8009dec:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009df8:	4b2d      	ldr	r3, [pc, #180]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 8009dfe:	4b2d      	ldr	r3, [pc, #180]	; (8009eb4 <MCU_ProcessCellDetail+0x248>)
 8009e00:	461a      	mov	r2, r3
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e0a:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 8009e0e:	4a28      	ldr	r2, [pc, #160]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e10:	8813      	ldrh	r3, [r2, #0]
 8009e12:	f240 5115 	movw	r1, #1301	; 0x515
 8009e16:	f361 030a 	bfi	r3, r1, #0, #11
 8009e1a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 8009e1c:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 8009e24:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	f361 23dc 	bfi	r3, r1, #11, #18
 8009e2c:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009e2e:	4a20      	ldr	r2, [pc, #128]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e30:	7913      	ldrb	r3, [r2, #4]
 8009e32:	f36f 1386 	bfc	r3, #6, #1
 8009e36:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 8009e38:	4a1d      	ldr	r2, [pc, #116]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e3a:	7913      	ldrb	r3, [r2, #4]
 8009e3c:	2102      	movs	r1, #2
 8009e3e:	f361 0303 	bfi	r3, r1, #0, #4
 8009e42:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009e44:	4a1a      	ldr	r2, [pc, #104]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e46:	7913      	ldrb	r3, [r2, #4]
 8009e48:	f36f 13c7 	bfc	r3, #7, #1
 8009e4c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009e4e:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e50:	7913      	ldrb	r3, [r2, #4]
 8009e52:	f043 0310 	orr.w	r3, r3, #16
 8009e56:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8009e58:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <MCU_ProcessCellDetail+0x224>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <MCU_ProcessCellDetail+0x212>
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	4911      	ldr	r1, [pc, #68]	; (8009eb8 <MCU_ProcessCellDetail+0x24c>)
 8009e72:	480a      	ldr	r0, [pc, #40]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009e74:	f009 feea 	bl	8013c4c <siprintf>
 8009e78:	4808      	ldr	r0, [pc, #32]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009e7a:	f7fb fa71 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f7fe f8d0 	bl	8008024 <MCU_TransmitMessageQueue>
  }
}
 8009e84:	bf00      	nop
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e8c:	20000da0 	.word	0x20000da0
 8009e90:	2000000c 	.word	0x2000000c
 8009e94:	20000d94 	.word	0x20000d94
 8009e98:	08017f0c 	.word	0x08017f0c
 8009e9c:	20000b64 	.word	0x20000b64
 8009ea0:	2000a664 	.word	0x2000a664
 8009ea4:	20000de4 	.word	0x20000de4
 8009ea8:	200005d8 	.word	0x200005d8
 8009eac:	20000d20 	.word	0x20000d20
 8009eb0:	20000d38 	.word	0x20000d38
 8009eb4:	20000d44 	.word	0x20000d44
 8009eb8:	08017f68 	.word	0x08017f68

08009ebc <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009ec8:	7d1b      	ldrb	r3, [r3, #20]
 8009eca:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]
 8009ed0:	e010      	b.n	8009ef4 <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	4a12      	ldr	r2, [pc, #72]	; (8009f20 <MCU_ModuleIndexFromId+0x64>)
 8009ed6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009eda:	fb01 f303 	mul.w	r3, r1, r3
 8009ede:	4413      	add	r3, r2
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	79fa      	ldrb	r2, [r7, #7]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d101      	bne.n	8009eee <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	73bb      	strb	r3, [r7, #14]
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009ef6:	7d1b      	ldrb	r3, [r3, #20]
 8009ef8:	7bba      	ldrb	r2, [r7, #14]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d3e9      	bcc.n	8009ed2 <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009f00:	7d1b      	ldrb	r3, [r3, #20]
 8009f02:	7bfa      	ldrb	r2, [r7, #15]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d001      	beq.n	8009f0c <MCU_ModuleIndexFromId+0x50>
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	e001      	b.n	8009f10 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 8009f0c:	4b03      	ldr	r3, [pc, #12]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009f0e:	7d1b      	ldrb	r3, [r3, #20]

}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000a664 	.word	0x2000a664
 8009f20:	20000de4 	.word	0x20000de4

08009f24 <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8009f2e:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8009f36:	4b31      	ldr	r3, [pc, #196]	; (8009ffc <MCU_TicksSinceLastMessage+0xd8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff ffbc 	bl	8009ebc <MCU_ModuleIndexFromId>
 8009f44:	4603      	mov	r3, r0
 8009f46:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <MCU_TicksSinceLastMessage+0xdc>)
 8009f4a:	7d1b      	ldrb	r3, [r3, #20]
 8009f4c:	7afa      	ldrb	r2, [r7, #11]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d040      	beq.n	8009fd4 <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	4a2b      	ldr	r2, [pc, #172]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f56:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	4413      	add	r3, r2
 8009f60:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d10d      	bne.n	8009f88 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	4a25      	ldr	r2, [pc, #148]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f70:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	e023      	b.n	8009fd0 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 8009f88:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	491d      	ldr	r1, [pc, #116]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f90:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009f94:	fb00 f303 	mul.w	r3, r0, r3
 8009f98:	440b      	add	r3, r1
 8009f9a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	7af9      	ldrb	r1, [r7, #11]
 8009faa:	4816      	ldr	r0, [pc, #88]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009fac:	f240 44c4 	movw	r4, #1220	; 0x4c4
 8009fb0:	fb04 f101 	mul.w	r1, r4, r1
 8009fb4:	4401      	add	r1, r0
 8009fb6:	f201 41b4 	addw	r1, r1, #1204	; 0x4b4
 8009fba:	6809      	ldr	r1, [r1, #0]
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	1a41      	subs	r1, r0, r1
 8009fc0:	3901      	subs	r1, #1
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	441a      	add	r2, r3
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	3301      	adds	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	e00d      	b.n	8009ff0 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <MCU_TicksSinceLastMessage+0xe4>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d106      	bne.n	8009fee <MCU_TicksSinceLastMessage+0xca>
 8009fe0:	490a      	ldr	r1, [pc, #40]	; (800a00c <MCU_TicksSinceLastMessage+0xe8>)
 8009fe2:	480b      	ldr	r0, [pc, #44]	; (800a010 <MCU_TicksSinceLastMessage+0xec>)
 8009fe4:	f009 fe32 	bl	8013c4c <siprintf>
 8009fe8:	4809      	ldr	r0, [pc, #36]	; (800a010 <MCU_TicksSinceLastMessage+0xec>)
 8009fea:	f7fb f9b9 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 8009fee:	2300      	movs	r3, #0
  }
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}
 8009ff8:	200005d8 	.word	0x200005d8
 8009ffc:	20000d20 	.word	0x20000d20
 800a000:	2000a664 	.word	0x2000a664
 800a004:	20000de4 	.word	0x20000de4
 800a008:	2000000c 	.word	0x2000000c
 800a00c:	08017f98 	.word	0x08017f98
 800a010:	20000b64 	.word	0x20000b64

0800a014 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a01e:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a026:	4b31      	ldr	r3, [pc, #196]	; (800a0ec <MCU_TicksSinceLastStateTx+0xd8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff ff44 	bl	8009ebc <MCU_ModuleIndexFromId>
 800a034:	4603      	mov	r3, r0
 800a036:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a038:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <MCU_TicksSinceLastStateTx+0xdc>)
 800a03a:	7d1b      	ldrb	r3, [r3, #20]
 800a03c:	7afa      	ldrb	r2, [r7, #11]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d040      	beq.n	800a0c4 <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	4a2b      	ldr	r2, [pc, #172]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a046:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a04a:	fb01 f303 	mul.w	r3, r1, r3
 800a04e:	4413      	add	r3, r2
 800a050:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10d      	bne.n	800a078 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	4a25      	ldr	r2, [pc, #148]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a060:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e023      	b.n	800a0c0 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800a078:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	7afb      	ldrb	r3, [r7, #11]
 800a07e:	491d      	ldr	r1, [pc, #116]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a080:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a084:	fb00 f303 	mul.w	r3, r0, r3
 800a088:	440b      	add	r3, r1
 800a08a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	1ad2      	subs	r2, r2, r3
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	3301      	adds	r3, #1
 800a098:	7af9      	ldrb	r1, [r7, #11]
 800a09a:	4816      	ldr	r0, [pc, #88]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a09c:	f240 44c4 	movw	r4, #1220	; 0x4c4
 800a0a0:	fb04 f101 	mul.w	r1, r4, r1
 800a0a4:	4401      	add	r1, r0
 800a0a6:	f201 41bc 	addw	r1, r1, #1212	; 0x4bc
 800a0aa:	6809      	ldr	r1, [r1, #0]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	1a41      	subs	r1, r0, r1
 800a0b0:	3901      	subs	r1, #1
 800a0b2:	fb01 f303 	mul.w	r3, r1, r3
 800a0b6:	441a      	add	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3301      	adds	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	e00d      	b.n	800a0e0 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <MCU_TicksSinceLastStateTx+0xe4>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d106      	bne.n	800a0de <MCU_TicksSinceLastStateTx+0xca>
 800a0d0:	490a      	ldr	r1, [pc, #40]	; (800a0fc <MCU_TicksSinceLastStateTx+0xe8>)
 800a0d2:	480b      	ldr	r0, [pc, #44]	; (800a100 <MCU_TicksSinceLastStateTx+0xec>)
 800a0d4:	f009 fdba 	bl	8013c4c <siprintf>
 800a0d8:	4809      	ldr	r0, [pc, #36]	; (800a100 <MCU_TicksSinceLastStateTx+0xec>)
 800a0da:	f7fb f941 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 800a0de:	2300      	movs	r3, #0
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}
 800a0e8:	200005d8 	.word	0x200005d8
 800a0ec:	20000d20 	.word	0x20000d20
 800a0f0:	2000a664 	.word	0x2000a664
 800a0f4:	20000de4 	.word	0x20000de4
 800a0f8:	2000000c 	.word	0x2000000c
 800a0fc:	08017fd8 	.word	0x08017fd8
 800a100:	20000b64 	.word	0x20000b64

0800a104 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a10e:	2300      	movs	r3, #0
 800a110:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a112:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a114:	2301      	movs	r3, #1
 800a116:	73fb      	strb	r3, [r7, #15]
 800a118:	e05d      	b.n	800a1d6 <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800a11a:	4b34      	ldr	r3, [pc, #208]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	e016      	b.n	800a150 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800a122:	f009 fd45 	bl	8013bb0 <rand>
 800a126:	4603      	mov	r3, r0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4a30      	ldr	r2, [pc, #192]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a132:	b2d9      	uxtb	r1, r3
 800a134:	4b2e      	ldr	r3, [pc, #184]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a136:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a138:	4b2c      	ldr	r3, [pc, #176]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a140:	21ff      	movs	r1, #255	; 0xff
 800a142:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a144:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	4b26      	ldr	r3, [pc, #152]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	7bfa      	ldrb	r2, [r7, #15]
 800a156:	429a      	cmp	r2, r3
 800a158:	d8e3      	bhi.n	800a122 <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800a15a:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	79f8      	ldrb	r0, [r7, #7]
 800a162:	4a23      	ldr	r2, [pc, #140]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a164:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800a168:	f7f7 fb00 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	79f8      	ldrb	r0, [r7, #7]
 800a172:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a174:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800a178:	f7f7 fa68 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800a180:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e01e      	b.n	800a1c6 <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800a188:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	4b18      	ldr	r3, [pc, #96]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a190:	5c9a      	ldrb	r2, [r3, r2]
 800a192:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a19a:	5c5b      	ldrb	r3, [r3, r1]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	bf0c      	ite	eq
 800a1a0:	2301      	moveq	r3, #1
 800a1a2:	2300      	movne	r3, #0
 800a1a4:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	f083 0301 	eor.w	r3, r3, #1
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <CAN_TestRegisterAccess+0xb6>
        Nop();
 800a1b2:	bf00      	nop
        Nop();
 800a1b4:	bf00      	nop

        // Data mismatch
        return false;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e013      	b.n	800a1e2 <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1c4:	701a      	strb	r2, [r3, #0]
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	7bfa      	ldrb	r2, [r7, #15]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d8db      	bhi.n	800a188 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	d99e      	bls.n	800a11a <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800a1dc:	bf00      	nop
  Nop();
 800a1de:	bf00      	nop
  return true;
 800a1e0:	2301      	movs	r3, #1
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000de0 	.word	0x20000de0
 800a1f0:	20000d44 	.word	0x20000d44
 800a1f4:	20000da0 	.word	0x20000da0

0800a1f8 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a206:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a208:	2304      	movs	r3, #4
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e05b      	b.n	800a2c6 <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800a20e:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a210:	2200      	movs	r2, #0
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e014      	b.n	800a240 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800a216:	f009 fccb 	bl	8013bb0 <rand>
 800a21a:	4601      	mov	r1, r0
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	b2c9      	uxtb	r1, r1
 800a224:	4b2d      	ldr	r3, [pc, #180]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a226:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b2c      	ldr	r3, [pc, #176]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a230:	21ff      	movs	r1, #255	; 0xff
 800a232:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a234:	4b28      	ldr	r3, [pc, #160]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	4b26      	ldr	r3, [pc, #152]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	7bfa      	ldrb	r2, [r7, #15]
 800a246:	429a      	cmp	r2, r3
 800a248:	d8e5      	bhi.n	800a216 <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800a24a:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	79f8      	ldrb	r0, [r7, #7]
 800a252:	4a22      	ldr	r2, [pc, #136]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a258:	f7f7 fa88 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	79f8      	ldrb	r0, [r7, #7]
 800a262:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a268:	f7f7 f9f0 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800a270:	4b19      	ldr	r3, [pc, #100]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	e01e      	b.n	800a2b6 <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a280:	5c9a      	ldrb	r2, [r3, r2]
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a28a:	5c5b      	ldrb	r3, [r3, r1]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	bf0c      	ite	eq
 800a290:	2301      	moveq	r3, #1
 800a292:	2300      	movne	r3, #0
 800a294:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	f083 0301 	eor.w	r3, r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <CAN_TestRamAccess+0xb2>
        Nop();
 800a2a2:	bf00      	nop
        Nop();
 800a2a4:	bf00      	nop

        // Data mismatch
        return false;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e011      	b.n	800a2ce <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d8db      	bhi.n	800a278 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d9a0      	bls.n	800a20e <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800a2cc:	2301      	movs	r3, #1
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000de0 	.word	0x20000de0
 800a2dc:	20000d44 	.word	0x20000d44
 800a2e0:	20000da0 	.word	0x20000da0

0800a2e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a2e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a2fc:	bf00      	nop
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <LL_AHB2_GRP1_EnableClock>:
{
 800a306:	b480      	push	{r7}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a30e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a31e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4013      	ands	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a32a:	68fb      	ldr	r3, [r7, #12]
}
 800a32c:	bf00      	nop
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4013      	ands	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a35c:	68fb      	ldr	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a376:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4313      	orrs	r3, r2
 800a380:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4013      	ands	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a3a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a3d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a3e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800a404:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a408:	f7ff ff96 	bl	800a338 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	202e      	movs	r0, #46	; 0x2e
 800a412:	f002 fc0c 	bl	800cc2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800a416:	202e      	movs	r0, #46	; 0x2e
 800a418:	f002 fc23 	bl	800cc62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a41c:	bf00      	nop
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b09c      	sub	sp, #112	; 0x70
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a438:	f107 030c 	add.w	r3, r7, #12
 800a43c:	2250      	movs	r2, #80	; 0x50
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f008 fbf1 	bl	8012c28 <memset>
  if(huart->Instance==LPUART1)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a2f      	ldr	r2, [pc, #188]	; (800a508 <HAL_UART_MspInit+0xe8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d125      	bne.n	800a49c <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a450:	2302      	movs	r3, #2
 800a452:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a454:	2300      	movs	r3, #0
 800a456:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4618      	mov	r0, r3
 800a45e:	f004 fd62 	bl	800ef26 <HAL_RCCEx_PeriphCLKConfig>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a468:	f7fc f910 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a46c:	2001      	movs	r0, #1
 800a46e:	f7ff ff95 	bl	800a39c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a472:	2001      	movs	r0, #1
 800a474:	f7ff ff47 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a478:	230c      	movs	r3, #12
 800a47a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47c:	2302      	movs	r3, #2
 800a47e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2300      	movs	r3, #0
 800a482:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a484:	2300      	movs	r3, #0
 800a486:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a488:	2308      	movs	r3, #8
 800a48a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a48c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a496:	f002 fed9 	bl	800d24c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a49a:	e031      	b.n	800a500 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a1a      	ldr	r2, [pc, #104]	; (800a50c <HAL_UART_MspInit+0xec>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d12c      	bne.n	800a500 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f004 fd37 	bl	800ef26 <HAL_RCCEx_PeriphCLKConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800a4be:	f7fc f8e5 	bl	800668c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a4c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a4c6:	f7ff ff82 	bl	800a3ce <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4ca:	2002      	movs	r0, #2
 800a4cc:	f7ff ff1b 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a4d0:	23c0      	movs	r3, #192	; 0xc0
 800a4d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4e0:	2307      	movs	r3, #7
 800a4e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4809      	ldr	r0, [pc, #36]	; (800a510 <HAL_UART_MspInit+0xf0>)
 800a4ec:	f002 feae 	bl	800d24c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	2024      	movs	r0, #36	; 0x24
 800a4f6:	f002 fb9a 	bl	800cc2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a4fa:	2024      	movs	r0, #36	; 0x24
 800a4fc:	f002 fbb1 	bl	800cc62 <HAL_NVIC_EnableIRQ>
}
 800a500:	bf00      	nop
 800a502:	3770      	adds	r7, #112	; 0x70
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	40008000 	.word	0x40008000
 800a50c:	40013800 	.word	0x40013800
 800a510:	48000400 	.word	0x48000400

0800a514 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a05      	ldr	r2, [pc, #20]	; (800a538 <HAL_PKA_MspInit+0x24>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d103      	bne.n	800a52e <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800a526:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a52a:	f7ff ff05 	bl	800a338 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58002000 	.word	0x58002000

0800a53c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b096      	sub	sp, #88	; 0x58
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a544:	f107 0308 	add.w	r3, r7, #8
 800a548:	2250      	movs	r2, #80	; 0x50
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f008 fb6b 	bl	8012c28 <memset>
  if(hrtc->Instance==RTC)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a0e      	ldr	r2, [pc, #56]	; (800a590 <HAL_RTC_MspInit+0x54>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d115      	bne.n	800a588 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a560:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a562:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a566:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a568:	f107 0308 	add.w	r3, r7, #8
 800a56c:	4618      	mov	r0, r3
 800a56e:	f004 fcda 	bl	800ef26 <HAL_RCCEx_PeriphCLKConfig>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a578:	f7fc f888 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a57c:	f7ff feb2 	bl	800a2e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a580:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a584:	f7ff fef1 	bl	800a36a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a588:	bf00      	nop
 800a58a:	3758      	adds	r7, #88	; 0x58
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	40002800 	.word	0x40002800

0800a594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a30      	ldr	r2, [pc, #192]	; (800a674 <HAL_SPI_MspInit+0xe0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d118      	bne.n	800a5e8 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a5b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a5ba:	f7ff ff08 	bl	800a3ce <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5be:	2001      	movs	r0, #1
 800a5c0:	f7ff fea1 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800a5c4:	23c2      	movs	r3, #194	; 0xc2
 800a5c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5d4:	2305      	movs	r3, #5
 800a5d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5d8:	f107 030c 	add.w	r3, r7, #12
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5e2:	f002 fe33 	bl	800d24c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a5e6:	e040      	b.n	800a66a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a22      	ldr	r2, [pc, #136]	; (800a678 <HAL_SPI_MspInit+0xe4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d13b      	bne.n	800a66a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a5f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5f6:	f7ff feb8 	bl	800a36a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5fa:	2004      	movs	r0, #4
 800a5fc:	f7ff fe83 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a600:	2001      	movs	r0, #1
 800a602:	f7ff fe80 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a606:	2302      	movs	r3, #2
 800a608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a60a:	2302      	movs	r3, #2
 800a60c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a612:	2300      	movs	r3, #0
 800a614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800a616:	2303      	movs	r3, #3
 800a618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4619      	mov	r1, r3
 800a620:	4816      	ldr	r0, [pc, #88]	; (800a67c <HAL_SPI_MspInit+0xe8>)
 800a622:	f002 fe13 	bl	800d24c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a626:	2304      	movs	r3, #4
 800a628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62a:	2302      	movs	r3, #2
 800a62c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a636:	2305      	movs	r3, #5
 800a638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	4619      	mov	r1, r3
 800a640:	480e      	ldr	r0, [pc, #56]	; (800a67c <HAL_SPI_MspInit+0xe8>)
 800a642:	f002 fe03 	bl	800d24c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a64a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a654:	2300      	movs	r3, #0
 800a656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a658:	2305      	movs	r3, #5
 800a65a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a65c:	f107 030c 	add.w	r3, r7, #12
 800a660:	4619      	mov	r1, r3
 800a662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a666:	f002 fdf1 	bl	800d24c <HAL_GPIO_Init>
}
 800a66a:	bf00      	nop
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40013000 	.word	0x40013000
 800a678:	40003800 	.word	0x40003800
 800a67c:	48000800 	.word	0x48000800

0800a680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <HAL_TIM_Base_MspInit+0x34>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d10b      	bne.n	800a6aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a692:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a696:	f7ff fe9a 	bl	800a3ce <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a69a:	2200      	movs	r2, #0
 800a69c:	2100      	movs	r1, #0
 800a69e:	2019      	movs	r0, #25
 800a6a0:	f002 fac5 	bl	800cc2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a6a4:	2019      	movs	r0, #25
 800a6a6:	f002 fadc 	bl	800cc62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800a6aa:	bf00      	nop
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40012c00 	.word	0x40012c00

0800a6b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b09c      	sub	sp, #112	; 0x70
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6d0:	f107 030c 	add.w	r3, r7, #12
 800a6d4:	2250      	movs	r2, #80	; 0x50
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f008 faa5 	bl	8012c28 <memset>
  if(hpcd->Instance==USB)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <HAL_PCD_MspInit+0xa8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d136      	bne.n	800a756 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800a6ee:	2306      	movs	r3, #6
 800a6f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a6f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a6f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a6fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a702:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a70a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a70e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f004 fc06 	bl	800ef26 <HAL_RCCEx_PeriphCLKConfig>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a720:	f7fb ffb4 	bl	800668c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a724:	2001      	movs	r0, #1
 800a726:	f7ff fdee 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a72a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a730:	2302      	movs	r3, #2
 800a732:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a734:	2300      	movs	r3, #0
 800a736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a738:	2300      	movs	r3, #0
 800a73a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a73c:	230a      	movs	r3, #10
 800a73e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a744:	4619      	mov	r1, r3
 800a746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a74a:	f002 fd7f 	bl	800d24c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a74e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a752:	f7ff fe0a 	bl	800a36a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800a756:	bf00      	nop
 800a758:	3770      	adds	r7, #112	; 0x70
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	40006800 	.word	0x40006800

0800a764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a768:	e7fe      	b.n	800a768 <NMI_Handler+0x4>

0800a76a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a76a:	b480      	push	{r7}
 800a76c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a76e:	e7fe      	b.n	800a76e <HardFault_Handler+0x4>

0800a770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a774:	e7fe      	b.n	800a774 <MemManage_Handler+0x4>

0800a776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a776:	b480      	push	{r7}
 800a778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a77a:	e7fe      	b.n	800a77a <BusFault_Handler+0x4>

0800a77c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a780:	e7fe      	b.n	800a780 <UsageFault_Handler+0x4>

0800a782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a782:	b480      	push	{r7}
 800a784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a786:	bf00      	nop
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a794:	bf00      	nop
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7b0:	f002 f936 	bl	800ca20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a7b4:	bf00      	nop
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800a7bc:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <EXTI0_IRQHandler+0x14>)
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f002 fefd 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a7c6:	bf00      	nop
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000cd6 	.word	0x20000cd6

0800a7d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800a7d4:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <EXTI1_IRQHandler+0x14>)
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f002 fef1 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000cde 	.word	0x20000cde

0800a7e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800a7ec:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <EXTI4_IRQHandler+0x14>)
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 fee5 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000ccc 	.word	0x20000ccc

0800a800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <EXTI9_5_IRQHandler+0x1c>)
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f002 fed9 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <EXTI9_5_IRQHandler+0x20>)
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f002 fed4 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a818:	bf00      	nop
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000c66 	.word	0x20000c66
 800a820:	20000c6e 	.word	0x20000c6e

0800a824 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a828:	4802      	ldr	r0, [pc, #8]	; (800a834 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800a82a:	f005 fead 	bl	8010588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a82e:	bf00      	nop
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200005d8 	.word	0x200005d8

0800a838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a83c:	4802      	ldr	r0, [pc, #8]	; (800a848 <USART1_IRQHandler+0x10>)
 800a83e:	f006 ff75 	bl	801172c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a842:	bf00      	nop
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000044c 	.word	0x2000044c

0800a84c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800a850:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <EXTI15_10_IRQHandler+0x30>)
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f002 feb3 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800a85a:	4b09      	ldr	r3, [pc, #36]	; (800a880 <EXTI15_10_IRQHandler+0x34>)
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f002 feae 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800a864:	4b07      	ldr	r3, [pc, #28]	; (800a884 <EXTI15_10_IRQHandler+0x38>)
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fea9 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800a86e:	4b06      	ldr	r3, [pc, #24]	; (800a888 <EXTI15_10_IRQHandler+0x3c>)
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f002 fea4 	bl	800d5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a878:	bf00      	nop
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20000c5e 	.word	0x20000c5e
 800a880:	20000c7c 	.word	0x20000c7c
 800a884:	20000c86 	.word	0x20000c86
 800a888:	20000c8e 	.word	0x20000c8e

0800a88c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a890:	f002 feae 	bl	800d5f0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  return 1;
 800a89c:	2301      	movs	r3, #1
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <_kill>:

int _kill(int pid, int sig)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a8b2:	f008 f85f 	bl	8012974 <__errno>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2216      	movs	r2, #22
 800a8ba:	601a      	str	r2, [r3, #0]
  return -1;
 800a8bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_exit>:

void _exit (int status)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a8d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ffe7 	bl	800a8a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a8da:	e7fe      	b.n	800a8da <_exit+0x12>

0800a8dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e00a      	b.n	800a904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a8ee:	f3af 8000 	nop.w
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	60ba      	str	r2, [r7, #8]
 800a8fa:	b2ca      	uxtb	r2, r1
 800a8fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	3301      	adds	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	dbf0      	blt.n	800a8ee <_read+0x12>
  }

  return len;
 800a90c:	687b      	ldr	r3, [r7, #4]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	e009      	b.n	800a93c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	60ba      	str	r2, [r7, #8]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	3301      	adds	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	dbf1      	blt.n	800a928 <_write+0x12>
  }
  return len;
 800a944:	687b      	ldr	r3, [r7, #4]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <_close>:

int _close(int file)
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a976:	605a      	str	r2, [r3, #4]
  return 0;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <_isatty>:

int _isatty(int file)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a98e:	2301      	movs	r3, #1
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a9c0:	4a14      	ldr	r2, [pc, #80]	; (800aa14 <_sbrk+0x5c>)
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <_sbrk+0x60>)
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a9cc:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <_sbrk+0x64>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <_sbrk+0x64>)
 800a9d6:	4a12      	ldr	r2, [pc, #72]	; (800aa20 <_sbrk+0x68>)
 800a9d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a9da:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <_sbrk+0x64>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d207      	bcs.n	800a9f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a9e8:	f007 ffc4 	bl	8012974 <__errno>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	220c      	movs	r2, #12
 800a9f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	e009      	b.n	800aa0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a9f8:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <_sbrk+0x64>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a9fe:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <_sbrk+0x64>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a05      	ldr	r2, [pc, #20]	; (800aa1c <_sbrk+0x64>)
 800aa08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20030000 	.word	0x20030000
 800aa18:	00000400 	.word	0x00000400
 800aa1c:	2000a6bc 	.word	0x2000a6bc
 800aa20:	2000a7b8 	.word	0x2000a7b8

0800aa24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800aa28:	4b24      	ldr	r3, [pc, #144]	; (800aabc <SystemInit+0x98>)
 800aa2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2e:	4a23      	ldr	r2, [pc, #140]	; (800aabc <SystemInit+0x98>)
 800aa30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800aa38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800aa48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800aa50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800aa52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa5c:	4b18      	ldr	r3, [pc, #96]	; (800aac0 <SystemInit+0x9c>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800aa62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa6e:	f023 0305 	bic.w	r3, r3, #5
 800aa72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800aa76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa82:	f023 0301 	bic.w	r3, r3, #1
 800aa86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800aa8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa8e:	4a0d      	ldr	r2, [pc, #52]	; (800aac4 <SystemInit+0xa0>)
 800aa90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800aa92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa96:	4a0b      	ldr	r2, [pc, #44]	; (800aac4 <SystemInit+0xa0>)
 800aa98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aa9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaa8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800aaaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaae:	2200      	movs	r2, #0
 800aab0:	619a      	str	r2, [r3, #24]
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	e000ed00 	.word	0xe000ed00
 800aac0:	faf6fefb 	.word	0xfaf6fefb
 800aac4:	22041000 	.word	0x22041000

0800aac8 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800aac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaca:	b08b      	sub	sp, #44	; 0x2c
 800aacc:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800aace:	4a7a      	ldr	r2, [pc, #488]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800aad0:	2101      	movs	r1, #1
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7f7 fd36 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800aad8:	e0e2      	b.n	800aca0 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4b77      	ldr	r3, [pc, #476]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800aae0:	4a77      	ldr	r2, [pc, #476]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800aae2:	2101      	movs	r1, #1
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f7 fb91 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800aaea:	4b76      	ldr	r3, [pc, #472]	; (800acc4 <VCU_ReceiveMessages+0x1fc>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f003 030c 	and.w	r3, r3, #12
 800aaf2:	2b0c      	cmp	r3, #12
 800aaf4:	d12c      	bne.n	800ab50 <VCU_ReceiveMessages+0x88>
 800aaf6:	4b72      	ldr	r3, [pc, #456]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	469c      	mov	ip, r3
 800ab02:	4b6e      	ldr	r3, [pc, #440]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	469e      	mov	lr, r3
 800ab08:	4b6c      	ldr	r3, [pc, #432]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4b6b      	ldr	r3, [pc, #428]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab10:	789b      	ldrb	r3, [r3, #2]
 800ab12:	4619      	mov	r1, r3
 800ab14:	4b69      	ldr	r3, [pc, #420]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	4b68      	ldr	r3, [pc, #416]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab1c:	791b      	ldrb	r3, [r3, #4]
 800ab1e:	461c      	mov	r4, r3
 800ab20:	4b66      	ldr	r3, [pc, #408]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab22:	795b      	ldrb	r3, [r3, #5]
 800ab24:	461d      	mov	r5, r3
 800ab26:	4b65      	ldr	r3, [pc, #404]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab28:	799b      	ldrb	r3, [r3, #6]
 800ab2a:	461e      	mov	r6, r3
 800ab2c:	4b63      	ldr	r3, [pc, #396]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab2e:	79db      	ldrb	r3, [r3, #7]
 800ab30:	9306      	str	r3, [sp, #24]
 800ab32:	9605      	str	r6, [sp, #20]
 800ab34:	9504      	str	r5, [sp, #16]
 800ab36:	9403      	str	r4, [sp, #12]
 800ab38:	9002      	str	r0, [sp, #8]
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	9200      	str	r2, [sp, #0]
 800ab3e:	4673      	mov	r3, lr
 800ab40:	4662      	mov	r2, ip
 800ab42:	4961      	ldr	r1, [pc, #388]	; (800acc8 <VCU_ReceiveMessages+0x200>)
 800ab44:	4861      	ldr	r0, [pc, #388]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ab46:	f009 f881 	bl	8013c4c <siprintf>
 800ab4a:	4860      	ldr	r0, [pc, #384]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ab4c:	f7fa fc08 	bl	8005360 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800ab50:	4b5b      	ldr	r3, [pc, #364]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b5c      	ldr	r3, [pc, #368]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab5e:	895b      	ldrh	r3, [r3, #10]
 800ab60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d102      	bne.n	800ab6e <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800ab68:	f000 f916 	bl	800ad98 <VCU_ProcessVcuCommand>
 800ab6c:	e093      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800ab6e:	4b54      	ldr	r3, [pc, #336]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b55      	ldr	r3, [pc, #340]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	f203 4301 	addw	r3, r3, #1025	; 0x401
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d102      	bne.n	800ab8c <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800ab86:	f000 fa5b 	bl	800b040 <VCU_ProcessVcuTime>
 800ab8a:	e084      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	4b4d      	ldr	r3, [pc, #308]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab9a:	895b      	ldrh	r3, [r3, #10]
 800ab9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d102      	bne.n	800abaa <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800aba4:	f000 fa98 	bl	800b0d8 <VCU_ProcessReadEeprom>
 800aba8:	e075      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800abaa:	4b45      	ldr	r3, [pc, #276]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	461a      	mov	r2, r3
 800abb6:	4b46      	ldr	r3, [pc, #280]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abb8:	895b      	ldrh	r3, [r3, #10]
 800abba:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d102      	bne.n	800abc8 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800abc2:	f000 fb45 	bl	800b250 <VCU_ProcessWriteEeprom>
 800abc6:	e066      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800abc8:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	461a      	mov	r2, r3
 800abd4:	4b3e      	ldr	r3, [pc, #248]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abd6:	895b      	ldrh	r3, [r3, #10]
 800abd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abdc:	429a      	cmp	r2, r3
 800abde:	d102      	bne.n	800abe6 <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800abe0:	f000 f988 	bl	800aef4 <VCU_ProcessVcuModuleCommand>
 800abe4:	e057      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800abe6:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abee:	b29b      	uxth	r3, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b37      	ldr	r3, [pc, #220]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abf4:	895b      	ldrh	r3, [r3, #10]
 800abf6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d102      	bne.n	800ac04 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800abfe:	f000 f9f1 	bl	800afe4 <VCU_ProcessVcuKeepAlive>
 800ac02:	e048      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800ac04:	4b2e      	ldr	r3, [pc, #184]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ac12:	895b      	ldrh	r3, [r3, #10]
 800ac14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d102      	bne.n	800ac22 <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800ac1c:	f000 fbd8 	bl	800b3d0 <VCU_ProcessVcuRequestModuleList>
 800ac20:	e039      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800ac22:	4b28      	ldr	r3, [pc, #160]	; (800acc4 <VCU_ReceiveMessages+0x1fc>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	f003 0305 	and.w	r3, r3, #5
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d133      	bne.n	800ac96 <VCU_ReceiveMessages+0x1ce>
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	469c      	mov	ip, r3
 800ac3a:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800ac42:	469e      	mov	lr, r3
 800ac44:	4b1d      	ldr	r3, [pc, #116]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac52:	789b      	ldrb	r3, [r3, #2]
 800ac54:	4618      	mov	r0, r3
 800ac56:	4b19      	ldr	r3, [pc, #100]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac58:	78db      	ldrb	r3, [r3, #3]
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac5e:	791b      	ldrb	r3, [r3, #4]
 800ac60:	461d      	mov	r5, r3
 800ac62:	4b16      	ldr	r3, [pc, #88]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac64:	795b      	ldrb	r3, [r3, #5]
 800ac66:	461e      	mov	r6, r3
 800ac68:	4b14      	ldr	r3, [pc, #80]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac6a:	799b      	ldrb	r3, [r3, #6]
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	4b13      	ldr	r3, [pc, #76]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac70:	79db      	ldrb	r3, [r3, #7]
 800ac72:	9307      	str	r3, [sp, #28]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	9306      	str	r3, [sp, #24]
 800ac78:	9605      	str	r6, [sp, #20]
 800ac7a:	9504      	str	r5, [sp, #16]
 800ac7c:	9403      	str	r4, [sp, #12]
 800ac7e:	9002      	str	r0, [sp, #8]
 800ac80:	9101      	str	r1, [sp, #4]
 800ac82:	9200      	str	r2, [sp, #0]
 800ac84:	4673      	mov	r3, lr
 800ac86:	4662      	mov	r2, ip
 800ac88:	4912      	ldr	r1, [pc, #72]	; (800acd4 <VCU_ReceiveMessages+0x20c>)
 800ac8a:	4810      	ldr	r0, [pc, #64]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ac8c:	f008 ffde 	bl	8013c4c <siprintf>
 800ac90:	480e      	ldr	r0, [pc, #56]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ac92:	f7fa fb65 	bl	8005360 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800ac96:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800ac98:	2101      	movs	r1, #1
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	f7f7 fc52 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f47f af16 	bne.w	800aada <VCU_ReceiveMessages+0x12>
  }
}
 800acae:	bf00      	nop
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb8:	2000a710 	.word	0x2000a710
 800acbc:	2000a720 	.word	0x2000a720
 800acc0:	2000a714 	.word	0x2000a714
 800acc4:	2000000c 	.word	0x2000000c
 800acc8:	08018014 	.word	0x08018014
 800accc:	20000b64 	.word	0x20000b64
 800acd0:	2000a664 	.word	0x2000a664
 800acd4:	0801806c 	.word	0x0801806c

0800acd8 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af02      	add	r7, sp, #8
 800acde:	4603      	mov	r3, r0
 800ace0:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800ace2:	2332      	movs	r3, #50	; 0x32
 800ace4:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	4a21      	ldr	r2, [pc, #132]	; (800ad70 <VCU_TransmitMessageQueue+0x98>)
 800acea:	2102      	movs	r1, #2
 800acec:	4618      	mov	r0, r3
 800acee:	f7f7 fbf6 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11a      	bne.n	800ad2e <VCU_TransmitMessageQueue+0x56>
      Nop();
 800acf8:	bf00      	nop
      Nop();
 800acfa:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800acfc:	79f8      	ldrb	r0, [r7, #7]
 800acfe:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <VCU_TransmitMessageQueue+0x9c>)
 800ad00:	4a1d      	ldr	r2, [pc, #116]	; (800ad78 <VCU_TransmitMessageQueue+0xa0>)
 800ad02:	491e      	ldr	r1, [pc, #120]	; (800ad7c <VCU_TransmitMessageQueue+0xa4>)
 800ad04:	f7f7 fca5 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <VCU_TransmitMessageQueue+0xa8>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 0305 	and.w	r3, r3, #5
 800ad10:	2b05      	cmp	r3, #5
 800ad12:	d106      	bne.n	800ad22 <VCU_TransmitMessageQueue+0x4a>
 800ad14:	491b      	ldr	r1, [pc, #108]	; (800ad84 <VCU_TransmitMessageQueue+0xac>)
 800ad16:	481c      	ldr	r0, [pc, #112]	; (800ad88 <VCU_TransmitMessageQueue+0xb0>)
 800ad18:	f008 ff98 	bl	8013c4c <siprintf>
 800ad1c:	481a      	ldr	r0, [pc, #104]	; (800ad88 <VCU_TransmitMessageQueue+0xb0>)
 800ad1e:	f7fa fb1f 	bl	8005360 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2102      	movs	r1, #2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7f7 f91c 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800ad2c:	e01c      	b.n	800ad68 <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <VCU_TransmitMessageQueue+0x98>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0d2      	beq.n	800ace6 <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800ad40:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <VCU_TransmitMessageQueue+0xb4>)
 800ad42:	791b      	ldrb	r3, [r3, #4]
 800ad44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7f8 fc8e 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	79f8      	ldrb	r0, [r7, #7]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	9201      	str	r2, [sp, #4]
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <VCU_TransmitMessageQueue+0xb8>)
 800ad60:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <VCU_TransmitMessageQueue+0xb4>)
 800ad62:	2102      	movs	r1, #2
 800ad64:	f7f7 f80c 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	2000a6c0 	.word	0x2000a6c0
 800ad74:	2000a762 	.word	0x2000a762
 800ad78:	2000a761 	.word	0x2000a761
 800ad7c:	2000a760 	.word	0x2000a760
 800ad80:	2000000c 	.word	0x2000000c
 800ad84:	080180d8 	.word	0x080180d8
 800ad88:	20000b64 	.word	0x20000b64
 800ad8c:	2000a6c4 	.word	0x2000a6c4
 800ad90:	2000a6d0 	.word	0x2000a6d0
 800ad94:	00000000 	.word	0x00000000

0800ad98 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ad9e:	4b4c      	ldr	r3, [pc, #304]	; (800aed0 <VCU_ProcessVcuCommand+0x138>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a4c      	ldr	r2, [pc, #304]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ada4:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ada6:	4b4c      	ldr	r3, [pc, #304]	; (800aed8 <VCU_ProcessVcuCommand+0x140>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	4a49      	ldr	r2, [pc, #292]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adae:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800adb0:	4b48      	ldr	r3, [pc, #288]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800adb8:	463b      	mov	r3, r7
 800adba:	2208      	movs	r2, #8
 800adbc:	2100      	movs	r1, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f007 ff32 	bl	8012c28 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800adc4:	4a45      	ldr	r2, [pc, #276]	; (800aedc <VCU_ProcessVcuCommand+0x144>)
 800adc6:	463b      	mov	r3, r7
 800adc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adcc:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800add0:	887a      	ldrh	r2, [r7, #2]
 800add2:	4b40      	ldr	r3, [pc, #256]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800add4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800add8:	4b3e      	ldr	r3, [pc, #248]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adde:	783a      	ldrb	r2, [r7, #0]
 800ade0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d03a      	beq.n	800ae60 <VCU_ProcessVcuCommand+0xc8>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800adea:	783b      	ldrb	r3, [r7, #0]
 800adec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	461a      	mov	r2, r3
 800adf4:	4b37      	ldr	r3, [pc, #220]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    switch (pack.vcuRequestedState) {
 800adfa:	4b36      	ldr	r3, [pc, #216]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d81b      	bhi.n	800ae3c <VCU_ProcessVcuCommand+0xa4>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <VCU_ProcessVcuCommand+0x74>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae65 	.word	0x0800ae65
 800ae10:	0800ae65 	.word	0x0800ae65
 800ae14:	0800ae2d 	.word	0x0800ae2d
 800ae18:	0800ae1d 	.word	0x0800ae1d
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800ae1c:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800ae22:	4b2c      	ldr	r3, [pc, #176]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ae2a:	e01e      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800ae2c:	4b29      	ldr	r3, [pc, #164]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800ae32:	4b28      	ldr	r3, [pc, #160]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ae3a:	e016      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800ae3c:	4b28      	ldr	r3, [pc, #160]	; (800aee0 <VCU_ProcessVcuCommand+0x148>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 0305 	and.w	r3, r3, #5
 800ae44:	2b05      	cmp	r3, #5
 800ae46:	d10f      	bne.n	800ae68 <VCU_ProcessVcuCommand+0xd0>
 800ae48:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4924      	ldr	r1, [pc, #144]	; (800aee4 <VCU_ProcessVcuCommand+0x14c>)
 800ae52:	4825      	ldr	r0, [pc, #148]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800ae54:	f008 fefa 	bl	8013c4c <siprintf>
 800ae58:	4823      	ldr	r0, [pc, #140]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800ae5a:	f7fa fa81 	bl	8005360 <serialOut>
        break;
 800ae5e:	e003      	b.n	800ae68 <VCU_ProcessVcuCommand+0xd0>
    }
  }
 800ae60:	bf00      	nop
 800ae62:	e002      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
        break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
        break;
 800ae68:	bf00      	nop
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800ae6a:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <VCU_ProcessVcuCommand+0x148>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <VCU_ProcessVcuCommand+0x122>
 800ae76:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <VCU_ProcessVcuCommand+0x154>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	461c      	mov	r4, r3
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae88:	461d      	mov	r5, r3
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f5 fb29 	bl	80004e8 <__aeabi_i2d>
 800ae96:	a30c      	add	r3, pc, #48	; (adr r3, 800aec8 <VCU_ProcessVcuCommand+0x130>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 fb8e 	bl	80005bc <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	e9cd 2300 	strd	r2, r3, [sp]
 800aea8:	462b      	mov	r3, r5
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4910      	ldr	r1, [pc, #64]	; (800aef0 <VCU_ProcessVcuCommand+0x158>)
 800aeae:	480e      	ldr	r0, [pc, #56]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800aeb0:	f008 fecc 	bl	8013c4c <siprintf>
 800aeb4:	480c      	ldr	r0, [pc, #48]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800aeb6:	f7fa fa53 	bl	8005360 <serialOut>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bdb0      	pop	{r4, r5, r7, pc}
 800aec2:	bf00      	nop
 800aec4:	f3af 8000 	nop.w
 800aec8:	eb851eb8 	.word	0xeb851eb8
 800aecc:	3f8eb851 	.word	0x3f8eb851
 800aed0:	20000d20 	.word	0x20000d20
 800aed4:	2000a664 	.word	0x2000a664
 800aed8:	200005d8 	.word	0x200005d8
 800aedc:	2000a720 	.word	0x2000a720
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	08018108 	.word	0x08018108
 800aee8:	20000b64 	.word	0x20000b64
 800aeec:	2000a6c4 	.word	0x2000a6c4
 800aef0:	08018130 	.word	0x08018130

0800aef4 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800aefa:	4b31      	ldr	r3, [pc, #196]	; (800afc0 <VCU_ProcessVcuModuleCommand+0xcc>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a31      	ldr	r2, [pc, #196]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af00:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800af02:	4b31      	ldr	r3, [pc, #196]	; (800afc8 <VCU_ProcessVcuModuleCommand+0xd4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	4a2e      	ldr	r2, [pc, #184]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af0a:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800af0c:	4b2d      	ldr	r3, [pc, #180]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800af14:	463b      	mov	r3, r7
 800af16:	220c      	movs	r2, #12
 800af18:	2100      	movs	r1, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f007 fe84 	bl	8012c28 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800af20:	4a2a      	ldr	r2, [pc, #168]	; (800afcc <VCU_ProcessVcuModuleCommand+0xd8>)
 800af22:	463b      	mov	r3, r7
 800af24:	ca07      	ldmia	r2, {r0, r1, r2}
 800af26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800af2a:	783a      	ldrb	r2, [r7, #0]
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800af32:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe ffbf 	bl	8009ebc <MCU_ModuleIndexFromId>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800af42:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d034      	beq.n	800afb6 <VCU_ProcessVcuModuleCommand+0xc2>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4a20      	ldr	r2, [pc, #128]	; (800afd0 <VCU_ProcessVcuModuleCommand+0xdc>)
 800af50:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	4413      	add	r3, r2
 800af5a:	3327      	adds	r3, #39	; 0x27
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	787a      	ldrb	r2, [r7, #1]
 800af60:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	4293      	cmp	r3, r2
 800af68:	d00e      	beq.n	800af88 <VCU_ProcessVcuModuleCommand+0x94>
      // State Change! Set requested state
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800af6a:	787b      	ldrb	r3, [r7, #1]
 800af6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800af70:	b2da      	uxtb	r2, r3
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	4610      	mov	r0, r2
 800af76:	4a16      	ldr	r2, [pc, #88]	; (800afd0 <VCU_ProcessVcuModuleCommand+0xdc>)
 800af78:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800af7c:	fb01 f303 	mul.w	r3, r1, r3
 800af80:	4413      	add	r3, r2
 800af82:	3328      	adds	r3, #40	; 0x28
 800af84:	4602      	mov	r2, r0
 800af86:	701a      	strb	r2, [r3, #0]
 * moduleCommand.module_cell_balance_ctrl
 * moduleCommand.module_hv_bus_actv_iso
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <VCU_ProcessVcuModuleCommand+0xe0>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d010      	beq.n	800afb6 <VCU_ProcessVcuModuleCommand+0xc2>
 800af94:	4b10      	ldr	r3, [pc, #64]	; (800afd8 <VCU_ProcessVcuModuleCommand+0xe4>)
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	787b      	ldrb	r3, [r7, #1]
 800afa2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	490c      	ldr	r1, [pc, #48]	; (800afdc <VCU_ProcessVcuModuleCommand+0xe8>)
 800afaa:	480d      	ldr	r0, [pc, #52]	; (800afe0 <VCU_ProcessVcuModuleCommand+0xec>)
 800afac:	f008 fe4e 	bl	8013c4c <siprintf>
 800afb0:	480b      	ldr	r0, [pc, #44]	; (800afe0 <VCU_ProcessVcuModuleCommand+0xec>)
 800afb2:	f7fa f9d5 	bl	8005360 <serialOut>
  }
}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000d20 	.word	0x20000d20
 800afc4:	2000a664 	.word	0x2000a664
 800afc8:	200005d8 	.word	0x200005d8
 800afcc:	2000a720 	.word	0x2000a720
 800afd0:	20000de4 	.word	0x20000de4
 800afd4:	2000000c 	.word	0x2000000c
 800afd8:	2000a6c4 	.word	0x2000a6c4
 800afdc:	08018160 	.word	0x08018160
 800afe0:	20000b64 	.word	0x20000b64

0800afe4 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800afe8:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <VCU_ProcessVcuKeepAlive+0x40>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a0e      	ldr	r2, [pc, #56]	; (800b028 <VCU_ProcessVcuKeepAlive+0x44>)
 800afee:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800aff0:	4b0e      	ldr	r3, [pc, #56]	; (800b02c <VCU_ProcessVcuKeepAlive+0x48>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff6:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <VCU_ProcessVcuKeepAlive+0x44>)
 800aff8:	6453      	str	r3, [r2, #68]	; 0x44

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <VCU_ProcessVcuKeepAlive+0x4c>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	f003 0304 	and.w	r3, r3, #4
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00c      	beq.n	800b020 <VCU_ProcessVcuKeepAlive+0x3c>
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <VCU_ProcessVcuKeepAlive+0x50>)
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b00e:	b29b      	uxth	r3, r3
 800b010:	461a      	mov	r2, r3
 800b012:	4909      	ldr	r1, [pc, #36]	; (800b038 <VCU_ProcessVcuKeepAlive+0x54>)
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <VCU_ProcessVcuKeepAlive+0x58>)
 800b016:	f008 fe19 	bl	8013c4c <siprintf>
 800b01a:	4808      	ldr	r0, [pc, #32]	; (800b03c <VCU_ProcessVcuKeepAlive+0x58>)
 800b01c:	f7fa f9a0 	bl	8005360 <serialOut>
}
 800b020:	bf00      	nop
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20000d20 	.word	0x20000d20
 800b028:	2000a664 	.word	0x2000a664
 800b02c:	200005d8 	.word	0x200005d8
 800b030:	2000000c 	.word	0x2000000c
 800b034:	2000a6c4 	.word	0x2000a6c4
 800b038:	08018190 	.word	0x08018190
 800b03c:	20000b64 	.word	0x20000b64

0800b040 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b046:	4b1c      	ldr	r3, [pc, #112]	; (800b0b8 <VCU_ProcessVcuTime+0x78>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 0304 	and.w	r3, r3, #4
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00c      	beq.n	800b06c <VCU_ProcessVcuTime+0x2c>
 800b052:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <VCU_ProcessVcuTime+0x7c>)
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	461a      	mov	r2, r3
 800b05e:	4918      	ldr	r1, [pc, #96]	; (800b0c0 <VCU_ProcessVcuTime+0x80>)
 800b060:	4818      	ldr	r0, [pc, #96]	; (800b0c4 <VCU_ProcessVcuTime+0x84>)
 800b062:	f008 fdf3 	bl	8013c4c <siprintf>
 800b066:	4817      	ldr	r0, [pc, #92]	; (800b0c4 <VCU_ProcessVcuTime+0x84>)
 800b068:	f7fa f97a 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <VCU_ProcessVcuTime+0x88>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a16      	ldr	r2, [pc, #88]	; (800b0cc <VCU_ProcessVcuTime+0x8c>)
 800b072:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b074:	4b16      	ldr	r3, [pc, #88]	; (800b0d0 <VCU_ProcessVcuTime+0x90>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	4a14      	ldr	r2, [pc, #80]	; (800b0cc <VCU_ProcessVcuTime+0x8c>)
 800b07c:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800b07e:	463b      	mov	r3, r7
 800b080:	2208      	movs	r2, #8
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f007 fdcf 	bl	8012c28 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800b08a:	463b      	mov	r3, r7
 800b08c:	2208      	movs	r2, #8
 800b08e:	4911      	ldr	r1, [pc, #68]	; (800b0d4 <VCU_ProcessVcuTime+0x94>)
 800b090:	4618      	mov	r0, r3
 800b092:	f007 fdbb 	bl	8012c0c <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800b096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800b09e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0a2:	f7fa f9cb 	bl	800543c <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <VCU_ProcessVcuTime+0x8c>)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 800b0ae:	bf00      	nop
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000000c 	.word	0x2000000c
 800b0bc:	2000a6c4 	.word	0x2000a6c4
 800b0c0:	080181b0 	.word	0x080181b0
 800b0c4:	20000b64 	.word	0x20000b64
 800b0c8:	20000d20 	.word	0x20000d20
 800b0cc:	2000a664 	.word	0x2000a664
 800b0d0:	200005d8 	.word	0x200005d8
 800b0d4:	2000a720 	.word	0x2000a720

0800b0d8 <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b0e2:	4b50      	ldr	r3, [pc, #320]	; (800b224 <VCU_ProcessReadEeprom+0x14c>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 0304 	and.w	r3, r3, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00c      	beq.n	800b108 <VCU_ProcessReadEeprom+0x30>
 800b0ee:	4b4e      	ldr	r3, [pc, #312]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	494c      	ldr	r1, [pc, #304]	; (800b22c <VCU_ProcessReadEeprom+0x154>)
 800b0fc:	484c      	ldr	r0, [pc, #304]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b0fe:	f008 fda5 	bl	8013c4c <siprintf>
 800b102:	484b      	ldr	r0, [pc, #300]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b104:	f7fa f92c 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b108:	4b4a      	ldr	r3, [pc, #296]	; (800b234 <VCU_ProcessReadEeprom+0x15c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a4a      	ldr	r2, [pc, #296]	; (800b238 <VCU_ProcessReadEeprom+0x160>)
 800b10e:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b110:	4b4a      	ldr	r3, [pc, #296]	; (800b23c <VCU_ProcessReadEeprom+0x164>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	4a48      	ldr	r2, [pc, #288]	; (800b238 <VCU_ProcessReadEeprom+0x160>)
 800b118:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800b11a:	f107 030c 	add.w	r3, r7, #12
 800b11e:	2208      	movs	r2, #8
 800b120:	2100      	movs	r1, #0
 800b122:	4618      	mov	r0, r3
 800b124:	f007 fd80 	bl	8012c28 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800b128:	4a45      	ldr	r2, [pc, #276]	; (800b240 <VCU_ProcessReadEeprom+0x168>)
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b132:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800b136:	7b3b      	ldrb	r3, [r7, #12]
 800b138:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800b13a:	463a      	mov	r2, r7
 800b13c:	8afb      	ldrh	r3, [r7, #22]
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7f9 f8d3 	bl	80042ec <EE_ReadVariable32bits>
 800b146:	4603      	mov	r3, r0
 800b148:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800b14a:	8abb      	ldrh	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d156      	bne.n	800b1fe <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f36f 231f 	bfc	r3, #8, #24
 800b156:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800b15c:	8afb      	ldrh	r3, [r7, #22]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b162:	4b31      	ldr	r3, [pc, #196]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800b168:	4b2f      	ldr	r3, [pc, #188]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800b16e:	4b2e      	ldr	r3, [pc, #184]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b170:	2200      	movs	r2, #0
 800b172:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800b174:	4b33      	ldr	r3, [pc, #204]	; (800b244 <VCU_ProcessReadEeprom+0x16c>)
 800b176:	461a      	mov	r2, r3
 800b178:	1d3b      	adds	r3, r7, #4
 800b17a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b17e:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b182:	4b2d      	ldr	r3, [pc, #180]	; (800b238 <VCU_ProcessReadEeprom+0x160>)
 800b184:	895b      	ldrh	r3, [r3, #10]
 800b186:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b190:	b299      	uxth	r1, r3
 800b192:	4a25      	ldr	r2, [pc, #148]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b194:	8813      	ldrh	r3, [r2, #0]
 800b196:	f361 030a 	bfi	r3, r1, #0, #11
 800b19a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b19c:	4a22      	ldr	r2, [pc, #136]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b19e:	6813      	ldr	r3, [r2, #0]
 800b1a0:	f36f 23dc 	bfc	r3, #11, #18
 800b1a4:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b1a6:	4a20      	ldr	r2, [pc, #128]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b1a8:	7913      	ldrb	r3, [r2, #4]
 800b1aa:	f36f 1386 	bfc	r3, #6, #1
 800b1ae:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b1b0:	4a1d      	ldr	r2, [pc, #116]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b1b2:	7913      	ldrb	r3, [r2, #4]
 800b1b4:	2108      	movs	r1, #8
 800b1b6:	f361 0303 	bfi	r3, r1, #0, #4
 800b1ba:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b1bc:	4a1a      	ldr	r2, [pc, #104]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b1be:	7913      	ldrb	r3, [r2, #4]
 800b1c0:	f36f 13c7 	bfc	r3, #7, #1
 800b1c4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b1c6:	4a18      	ldr	r2, [pc, #96]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b1c8:	7913      	ldrb	r3, [r2, #4]
 800b1ca:	f36f 1304 	bfc	r3, #4, #1
 800b1ce:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b1d0:	4b14      	ldr	r3, [pc, #80]	; (800b224 <VCU_ProcessReadEeprom+0x14c>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00c      	beq.n	800b1f6 <VCU_ProcessReadEeprom+0x11e>
 800b1dc:	4b12      	ldr	r3, [pc, #72]	; (800b228 <VCU_ProcessReadEeprom+0x150>)
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4917      	ldr	r1, [pc, #92]	; (800b248 <VCU_ProcessReadEeprom+0x170>)
 800b1ea:	4811      	ldr	r0, [pc, #68]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b1ec:	f008 fd2e 	bl	8013c4c <siprintf>
 800b1f0:	480f      	ldr	r0, [pc, #60]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b1f2:	f7fa f8b5 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	f7ff fd6e 	bl	800acd8 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800b1fc:	e00e      	b.n	800b21c <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800b1fe:	4b09      	ldr	r3, [pc, #36]	; (800b224 <VCU_ProcessReadEeprom+0x14c>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <VCU_ProcessReadEeprom+0x144>
 800b20a:	8abb      	ldrh	r3, [r7, #20]
 800b20c:	461a      	mov	r2, r3
 800b20e:	490f      	ldr	r1, [pc, #60]	; (800b24c <VCU_ProcessReadEeprom+0x174>)
 800b210:	4807      	ldr	r0, [pc, #28]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b212:	f008 fd1b 	bl	8013c4c <siprintf>
 800b216:	4806      	ldr	r0, [pc, #24]	; (800b230 <VCU_ProcessReadEeprom+0x158>)
 800b218:	f7fa f8a2 	bl	8005360 <serialOut>
}
 800b21c:	bf00      	nop
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	2000000c 	.word	0x2000000c
 800b228:	2000a6c4 	.word	0x2000a6c4
 800b22c:	080181c8 	.word	0x080181c8
 800b230:	20000b64 	.word	0x20000b64
 800b234:	20000d20 	.word	0x20000d20
 800b238:	2000a664 	.word	0x2000a664
 800b23c:	200005d8 	.word	0x200005d8
 800b240:	2000a720 	.word	0x2000a720
 800b244:	2000a6d0 	.word	0x2000a6d0
 800b248:	080181e8 	.word	0x080181e8
 800b24c:	08018208 	.word	0x08018208

0800b250 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b25a:	4b52      	ldr	r3, [pc, #328]	; (800b3a4 <VCU_ProcessWriteEeprom+0x154>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00c      	beq.n	800b280 <VCU_ProcessWriteEeprom+0x30>
 800b266:	4b50      	ldr	r3, [pc, #320]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b26e:	b29b      	uxth	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	494e      	ldr	r1, [pc, #312]	; (800b3ac <VCU_ProcessWriteEeprom+0x15c>)
 800b274:	484e      	ldr	r0, [pc, #312]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b276:	f008 fce9 	bl	8013c4c <siprintf>
 800b27a:	484d      	ldr	r0, [pc, #308]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b27c:	f7fa f870 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b280:	4b4c      	ldr	r3, [pc, #304]	; (800b3b4 <VCU_ProcessWriteEeprom+0x164>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a4c      	ldr	r2, [pc, #304]	; (800b3b8 <VCU_ProcessWriteEeprom+0x168>)
 800b286:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b288:	4b4c      	ldr	r3, [pc, #304]	; (800b3bc <VCU_ProcessWriteEeprom+0x16c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	4a4a      	ldr	r2, [pc, #296]	; (800b3b8 <VCU_ProcessWriteEeprom+0x168>)
 800b290:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800b292:	f107 0308 	add.w	r3, r7, #8
 800b296:	2208      	movs	r2, #8
 800b298:	2100      	movs	r1, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f007 fcc4 	bl	8012c28 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800b2a0:	4a47      	ldr	r2, [pc, #284]	; (800b3c0 <VCU_ProcessWriteEeprom+0x170>)
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2aa:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800b2ae:	7a3b      	ldrb	r3, [r7, #8]
 800b2b0:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800b2b6:	8a7b      	ldrh	r3, [r7, #18]
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fa f9b6 	bl	800562c <StoreEEPROM>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800b2c4:	8a3b      	ldrh	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d156      	bne.n	800b378 <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	f36f 231f 	bfc	r3, #8, #24
 800b2d0:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800b2d6:	8a7b      	ldrh	r3, [r7, #18]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b2dc:	4b32      	ldr	r3, [pc, #200]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800b2e2:	4b31      	ldr	r3, [pc, #196]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800b2e8:	4b2f      	ldr	r3, [pc, #188]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800b2ee:	4b35      	ldr	r3, [pc, #212]	; (800b3c4 <VCU_ProcessWriteEeprom+0x174>)
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	463b      	mov	r3, r7
 800b2f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2f8:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b2fc:	4b2e      	ldr	r3, [pc, #184]	; (800b3b8 <VCU_ProcessWriteEeprom+0x168>)
 800b2fe:	895b      	ldrh	r3, [r3, #10]
 800b300:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800b304:	b29b      	uxth	r3, r3
 800b306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b30a:	b299      	uxth	r1, r3
 800b30c:	4a26      	ldr	r2, [pc, #152]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b30e:	8813      	ldrh	r3, [r2, #0]
 800b310:	f361 030a 	bfi	r3, r1, #0, #11
 800b314:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b316:	4a24      	ldr	r2, [pc, #144]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b318:	6813      	ldr	r3, [r2, #0]
 800b31a:	f36f 23dc 	bfc	r3, #11, #18
 800b31e:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b320:	4a21      	ldr	r2, [pc, #132]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b322:	7913      	ldrb	r3, [r2, #4]
 800b324:	f36f 1386 	bfc	r3, #6, #1
 800b328:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b32a:	4a1f      	ldr	r2, [pc, #124]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b32c:	7913      	ldrb	r3, [r2, #4]
 800b32e:	2108      	movs	r1, #8
 800b330:	f361 0303 	bfi	r3, r1, #0, #4
 800b334:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b336:	4a1c      	ldr	r2, [pc, #112]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b338:	7913      	ldrb	r3, [r2, #4]
 800b33a:	f36f 13c7 	bfc	r3, #7, #1
 800b33e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b340:	4a19      	ldr	r2, [pc, #100]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b342:	7913      	ldrb	r3, [r2, #4]
 800b344:	f36f 1304 	bfc	r3, #4, #1
 800b348:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b34a:	4b16      	ldr	r3, [pc, #88]	; (800b3a4 <VCU_ProcessWriteEeprom+0x154>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00c      	beq.n	800b370 <VCU_ProcessWriteEeprom+0x120>
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <VCU_ProcessWriteEeprom+0x158>)
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b35e:	b29b      	uxth	r3, r3
 800b360:	461a      	mov	r2, r3
 800b362:	4919      	ldr	r1, [pc, #100]	; (800b3c8 <VCU_ProcessWriteEeprom+0x178>)
 800b364:	4812      	ldr	r0, [pc, #72]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b366:	f008 fc71 	bl	8013c4c <siprintf>
 800b36a:	4811      	ldr	r0, [pc, #68]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b36c:	f7f9 fff8 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b370:	2000      	movs	r0, #0
 800b372:	f7ff fcb1 	bl	800acd8 <VCU_TransmitMessageQueue>
 800b376:	e00e      	b.n	800b396 <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <VCU_ProcessWriteEeprom+0x154>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d008      	beq.n	800b396 <VCU_ProcessWriteEeprom+0x146>
 800b384:	8a3b      	ldrh	r3, [r7, #16]
 800b386:	461a      	mov	r2, r3
 800b388:	4910      	ldr	r1, [pc, #64]	; (800b3cc <VCU_ProcessWriteEeprom+0x17c>)
 800b38a:	4809      	ldr	r0, [pc, #36]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b38c:	f008 fc5e 	bl	8013c4c <siprintf>
 800b390:	4807      	ldr	r0, [pc, #28]	; (800b3b0 <VCU_ProcessWriteEeprom+0x160>)
 800b392:	f7f9 ffe5 	bl	8005360 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800b396:	f7fb f989 	bl	80066ac <PCU_Initialize>
}
 800b39a:	bf00      	nop
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2000000c 	.word	0x2000000c
 800b3a8:	2000a6c4 	.word	0x2000a6c4
 800b3ac:	0801822c 	.word	0x0801822c
 800b3b0:	20000b64 	.word	0x20000b64
 800b3b4:	20000d20 	.word	0x20000d20
 800b3b8:	2000a664 	.word	0x2000a664
 800b3bc:	200005d8 	.word	0x200005d8
 800b3c0:	2000a720 	.word	0x2000a720
 800b3c4:	2000a6d0 	.word	0x2000a6d0
 800b3c8:	080181e8 	.word	0x080181e8
 800b3cc:	0801824c 	.word	0x0801824c

0800b3d0 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	af00      	add	r7, sp, #0

}
 800b3d4:	bf00      	nop
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b3e6:	4b16      	ldr	r3, [pc, #88]	; (800b440 <VCU_TicksSinceLastMessage+0x60>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800b3ee:	4b15      	ldr	r3, [pc, #84]	; (800b444 <VCU_TicksSinceLastMessage+0x64>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800b3f4:	4b14      	ldr	r3, [pc, #80]	; (800b448 <VCU_TicksSinceLastMessage+0x68>)
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d105      	bne.n	800b40a <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <VCU_TicksSinceLastMessage+0x68>)
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	e013      	b.n	800b432 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <VCU_TicksSinceLastMessage+0x60>)
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <VCU_TicksSinceLastMessage+0x68>)
 800b410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b412:	1ad2      	subs	r2, r2, r3
 800b414:	4b0a      	ldr	r3, [pc, #40]	; (800b440 <VCU_TicksSinceLastMessage+0x60>)
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	490b      	ldr	r1, [pc, #44]	; (800b448 <VCU_TicksSinceLastMessage+0x68>)
 800b41c:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	1a41      	subs	r1, r0, r1
 800b422:	3901      	subs	r1, #1
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	441a      	add	r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	3301      	adds	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200005d8 	.word	0x200005d8
 800b444:	20000d20 	.word	0x20000d20
 800b448:	2000a664 	.word	0x2000a664
 800b44c:	00000000 	.word	0x00000000

0800b450 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800b45c:	f04f 0300 	mov.w	r3, #0
 800b460:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800b462:	4b67      	ldr	r3, [pc, #412]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b464:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f5 f83d 	bl	80004e8 <__aeabi_i2d>
 800b46e:	f04f 0200 	mov.w	r2, #0
 800b472:	4b64      	ldr	r3, [pc, #400]	; (800b604 <VCU_TransmitBmsState+0x1b4>)
 800b474:	f7f5 f8a2 	bl	80005bc <__aeabi_dmul>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4610      	mov	r0, r2
 800b47e:	4619      	mov	r1, r3
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	f7f4 fee2 	bl	8000250 <__adddf3>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4610      	mov	r0, r2
 800b492:	4619      	mov	r1, r3
 800b494:	f7f5 fb8a 	bl	8000bac <__aeabi_d2f>
 800b498:	4603      	mov	r3, r0
 800b49a:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800b49c:	6978      	ldr	r0, [r7, #20]
 800b49e:	f7f5 f835 	bl	800050c <__aeabi_f2d>
 800b4a2:	a355      	add	r3, pc, #340	; (adr r3, 800b5f8 <VCU_TransmitBmsState+0x1a8>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f5 f9b2 	bl	8000810 <__aeabi_ddiv>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	f7f5 fb7a 	bl	8000bac <__aeabi_d2f>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800b4bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c4:	edc7 7a01 	vstr	s15, [r7, #4]
 800b4c8:	793b      	ldrb	r3, [r7, #4]
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	893b      	ldrh	r3, [r7, #8]
 800b4ce:	f362 0389 	bfi	r3, r2, #2, #8
 800b4d2:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800b4d4:	4b4a      	ldr	r3, [pc, #296]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	7a3b      	ldrb	r3, [r7, #8]
 800b4e2:	f362 0301 	bfi	r3, r2, #0, #2
 800b4e6:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800b4e8:	4b45      	ldr	r3, [pc, #276]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b4ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	7a7b      	ldrb	r3, [r7, #9]
 800b4f6:	f362 0383 	bfi	r3, r2, #2, #2
 800b4fa:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800b4fc:	4b40      	ldr	r3, [pc, #256]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b4fe:	7d9b      	ldrb	r3, [r3, #22]
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	b2da      	uxtb	r2, r3
 800b506:	7a7b      	ldrb	r3, [r7, #9]
 800b508:	f362 1304 	bfi	r3, r2, #4, #1
 800b50c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800b50e:	4b3c      	ldr	r3, [pc, #240]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b510:	7d5b      	ldrb	r3, [r3, #21]
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	b2da      	uxtb	r2, r3
 800b518:	7a7b      	ldrb	r3, [r7, #9]
 800b51a:	f362 1345 	bfi	r3, r2, #5, #1
 800b51e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800b520:	4b37      	ldr	r3, [pc, #220]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b522:	7ddb      	ldrb	r3, [r3, #23]
 800b524:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800b526:	4b36      	ldr	r3, [pc, #216]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b528:	7e1b      	ldrb	r3, [r3, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800b52e:	7a7b      	ldrb	r3, [r7, #9]
 800b530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b534:	727b      	strb	r3, [r7, #9]
 800b536:	e003      	b.n	800b540 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800b538:	7a7b      	ldrb	r3, [r7, #9]
 800b53a:	f36f 1386 	bfc	r3, #6, #1
 800b53e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800b540:	4b2f      	ldr	r3, [pc, #188]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b542:	7d1b      	ldrb	r3, [r3, #20]
 800b544:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800b546:	7a7b      	ldrb	r3, [r7, #9]
 800b548:	f36f 13c7 	bfc	r3, #7, #1
 800b54c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b552:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b558:	4b2b      	ldr	r3, [pc, #172]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b55e:	4b2a      	ldr	r3, [pc, #168]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b560:	2200      	movs	r2, #0
 800b562:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800b564:	4b29      	ldr	r3, [pc, #164]	; (800b60c <VCU_TransmitBmsState+0x1bc>)
 800b566:	461a      	mov	r2, r3
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b570:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b574:	4b22      	ldr	r3, [pc, #136]	; (800b600 <VCU_TransmitBmsState+0x1b0>)
 800b576:	895b      	ldrh	r3, [r3, #10]
 800b578:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b582:	b299      	uxth	r1, r3
 800b584:	4a20      	ldr	r2, [pc, #128]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b586:	8813      	ldrh	r3, [r2, #0]
 800b588:	f361 030a 	bfi	r3, r1, #0, #11
 800b58c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b58e:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b590:	6813      	ldr	r3, [r2, #0]
 800b592:	f36f 23dc 	bfc	r3, #11, #18
 800b596:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b598:	4a1b      	ldr	r2, [pc, #108]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b59a:	7913      	ldrb	r3, [r2, #4]
 800b59c:	f36f 1386 	bfc	r3, #6, #1
 800b5a0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b5a2:	4a19      	ldr	r2, [pc, #100]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b5a4:	7913      	ldrb	r3, [r2, #4]
 800b5a6:	2108      	movs	r1, #8
 800b5a8:	f361 0303 	bfi	r3, r1, #0, #4
 800b5ac:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b5ae:	4a16      	ldr	r2, [pc, #88]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b5b0:	7913      	ldrb	r3, [r2, #4]
 800b5b2:	f36f 13c7 	bfc	r3, #7, #1
 800b5b6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b5b8:	4a13      	ldr	r2, [pc, #76]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b5ba:	7913      	ldrb	r3, [r2, #4]
 800b5bc:	f36f 1304 	bfc	r3, #4, #1
 800b5c0:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <VCU_TransmitBmsState+0x1c0>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f003 0304 	and.w	r3, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00c      	beq.n	800b5e8 <VCU_TransmitBmsState+0x198>
 800b5ce:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <VCU_TransmitBmsState+0x1b8>)
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	461a      	mov	r2, r3
 800b5da:	490e      	ldr	r1, [pc, #56]	; (800b614 <VCU_TransmitBmsState+0x1c4>)
 800b5dc:	480e      	ldr	r0, [pc, #56]	; (800b618 <VCU_TransmitBmsState+0x1c8>)
 800b5de:	f008 fb35 	bl	8013c4c <siprintf>
 800b5e2:	480d      	ldr	r0, [pc, #52]	; (800b618 <VCU_TransmitBmsState+0x1c8>)
 800b5e4:	f7f9 febc 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f7ff fb75 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800b5ee:	bf00      	nop
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	9999999a 	.word	0x9999999a
 800b5fc:	3fd99999 	.word	0x3fd99999
 800b600:	2000a664 	.word	0x2000a664
 800b604:	3fe00000 	.word	0x3fe00000
 800b608:	2000a6c4 	.word	0x2000a6c4
 800b60c:	2000a6d0 	.word	0x2000a6d0
 800b610:	2000000c 	.word	0x2000000c
 800b614:	08018270 	.word	0x08018270
 800b618:	20000b64 	.word	0x20000b64
 800b61c:	00000000 	.word	0x00000000

0800b620 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800b632:	4b65      	ldr	r3, [pc, #404]	; (800b7c8 <VCU_TransmitBmsData1+0x1a8>)
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	4618      	mov	r0, r3
 800b638:	f7f4 ff46 	bl	80004c8 <__aeabi_ui2d>
 800b63c:	a35e      	add	r3, pc, #376	; (adr r3, 800b7b8 <VCU_TransmitBmsData1+0x198>)
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	f7f4 ffbb 	bl	80005bc <__aeabi_dmul>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4610      	mov	r0, r2
 800b64c:	4619      	mov	r1, r3
 800b64e:	f04f 0200 	mov.w	r2, #0
 800b652:	4b5e      	ldr	r3, [pc, #376]	; (800b7cc <VCU_TransmitBmsData1+0x1ac>)
 800b654:	f7f4 fdfa 	bl	800024c <__aeabi_dsub>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4610      	mov	r0, r2
 800b65e:	4619      	mov	r1, r3
 800b660:	f7f5 faa4 	bl	8000bac <__aeabi_d2f>
 800b664:	4603      	mov	r3, r0
 800b666:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7f4 ff4f 	bl	800050c <__aeabi_f2d>
 800b66e:	a352      	add	r3, pc, #328	; (adr r3, 800b7b8 <VCU_TransmitBmsData1+0x198>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f5 f8cc 	bl	8000810 <__aeabi_ddiv>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4610      	mov	r0, r2
 800b67e:	4619      	mov	r1, r3
 800b680:	f04f 0200 	mov.w	r2, #0
 800b684:	4b52      	ldr	r3, [pc, #328]	; (800b7d0 <VCU_TransmitBmsData1+0x1b0>)
 800b686:	f7f4 fde3 	bl	8000250 <__adddf3>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4610      	mov	r0, r2
 800b690:	4619      	mov	r1, r3
 800b692:	f7f5 fa8b 	bl	8000bac <__aeabi_d2f>
 800b696:	4603      	mov	r3, r0
 800b698:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800b69a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a2:	ee17 3a90 	vmov	r3, s15
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800b6aa:	4b47      	ldr	r3, [pc, #284]	; (800b7c8 <VCU_TransmitBmsData1+0x1a8>)
 800b6ac:	899b      	ldrh	r3, [r3, #12]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7f4 ff1a 	bl	80004e8 <__aeabi_i2d>
 800b6b4:	a342      	add	r3, pc, #264	; (adr r3, 800b7c0 <VCU_TransmitBmsData1+0x1a0>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 ff7f 	bl	80005bc <__aeabi_dmul>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	f7f4 fdbf 	bl	8000250 <__adddf3>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7f5 fa67 	bl	8000bac <__aeabi_d2f>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7f4 ff12 	bl	800050c <__aeabi_f2d>
 800b6e8:	a333      	add	r3, pc, #204	; (adr r3, 800b7b8 <VCU_TransmitBmsData1+0x198>)
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	f7f5 f88f 	bl	8000810 <__aeabi_ddiv>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	f7f5 fa57 	bl	8000bac <__aeabi_d2f>
 800b6fe:	4603      	mov	r3, r0
 800b700:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800b702:	edd7 7a02 	vldr	s15, [r7, #8]
 800b706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70a:	ee17 3a90 	vmov	r3, s15
 800b70e:	b29b      	uxth	r3, r3
 800b710:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b716:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b71c:	4b2d      	ldr	r3, [pc, #180]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b71e:	2200      	movs	r2, #0
 800b720:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b722:	4b2c      	ldr	r3, [pc, #176]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b724:	2200      	movs	r2, #0
 800b726:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800b728:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <VCU_TransmitBmsData1+0x1b8>)
 800b72a:	461a      	mov	r2, r3
 800b72c:	463b      	mov	r3, r7
 800b72e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b732:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b736:	4b24      	ldr	r3, [pc, #144]	; (800b7c8 <VCU_TransmitBmsData1+0x1a8>)
 800b738:	895b      	ldrh	r3, [r3, #10]
 800b73a:	f203 4321 	addw	r3, r3, #1057	; 0x421
 800b73e:	b29b      	uxth	r3, r3
 800b740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b744:	b299      	uxth	r1, r3
 800b746:	4a23      	ldr	r2, [pc, #140]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b748:	8813      	ldrh	r3, [r2, #0]
 800b74a:	f361 030a 	bfi	r3, r1, #0, #11
 800b74e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b750:	4a20      	ldr	r2, [pc, #128]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b752:	6813      	ldr	r3, [r2, #0]
 800b754:	f36f 23dc 	bfc	r3, #11, #18
 800b758:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b75a:	4a1e      	ldr	r2, [pc, #120]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b75c:	7913      	ldrb	r3, [r2, #4]
 800b75e:	f36f 1386 	bfc	r3, #6, #1
 800b762:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b764:	4a1b      	ldr	r2, [pc, #108]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b766:	7913      	ldrb	r3, [r2, #4]
 800b768:	2108      	movs	r1, #8
 800b76a:	f361 0303 	bfi	r3, r1, #0, #4
 800b76e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b770:	4a18      	ldr	r2, [pc, #96]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b772:	7913      	ldrb	r3, [r2, #4]
 800b774:	f36f 13c7 	bfc	r3, #7, #1
 800b778:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b77a:	4a16      	ldr	r2, [pc, #88]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b77c:	7913      	ldrb	r3, [r2, #4]
 800b77e:	f36f 1304 	bfc	r3, #4, #1
 800b782:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b784:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <VCU_TransmitBmsData1+0x1bc>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00c      	beq.n	800b7aa <VCU_TransmitBmsData1+0x18a>
 800b790:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <VCU_TransmitBmsData1+0x1b4>)
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b798:	b29b      	uxth	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	4910      	ldr	r1, [pc, #64]	; (800b7e0 <VCU_TransmitBmsData1+0x1c0>)
 800b79e:	4811      	ldr	r0, [pc, #68]	; (800b7e4 <VCU_TransmitBmsData1+0x1c4>)
 800b7a0:	f008 fa54 	bl	8013c4c <siprintf>
 800b7a4:	480f      	ldr	r0, [pc, #60]	; (800b7e4 <VCU_TransmitBmsData1+0x1c4>)
 800b7a6:	f7f9 fddb 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f7ff fa94 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	9999999a 	.word	0x9999999a
 800b7bc:	3fa99999 	.word	0x3fa99999
 800b7c0:	eb851eb8 	.word	0xeb851eb8
 800b7c4:	3f8eb851 	.word	0x3f8eb851
 800b7c8:	2000a664 	.word	0x2000a664
 800b7cc:	40990000 	.word	0x40990000
 800b7d0:	40df4000 	.word	0x40df4000
 800b7d4:	2000a6c4 	.word	0x2000a6c4
 800b7d8:	2000a6d0 	.word	0x2000a6d0
 800b7dc:	2000000c 	.word	0x2000000c
 800b7e0:	08018288 	.word	0x08018288
 800b7e4:	20000b64 	.word	0x20000b64

0800b7e8 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800b7ee:	f04f 0300 	mov.w	r3, #0
 800b7f2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800b7fa:	4b95      	ldr	r3, [pc, #596]	; (800ba50 <VCU_TransmitBmsData2+0x268>)
 800b7fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b800:	4618      	mov	r0, r3
 800b802:	f7f4 fe71 	bl	80004e8 <__aeabi_i2d>
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	4b92      	ldr	r3, [pc, #584]	; (800ba54 <VCU_TransmitBmsData2+0x26c>)
 800b80c:	f7f4 fed6 	bl	80005bc <__aeabi_dmul>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4610      	mov	r0, r2
 800b816:	4619      	mov	r1, r3
 800b818:	f04f 0200 	mov.w	r2, #0
 800b81c:	f04f 0300 	mov.w	r3, #0
 800b820:	f7f4 fd16 	bl	8000250 <__adddf3>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	4610      	mov	r0, r2
 800b82a:	4619      	mov	r1, r3
 800b82c:	f7f5 f9be 	bl	8000bac <__aeabi_d2f>
 800b830:	4603      	mov	r3, r0
 800b832:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7f4 fe69 	bl	800050c <__aeabi_f2d>
 800b83a:	a381      	add	r3, pc, #516	; (adr r3, 800ba40 <VCU_TransmitBmsData2+0x258>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 ffe6 	bl	8000810 <__aeabi_ddiv>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4610      	mov	r0, r2
 800b84a:	4619      	mov	r1, r3
 800b84c:	f7f5 f9ae 	bl	8000bac <__aeabi_d2f>
 800b850:	4603      	mov	r3, r0
 800b852:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800b854:	edd7 7a02 	vldr	s15, [r7, #8]
 800b858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85c:	ee17 3a90 	vmov	r3, s15
 800b860:	b29b      	uxth	r3, r3
 800b862:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800b864:	4b7a      	ldr	r3, [pc, #488]	; (800ba50 <VCU_TransmitBmsData2+0x268>)
 800b866:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f4 fe3d 	bl	80004e8 <__aeabi_i2d>
 800b86e:	a376      	add	r3, pc, #472	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fea2 	bl	80005bc <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4610      	mov	r0, r2
 800b87e:	4619      	mov	r1, r3
 800b880:	f04f 0200 	mov.w	r2, #0
 800b884:	f04f 0300 	mov.w	r3, #0
 800b888:	f7f4 fce2 	bl	8000250 <__adddf3>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4610      	mov	r0, r2
 800b892:	4619      	mov	r1, r3
 800b894:	f7f5 f98a 	bl	8000bac <__aeabi_d2f>
 800b898:	4603      	mov	r3, r0
 800b89a:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7f4 fe35 	bl	800050c <__aeabi_f2d>
 800b8a2:	a369      	add	r3, pc, #420	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 ffb2 	bl	8000810 <__aeabi_ddiv>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	f7f5 f97a 	bl	8000bac <__aeabi_d2f>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800b8bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c4:	ee17 3a90 	vmov	r3, s15
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800b8cc:	4b60      	ldr	r3, [pc, #384]	; (800ba50 <VCU_TransmitBmsData2+0x268>)
 800b8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7f4 fe09 	bl	80004e8 <__aeabi_i2d>
 800b8d6:	a35c      	add	r3, pc, #368	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f7f4 fe6e 	bl	80005bc <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	f04f 0200 	mov.w	r2, #0
 800b8ec:	f04f 0300 	mov.w	r3, #0
 800b8f0:	f7f4 fcae 	bl	8000250 <__adddf3>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f7f5 f956 	bl	8000bac <__aeabi_d2f>
 800b900:	4603      	mov	r3, r0
 800b902:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f7f4 fe01 	bl	800050c <__aeabi_f2d>
 800b90a:	a34f      	add	r3, pc, #316	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 ff7e 	bl	8000810 <__aeabi_ddiv>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4610      	mov	r0, r2
 800b91a:	4619      	mov	r1, r3
 800b91c:	f7f5 f946 	bl	8000bac <__aeabi_d2f>
 800b920:	4603      	mov	r3, r0
 800b922:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800b924:	edd7 7a02 	vldr	s15, [r7, #8]
 800b928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92c:	ee17 3a90 	vmov	r3, s15
 800b930:	b29b      	uxth	r3, r3
 800b932:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800b934:	4b46      	ldr	r3, [pc, #280]	; (800ba50 <VCU_TransmitBmsData2+0x268>)
 800b936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f4 fdd5 	bl	80004e8 <__aeabi_i2d>
 800b93e:	a342      	add	r3, pc, #264	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	f7f4 fe3a 	bl	80005bc <__aeabi_dmul>
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	4610      	mov	r0, r2
 800b94e:	4619      	mov	r1, r3
 800b950:	f04f 0200 	mov.w	r2, #0
 800b954:	f04f 0300 	mov.w	r3, #0
 800b958:	f7f4 fc7a 	bl	8000250 <__adddf3>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4610      	mov	r0, r2
 800b962:	4619      	mov	r1, r3
 800b964:	f7f5 f922 	bl	8000bac <__aeabi_d2f>
 800b968:	4603      	mov	r3, r0
 800b96a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7f4 fdcd 	bl	800050c <__aeabi_f2d>
 800b972:	a335      	add	r3, pc, #212	; (adr r3, 800ba48 <VCU_TransmitBmsData2+0x260>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 ff4a 	bl	8000810 <__aeabi_ddiv>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4610      	mov	r0, r2
 800b982:	4619      	mov	r1, r3
 800b984:	f7f5 f912 	bl	8000bac <__aeabi_d2f>
 800b988:	4603      	mov	r3, r0
 800b98a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800b98c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b994:	ee17 3a90 	vmov	r3, s15
 800b998:	b29b      	uxth	r3, r3
 800b99a:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b99c:	4b2e      	ldr	r3, [pc, #184]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b9a2:	4b2d      	ldr	r3, [pc, #180]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800b9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ba5c <VCU_TransmitBmsData2+0x274>)
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	463b      	mov	r3, r7
 800b9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9b8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b9bc:	4b24      	ldr	r3, [pc, #144]	; (800ba50 <VCU_TransmitBmsData2+0x268>)
 800b9be:	895b      	ldrh	r3, [r3, #10]
 800b9c0:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9ca:	b299      	uxth	r1, r3
 800b9cc:	4a22      	ldr	r2, [pc, #136]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9ce:	8813      	ldrh	r3, [r2, #0]
 800b9d0:	f361 030a 	bfi	r3, r1, #0, #11
 800b9d4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b9d6:	4a20      	ldr	r2, [pc, #128]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9d8:	6813      	ldr	r3, [r2, #0]
 800b9da:	f36f 23dc 	bfc	r3, #11, #18
 800b9de:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9e2:	7913      	ldrb	r3, [r2, #4]
 800b9e4:	f36f 1386 	bfc	r3, #6, #1
 800b9e8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b9ea:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9ec:	7913      	ldrb	r3, [r2, #4]
 800b9ee:	2108      	movs	r1, #8
 800b9f0:	f361 0303 	bfi	r3, r1, #0, #4
 800b9f4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b9f6:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800b9f8:	7913      	ldrb	r3, [r2, #4]
 800b9fa:	f36f 13c7 	bfc	r3, #7, #1
 800b9fe:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ba00:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800ba02:	7913      	ldrb	r3, [r2, #4]
 800ba04:	f36f 1304 	bfc	r3, #4, #1
 800ba08:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ba0a:	4b15      	ldr	r3, [pc, #84]	; (800ba60 <VCU_TransmitBmsData2+0x278>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <VCU_TransmitBmsData2+0x248>
 800ba16:	4b10      	ldr	r3, [pc, #64]	; (800ba58 <VCU_TransmitBmsData2+0x270>)
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	461a      	mov	r2, r3
 800ba22:	4910      	ldr	r1, [pc, #64]	; (800ba64 <VCU_TransmitBmsData2+0x27c>)
 800ba24:	4810      	ldr	r0, [pc, #64]	; (800ba68 <VCU_TransmitBmsData2+0x280>)
 800ba26:	f008 f911 	bl	8013c4c <siprintf>
 800ba2a:	480f      	ldr	r0, [pc, #60]	; (800ba68 <VCU_TransmitBmsData2+0x280>)
 800ba2c:	f7f9 fc98 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ba30:	2000      	movs	r0, #0
 800ba32:	f7ff f951 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800ba36:	bf00      	nop
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	9999999a 	.word	0x9999999a
 800ba44:	3f599999 	.word	0x3f599999
 800ba48:	d2f1a9fc 	.word	0xd2f1a9fc
 800ba4c:	3f50624d 	.word	0x3f50624d
 800ba50:	2000a664 	.word	0x2000a664
 800ba54:	3fe00000 	.word	0x3fe00000
 800ba58:	2000a6c4 	.word	0x2000a6c4
 800ba5c:	2000a6d0 	.word	0x2000a6d0
 800ba60:	2000000c 	.word	0x2000000c
 800ba64:	080182a4 	.word	0x080182a4
 800ba68:	20000b64 	.word	0x20000b64
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800ba7c:	f04f 0300 	mov.w	r3, #0
 800ba80:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800ba82:	4b89      	ldr	r3, [pc, #548]	; (800bca8 <VCU_TransmitBmsData3+0x238>)
 800ba84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f4 fd2e 	bl	80004e8 <__aeabi_i2d>
 800ba8c:	a380      	add	r3, pc, #512	; (adr r3, 800bc90 <VCU_TransmitBmsData3+0x220>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fd93 	bl	80005bc <__aeabi_dmul>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	a37e      	add	r3, pc, #504	; (adr r3, 800bc98 <VCU_TransmitBmsData3+0x228>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fbd2 	bl	800024c <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4610      	mov	r0, r2
 800baae:	4619      	mov	r1, r3
 800bab0:	f7f5 f87c 	bl	8000bac <__aeabi_d2f>
 800bab4:	4603      	mov	r3, r0
 800bab6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7f4 fd27 	bl	800050c <__aeabi_f2d>
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	4b7a      	ldr	r3, [pc, #488]	; (800bcac <VCU_TransmitBmsData3+0x23c>)
 800bac4:	f7f4 fea4 	bl	8000810 <__aeabi_ddiv>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4610      	mov	r0, r2
 800bace:	4619      	mov	r1, r3
 800bad0:	a373      	add	r3, pc, #460	; (adr r3, 800bca0 <VCU_TransmitBmsData3+0x230>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fbbb 	bl	8000250 <__adddf3>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4610      	mov	r0, r2
 800bae0:	4619      	mov	r1, r3
 800bae2:	f7f5 f863 	bl	8000bac <__aeabi_d2f>
 800bae6:	4603      	mov	r3, r0
 800bae8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800baea:	edd7 7a02 	vldr	s15, [r7, #8]
 800baee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf2:	ee17 3a90 	vmov	r3, s15
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800bafa:	4b6b      	ldr	r3, [pc, #428]	; (800bca8 <VCU_TransmitBmsData3+0x238>)
 800bafc:	8bdb      	ldrh	r3, [r3, #30]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f4 fcf2 	bl	80004e8 <__aeabi_i2d>
 800bb04:	a362      	add	r3, pc, #392	; (adr r3, 800bc90 <VCU_TransmitBmsData3+0x220>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fd57 	bl	80005bc <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4610      	mov	r0, r2
 800bb14:	4619      	mov	r1, r3
 800bb16:	a360      	add	r3, pc, #384	; (adr r3, 800bc98 <VCU_TransmitBmsData3+0x228>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	f7f4 fb96 	bl	800024c <__aeabi_dsub>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4610      	mov	r0, r2
 800bb26:	4619      	mov	r1, r3
 800bb28:	f7f5 f840 	bl	8000bac <__aeabi_d2f>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7f4 fceb 	bl	800050c <__aeabi_f2d>
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	4b5c      	ldr	r3, [pc, #368]	; (800bcac <VCU_TransmitBmsData3+0x23c>)
 800bb3c:	f7f4 fe68 	bl	8000810 <__aeabi_ddiv>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4610      	mov	r0, r2
 800bb46:	4619      	mov	r1, r3
 800bb48:	a355      	add	r3, pc, #340	; (adr r3, 800bca0 <VCU_TransmitBmsData3+0x230>)
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fb7f 	bl	8000250 <__adddf3>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4610      	mov	r0, r2
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7f5 f827 	bl	8000bac <__aeabi_d2f>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800bb62:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb6a:	ee17 3a90 	vmov	r3, s15
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800bb72:	4b4d      	ldr	r3, [pc, #308]	; (800bca8 <VCU_TransmitBmsData3+0x238>)
 800bb74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f4 fcb6 	bl	80004e8 <__aeabi_i2d>
 800bb7c:	a344      	add	r3, pc, #272	; (adr r3, 800bc90 <VCU_TransmitBmsData3+0x220>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fd1b 	bl	80005bc <__aeabi_dmul>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	a342      	add	r3, pc, #264	; (adr r3, 800bc98 <VCU_TransmitBmsData3+0x228>)
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f7f4 fb5a 	bl	800024c <__aeabi_dsub>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	4619      	mov	r1, r3
 800bba0:	f7f5 f804 	bl	8000bac <__aeabi_d2f>
 800bba4:	4603      	mov	r3, r0
 800bba6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7f4 fcaf 	bl	800050c <__aeabi_f2d>
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	4b3e      	ldr	r3, [pc, #248]	; (800bcac <VCU_TransmitBmsData3+0x23c>)
 800bbb4:	f7f4 fe2c 	bl	8000810 <__aeabi_ddiv>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	a337      	add	r3, pc, #220	; (adr r3, 800bca0 <VCU_TransmitBmsData3+0x230>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fb43 	bl	8000250 <__adddf3>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4610      	mov	r0, r2
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7f4 ffeb 	bl	8000bac <__aeabi_d2f>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800bbda:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe2:	ee17 3a90 	vmov	r3, s15
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bbee:	4b30      	ldr	r3, [pc, #192]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bbf4:	4b2e      	ldr	r3, [pc, #184]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bbfa:	4b2d      	ldr	r3, [pc, #180]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800bc00:	4b2c      	ldr	r3, [pc, #176]	; (800bcb4 <VCU_TransmitBmsData3+0x244>)
 800bc02:	461a      	mov	r2, r3
 800bc04:	463b      	mov	r3, r7
 800bc06:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc0a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bc0e:	4b26      	ldr	r3, [pc, #152]	; (800bca8 <VCU_TransmitBmsData3+0x238>)
 800bc10:	895b      	ldrh	r3, [r3, #10]
 800bc12:	f203 4323 	addw	r3, r3, #1059	; 0x423
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc1c:	b299      	uxth	r1, r3
 800bc1e:	4a24      	ldr	r2, [pc, #144]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc20:	8813      	ldrh	r3, [r2, #0]
 800bc22:	f361 030a 	bfi	r3, r1, #0, #11
 800bc26:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800bc28:	4a21      	ldr	r2, [pc, #132]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc2a:	6813      	ldr	r3, [r2, #0]
 800bc2c:	f36f 23dc 	bfc	r3, #11, #18
 800bc30:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bc32:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc34:	7913      	ldrb	r3, [r2, #4]
 800bc36:	f36f 1386 	bfc	r3, #6, #1
 800bc3a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bc3c:	4a1c      	ldr	r2, [pc, #112]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc3e:	7913      	ldrb	r3, [r2, #4]
 800bc40:	2108      	movs	r1, #8
 800bc42:	f361 0303 	bfi	r3, r1, #0, #4
 800bc46:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bc48:	4a19      	ldr	r2, [pc, #100]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc4a:	7913      	ldrb	r3, [r2, #4]
 800bc4c:	f36f 13c7 	bfc	r3, #7, #1
 800bc50:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bc52:	4a17      	ldr	r2, [pc, #92]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc54:	7913      	ldrb	r3, [r2, #4]
 800bc56:	f36f 1304 	bfc	r3, #4, #1
 800bc5a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bc5c:	4b16      	ldr	r3, [pc, #88]	; (800bcb8 <VCU_TransmitBmsData3+0x248>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00c      	beq.n	800bc82 <VCU_TransmitBmsData3+0x212>
 800bc68:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <VCU_TransmitBmsData3+0x240>)
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	461a      	mov	r2, r3
 800bc74:	4911      	ldr	r1, [pc, #68]	; (800bcbc <VCU_TransmitBmsData3+0x24c>)
 800bc76:	4812      	ldr	r0, [pc, #72]	; (800bcc0 <VCU_TransmitBmsData3+0x250>)
 800bc78:	f007 ffe8 	bl	8013c4c <siprintf>
 800bc7c:	4810      	ldr	r0, [pc, #64]	; (800bcc0 <VCU_TransmitBmsData3+0x250>)
 800bc7e:	f7f9 fb6f 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bc82:	2000      	movs	r0, #0
 800bc84:	f7ff f828 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	47ae147b 	.word	0x47ae147b
 800bc94:	3f847ae1 	.word	0x3f847ae1
 800bc98:	cccccccd 	.word	0xcccccccd
 800bc9c:	404baccc 	.word	0x404baccc
 800bca0:	00000000 	.word	0x00000000
 800bca4:	40c11000 	.word	0x40c11000
 800bca8:	2000a664 	.word	0x2000a664
 800bcac:	3fa00000 	.word	0x3fa00000
 800bcb0:	2000a6c4 	.word	0x2000a6c4
 800bcb4:	2000a6d0 	.word	0x2000a6d0
 800bcb8:	2000000c 	.word	0x2000000c
 800bcbc:	080182c0 	.word	0x080182c0
 800bcc0:	20000b64 	.word	0x20000b64
 800bcc4:	00000000 	.word	0x00000000

0800bcc8 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800bcce:	f04f 0300 	mov.w	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800bcda:	4b83      	ldr	r3, [pc, #524]	; (800bee8 <VCU_TransmitBmsData5+0x220>)
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f4 fbf2 	bl	80004c8 <__aeabi_ui2d>
 800bce4:	a37c      	add	r3, pc, #496	; (adr r3, 800bed8 <VCU_TransmitBmsData5+0x210>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fc67 	bl	80005bc <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f04f 0200 	mov.w	r2, #0
 800bcfa:	4b7c      	ldr	r3, [pc, #496]	; (800beec <VCU_TransmitBmsData5+0x224>)
 800bcfc:	f7f4 faa6 	bl	800024c <__aeabi_dsub>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4610      	mov	r0, r2
 800bd06:	4619      	mov	r1, r3
 800bd08:	f7f4 ff50 	bl	8000bac <__aeabi_d2f>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7f4 fbfb 	bl	800050c <__aeabi_f2d>
 800bd16:	a370      	add	r3, pc, #448	; (adr r3, 800bed8 <VCU_TransmitBmsData5+0x210>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fd78 	bl	8000810 <__aeabi_ddiv>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4610      	mov	r0, r2
 800bd26:	4619      	mov	r1, r3
 800bd28:	f04f 0200 	mov.w	r2, #0
 800bd2c:	4b70      	ldr	r3, [pc, #448]	; (800bef0 <VCU_TransmitBmsData5+0x228>)
 800bd2e:	f7f4 fa8f 	bl	8000250 <__adddf3>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4610      	mov	r0, r2
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f7f4 ff37 	bl	8000bac <__aeabi_d2f>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800bd42:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4a:	ee17 3a90 	vmov	r3, s15
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800bd52:	4b65      	ldr	r3, [pc, #404]	; (800bee8 <VCU_TransmitBmsData5+0x220>)
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7f4 fbb6 	bl	80004c8 <__aeabi_ui2d>
 800bd5c:	a35e      	add	r3, pc, #376	; (adr r3, 800bed8 <VCU_TransmitBmsData5+0x210>)
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f7f4 fc2b 	bl	80005bc <__aeabi_dmul>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	4b5e      	ldr	r3, [pc, #376]	; (800beec <VCU_TransmitBmsData5+0x224>)
 800bd74:	f7f4 fa6a 	bl	800024c <__aeabi_dsub>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f7f4 ff14 	bl	8000bac <__aeabi_d2f>
 800bd84:	4603      	mov	r3, r0
 800bd86:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f7f4 fbbf 	bl	800050c <__aeabi_f2d>
 800bd8e:	a352      	add	r3, pc, #328	; (adr r3, 800bed8 <VCU_TransmitBmsData5+0x210>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 fd3c 	bl	8000810 <__aeabi_ddiv>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f04f 0200 	mov.w	r2, #0
 800bda4:	4b52      	ldr	r3, [pc, #328]	; (800bef0 <VCU_TransmitBmsData5+0x228>)
 800bda6:	f7f4 fa53 	bl	8000250 <__adddf3>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4610      	mov	r0, r2
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	f7f4 fefb 	bl	8000bac <__aeabi_d2f>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800bdba:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc2:	ee17 3a90 	vmov	r3, s15
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800bdca:	4b47      	ldr	r3, [pc, #284]	; (800bee8 <VCU_TransmitBmsData5+0x220>)
 800bdcc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f4 fb8a 	bl	80004e8 <__aeabi_i2d>
 800bdd4:	a342      	add	r3, pc, #264	; (adr r3, 800bee0 <VCU_TransmitBmsData5+0x218>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fbef 	bl	80005bc <__aeabi_dmul>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4610      	mov	r0, r2
 800bde4:	4619      	mov	r1, r3
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	f04f 0300 	mov.w	r3, #0
 800bdee:	f7f4 fa2f 	bl	8000250 <__adddf3>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7f4 fed7 	bl	8000bac <__aeabi_d2f>
 800bdfe:	4603      	mov	r3, r0
 800be00:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7f4 fb82 	bl	800050c <__aeabi_f2d>
 800be08:	a333      	add	r3, pc, #204	; (adr r3, 800bed8 <VCU_TransmitBmsData5+0x210>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 fcff 	bl	8000810 <__aeabi_ddiv>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4610      	mov	r0, r2
 800be18:	4619      	mov	r1, r3
 800be1a:	f7f4 fec7 	bl	8000bac <__aeabi_d2f>
 800be1e:	4603      	mov	r3, r0
 800be20:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800be22:	edd7 7a02 	vldr	s15, [r7, #8]
 800be26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be2a:	ee17 3a90 	vmov	r3, s15
 800be2e:	b29b      	uxth	r3, r3
 800be30:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800be36:	4b2f      	ldr	r3, [pc, #188]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800be3c:	4b2d      	ldr	r3, [pc, #180]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be3e:	2200      	movs	r2, #0
 800be40:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800be42:	4b2c      	ldr	r3, [pc, #176]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be44:	2200      	movs	r2, #0
 800be46:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800be48:	4b2b      	ldr	r3, [pc, #172]	; (800bef8 <VCU_TransmitBmsData5+0x230>)
 800be4a:	461a      	mov	r2, r3
 800be4c:	463b      	mov	r3, r7
 800be4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be52:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800be56:	4b24      	ldr	r3, [pc, #144]	; (800bee8 <VCU_TransmitBmsData5+0x220>)
 800be58:	895b      	ldrh	r3, [r3, #10]
 800be5a:	f203 4325 	addw	r3, r3, #1061	; 0x425
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be64:	b299      	uxth	r1, r3
 800be66:	4a23      	ldr	r2, [pc, #140]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be68:	8813      	ldrh	r3, [r2, #0]
 800be6a:	f361 030a 	bfi	r3, r1, #0, #11
 800be6e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800be70:	4a20      	ldr	r2, [pc, #128]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be72:	6813      	ldr	r3, [r2, #0]
 800be74:	f36f 23dc 	bfc	r3, #11, #18
 800be78:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800be7a:	4a1e      	ldr	r2, [pc, #120]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be7c:	7913      	ldrb	r3, [r2, #4]
 800be7e:	f36f 1386 	bfc	r3, #6, #1
 800be82:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800be84:	4a1b      	ldr	r2, [pc, #108]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be86:	7913      	ldrb	r3, [r2, #4]
 800be88:	2108      	movs	r1, #8
 800be8a:	f361 0303 	bfi	r3, r1, #0, #4
 800be8e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800be90:	4a18      	ldr	r2, [pc, #96]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be92:	7913      	ldrb	r3, [r2, #4]
 800be94:	f36f 13c7 	bfc	r3, #7, #1
 800be98:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800be9a:	4a16      	ldr	r2, [pc, #88]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800be9c:	7913      	ldrb	r3, [r2, #4]
 800be9e:	f36f 1304 	bfc	r3, #4, #1
 800bea2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <VCU_TransmitBmsData5+0x234>)
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00c      	beq.n	800beca <VCU_TransmitBmsData5+0x202>
 800beb0:	4b10      	ldr	r3, [pc, #64]	; (800bef4 <VCU_TransmitBmsData5+0x22c>)
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beb8:	b29b      	uxth	r3, r3
 800beba:	461a      	mov	r2, r3
 800bebc:	4910      	ldr	r1, [pc, #64]	; (800bf00 <VCU_TransmitBmsData5+0x238>)
 800bebe:	4811      	ldr	r0, [pc, #68]	; (800bf04 <VCU_TransmitBmsData5+0x23c>)
 800bec0:	f007 fec4 	bl	8013c4c <siprintf>
 800bec4:	480f      	ldr	r0, [pc, #60]	; (800bf04 <VCU_TransmitBmsData5+0x23c>)
 800bec6:	f7f9 fa4b 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800beca:	2000      	movs	r0, #0
 800becc:	f7fe ff04 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800bed0:	bf00      	nop
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	9999999a 	.word	0x9999999a
 800bedc:	3fa99999 	.word	0x3fa99999
 800bee0:	eb851eb8 	.word	0xeb851eb8
 800bee4:	3f8eb851 	.word	0x3f8eb851
 800bee8:	2000a664 	.word	0x2000a664
 800beec:	40990000 	.word	0x40990000
 800bef0:	40df4000 	.word	0x40df4000
 800bef4:	2000a6c4 	.word	0x2000a6c4
 800bef8:	2000a6d0 	.word	0x2000a6d0
 800befc:	2000000c 	.word	0x2000000c
 800bf00:	080182dc 	.word	0x080182dc
 800bf04:	20000b64 	.word	0x20000b64

0800bf08 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800bf12:	2300      	movs	r3, #0
 800bf14:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800bf16:	4b2d      	ldr	r3, [pc, #180]	; (800bfcc <VCU_TransmitBmsData8+0xc4>)
 800bf18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bf1c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800bf1e:	2300      	movs	r3, #0
 800bf20:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800bf22:	4b2a      	ldr	r3, [pc, #168]	; (800bfcc <VCU_TransmitBmsData8+0xc4>)
 800bf24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bf28:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bf2a:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bf30:	4b27      	ldr	r3, [pc, #156]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bf36:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800bf3c:	4b25      	ldr	r3, [pc, #148]	; (800bfd4 <VCU_TransmitBmsData8+0xcc>)
 800bf3e:	461a      	mov	r2, r3
 800bf40:	463b      	mov	r3, r7
 800bf42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf46:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bf4a:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <VCU_TransmitBmsData8+0xc4>)
 800bf4c:	895b      	ldrh	r3, [r3, #10]
 800bf4e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf58:	b299      	uxth	r1, r3
 800bf5a:	4a1d      	ldr	r2, [pc, #116]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf5c:	8813      	ldrh	r3, [r2, #0]
 800bf5e:	f361 030a 	bfi	r3, r1, #0, #11
 800bf62:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bf64:	4a1a      	ldr	r2, [pc, #104]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf66:	6813      	ldr	r3, [r2, #0]
 800bf68:	f36f 23dc 	bfc	r3, #11, #18
 800bf6c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bf6e:	4a18      	ldr	r2, [pc, #96]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf70:	7913      	ldrb	r3, [r2, #4]
 800bf72:	f36f 1386 	bfc	r3, #6, #1
 800bf76:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bf78:	4a15      	ldr	r2, [pc, #84]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf7a:	7913      	ldrb	r3, [r2, #4]
 800bf7c:	2108      	movs	r1, #8
 800bf7e:	f361 0303 	bfi	r3, r1, #0, #4
 800bf82:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bf84:	4a12      	ldr	r2, [pc, #72]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf86:	7913      	ldrb	r3, [r2, #4]
 800bf88:	f36f 13c7 	bfc	r3, #7, #1
 800bf8c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bf8e:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bf90:	7913      	ldrb	r3, [r2, #4]
 800bf92:	f36f 1304 	bfc	r3, #4, #1
 800bf96:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bf98:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <VCU_TransmitBmsData8+0xd0>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <VCU_TransmitBmsData8+0xb6>
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <VCU_TransmitBmsData8+0xc8>)
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	461a      	mov	r2, r3
 800bfb0:	490a      	ldr	r1, [pc, #40]	; (800bfdc <VCU_TransmitBmsData8+0xd4>)
 800bfb2:	480b      	ldr	r0, [pc, #44]	; (800bfe0 <VCU_TransmitBmsData8+0xd8>)
 800bfb4:	f007 fe4a 	bl	8013c4c <siprintf>
 800bfb8:	4809      	ldr	r0, [pc, #36]	; (800bfe0 <VCU_TransmitBmsData8+0xd8>)
 800bfba:	f7f9 f9d1 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f7fe fe8a 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2000a664 	.word	0x2000a664
 800bfd0:	2000a6c4 	.word	0x2000a6c4
 800bfd4:	2000a6d0 	.word	0x2000a6d0
 800bfd8:	2000000c 	.word	0x2000000c
 800bfdc:	080182f8 	.word	0x080182f8
 800bfe0:	20000b64 	.word	0x20000b64

0800bfe4 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800bfee:	2300      	movs	r3, #0
 800bff0:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800bff2:	4b2d      	ldr	r3, [pc, #180]	; (800c0a8 <VCU_TransmitBmsData9+0xc4>)
 800bff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bff8:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800bffa:	2300      	movs	r3, #0
 800bffc:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800bffe:	4b2a      	ldr	r3, [pc, #168]	; (800c0a8 <VCU_TransmitBmsData9+0xc4>)
 800c000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c004:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c006:	4b29      	ldr	r3, [pc, #164]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c00c:	4b27      	ldr	r3, [pc, #156]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c00e:	2200      	movs	r2, #0
 800c010:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c012:	4b26      	ldr	r3, [pc, #152]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c014:	2200      	movs	r2, #0
 800c016:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800c018:	4b25      	ldr	r3, [pc, #148]	; (800c0b0 <VCU_TransmitBmsData9+0xcc>)
 800c01a:	461a      	mov	r2, r3
 800c01c:	463b      	mov	r3, r7
 800c01e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c022:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c026:	4b20      	ldr	r3, [pc, #128]	; (800c0a8 <VCU_TransmitBmsData9+0xc4>)
 800c028:	895b      	ldrh	r3, [r3, #10]
 800c02a:	f203 4329 	addw	r3, r3, #1065	; 0x429
 800c02e:	b29b      	uxth	r3, r3
 800c030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c034:	b299      	uxth	r1, r3
 800c036:	4a1d      	ldr	r2, [pc, #116]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c038:	8813      	ldrh	r3, [r2, #0]
 800c03a:	f361 030a 	bfi	r3, r1, #0, #11
 800c03e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c040:	4a1a      	ldr	r2, [pc, #104]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	f36f 23dc 	bfc	r3, #11, #18
 800c048:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c04a:	4a18      	ldr	r2, [pc, #96]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c04c:	7913      	ldrb	r3, [r2, #4]
 800c04e:	f36f 1386 	bfc	r3, #6, #1
 800c052:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c054:	4a15      	ldr	r2, [pc, #84]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c056:	7913      	ldrb	r3, [r2, #4]
 800c058:	2108      	movs	r1, #8
 800c05a:	f361 0303 	bfi	r3, r1, #0, #4
 800c05e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c060:	4a12      	ldr	r2, [pc, #72]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c062:	7913      	ldrb	r3, [r2, #4]
 800c064:	f36f 13c7 	bfc	r3, #7, #1
 800c068:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c06a:	4a10      	ldr	r2, [pc, #64]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c06c:	7913      	ldrb	r3, [r2, #4]
 800c06e:	f36f 1304 	bfc	r3, #4, #1
 800c072:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <VCU_TransmitBmsData9+0xd0>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 0304 	and.w	r3, r3, #4
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00c      	beq.n	800c09a <VCU_TransmitBmsData9+0xb6>
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <VCU_TransmitBmsData9+0xc8>)
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c088:	b29b      	uxth	r3, r3
 800c08a:	461a      	mov	r2, r3
 800c08c:	490a      	ldr	r1, [pc, #40]	; (800c0b8 <VCU_TransmitBmsData9+0xd4>)
 800c08e:	480b      	ldr	r0, [pc, #44]	; (800c0bc <VCU_TransmitBmsData9+0xd8>)
 800c090:	f007 fddc 	bl	8013c4c <siprintf>
 800c094:	4809      	ldr	r0, [pc, #36]	; (800c0bc <VCU_TransmitBmsData9+0xd8>)
 800c096:	f7f9 f963 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c09a:	2000      	movs	r0, #0
 800c09c:	f7fe fe1c 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	2000a664 	.word	0x2000a664
 800c0ac:	2000a6c4 	.word	0x2000a6c4
 800c0b0:	2000a6d0 	.word	0x2000a6d0
 800c0b4:	2000000c 	.word	0x2000000c
 800c0b8:	08018314 	.word	0x08018314
 800c0bc:	20000b64 	.word	0x20000b64

0800c0c0 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c0d2:	4b28      	ldr	r3, [pc, #160]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c0d8:	4b26      	ldr	r3, [pc, #152]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c0de:	4b25      	ldr	r3, [pc, #148]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800c0e4:	4b24      	ldr	r3, [pc, #144]	; (800c178 <VCU_TransmitBmsData10+0xb8>)
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0ee:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c0f2:	4b22      	ldr	r3, [pc, #136]	; (800c17c <VCU_TransmitBmsData10+0xbc>)
 800c0f4:	895b      	ldrh	r3, [r3, #10]
 800c0f6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c100:	b299      	uxth	r1, r3
 800c102:	4a1c      	ldr	r2, [pc, #112]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c104:	8813      	ldrh	r3, [r2, #0]
 800c106:	f361 030a 	bfi	r3, r1, #0, #11
 800c10a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c10c:	4a19      	ldr	r2, [pc, #100]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c10e:	6813      	ldr	r3, [r2, #0]
 800c110:	f36f 23dc 	bfc	r3, #11, #18
 800c114:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c116:	4a17      	ldr	r2, [pc, #92]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c118:	7913      	ldrb	r3, [r2, #4]
 800c11a:	f36f 1386 	bfc	r3, #6, #1
 800c11e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c120:	4a14      	ldr	r2, [pc, #80]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c122:	7913      	ldrb	r3, [r2, #4]
 800c124:	2108      	movs	r1, #8
 800c126:	f361 0303 	bfi	r3, r1, #0, #4
 800c12a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c12c:	4a11      	ldr	r2, [pc, #68]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c12e:	7913      	ldrb	r3, [r2, #4]
 800c130:	f36f 13c7 	bfc	r3, #7, #1
 800c134:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c136:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c138:	7913      	ldrb	r3, [r2, #4]
 800c13a:	f36f 1304 	bfc	r3, #4, #1
 800c13e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c140:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <VCU_TransmitBmsData10+0xc0>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00c      	beq.n	800c166 <VCU_TransmitBmsData10+0xa6>
 800c14c:	4b09      	ldr	r3, [pc, #36]	; (800c174 <VCU_TransmitBmsData10+0xb4>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c154:	b29b      	uxth	r3, r3
 800c156:	461a      	mov	r2, r3
 800c158:	490a      	ldr	r1, [pc, #40]	; (800c184 <VCU_TransmitBmsData10+0xc4>)
 800c15a:	480b      	ldr	r0, [pc, #44]	; (800c188 <VCU_TransmitBmsData10+0xc8>)
 800c15c:	f007 fd76 	bl	8013c4c <siprintf>
 800c160:	4809      	ldr	r0, [pc, #36]	; (800c188 <VCU_TransmitBmsData10+0xc8>)
 800c162:	f7f9 f8fd 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c166:	2000      	movs	r0, #0
 800c168:	f7fe fdb6 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	2000a6c4 	.word	0x2000a6c4
 800c178:	2000a6d0 	.word	0x2000a6d0
 800c17c:	2000a664 	.word	0x2000a664
 800c180:	2000000c 	.word	0x2000000c
 800c184:	08018330 	.word	0x08018330
 800c188:	20000b64 	.word	0x20000b64

0800c18c <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c192:	4b84      	ldr	r3, [pc, #528]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c194:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fd fe8f 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c1a2:	4b80      	ldr	r3, [pc, #512]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c1a4:	7d1b      	ldrb	r3, [r3, #20]
 800c1a6:	7bfa      	ldrb	r2, [r7, #15]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	f000 80f7 	beq.w	800c39c <VCU_TransmitModuleState+0x210>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleState.module_id                   = pack.dmcModuleId;
 800c1ae:	4b7d      	ldr	r3, [pc, #500]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c1b0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c1b4:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	4a7b      	ldr	r2, [pc, #492]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c1ba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c1be:	fb01 f303 	mul.w	r3, r1, r3
 800c1c2:	4413      	add	r3, r2
 800c1c4:	332b      	adds	r3, #43	; 0x2b
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800c1ca:	7bfb      	ldrb	r3, [r7, #15]
 800c1cc:	4a76      	ldr	r2, [pc, #472]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c1ce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c1d2:	fb01 f303 	mul.w	r3, r1, r3
 800c1d6:	4413      	add	r3, r2
 800c1d8:	3327      	adds	r3, #39	; 0x27
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	797b      	ldrb	r3, [r7, #5]
 800c1e4:	f362 0301 	bfi	r3, r2, #0, #2
 800c1e8:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	4a6e      	ldr	r2, [pc, #440]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c1ee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c1f2:	fb01 f303 	mul.w	r3, r1, r3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3326      	adds	r3, #38	; 0x26
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	b2da      	uxtb	r2, r3
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	f362 0383 	bfi	r3, r2, #2, #2
 800c208:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	4a66      	ldr	r2, [pc, #408]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c20e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c212:	fb01 f303 	mul.w	r3, r1, r3
 800c216:	4413      	add	r3, r2
 800c218:	332c      	adds	r3, #44	; 0x2c
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f362 2391 	bfi	r3, r2, #10, #8
 800c222:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4a60      	ldr	r2, [pc, #384]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c228:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c22c:	fb01 f303 	mul.w	r3, r1, r3
 800c230:	4413      	add	r3, r2
 800c232:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c236:	789b      	ldrb	r3, [r3, #2]
 800c238:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	b25a      	sxtb	r2, r3
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	4959      	ldr	r1, [pc, #356]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c244:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c248:	fb00 f303 	mul.w	r3, r0, r3
 800c24c:	440b      	add	r3, r1
 800c24e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c252:	789b      	ldrb	r3, [r3, #2]
 800c254:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	b25b      	sxtb	r3, r3
 800c25e:	4313      	orrs	r3, r2
 800c260:	b25a      	sxtb	r2, r3
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	4950      	ldr	r1, [pc, #320]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c266:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c26a:	fb00 f303 	mul.w	r3, r0, r3
 800c26e:	440b      	add	r3, r1
 800c270:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c274:	789b      	ldrb	r3, [r3, #2]
 800c276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	b25b      	sxtb	r3, r3
 800c280:	4313      	orrs	r3, r2
 800c282:	b25a      	sxtb	r2, r3
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	4948      	ldr	r1, [pc, #288]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c288:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c28c:	fb00 f303 	mul.w	r3, r0, r3
 800c290:	440b      	add	r3, r1
 800c292:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c296:	789b      	ldrb	r3, [r3, #2]
 800c298:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	b25b      	sxtb	r3, r3
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b25a      	sxtb	r2, r3
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	493f      	ldr	r1, [pc, #252]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c2aa:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c2ae:	fb00 f303 	mul.w	r3, r0, r3
 800c2b2:	440b      	add	r3, r1
 800c2b4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c2b8:	789b      	ldrb	r3, [r3, #2]
 800c2ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	011b      	lsls	r3, r3, #4
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	88fb      	ldrh	r3, [r7, #6]
 800c2cc:	f362 138d 	bfi	r3, r2, #6, #8
 800c2d0:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800c2d2:	79bb      	ldrb	r3, [r7, #6]
 800c2d4:	f36f 1345 	bfc	r3, #5, #1
 800c2d8:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800c2da:	79bb      	ldrb	r3, [r7, #6]
 800c2dc:	f36f 1304 	bfc	r3, #4, #1
 800c2e0:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800c2e2:	4b30      	ldr	r3, [pc, #192]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c2e4:	7d1b      	ldrb	r3, [r3, #20]
 800c2e6:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800c2e8:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c2ea:	7ddb      	ldrb	r3, [r3, #23]
 800c2ec:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	4a2d      	ldr	r2, [pc, #180]	; (800c3a8 <VCU_TransmitModuleState+0x21c>)
 800c2f2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c2f6:	fb01 f303 	mul.w	r3, r1, r3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	332d      	adds	r3, #45	; 0x2d
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	72fb      	strb	r3, [r7, #11]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c302:	4b2a      	ldr	r3, [pc, #168]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c304:	2200      	movs	r2, #0
 800c306:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c308:	4b28      	ldr	r3, [pc, #160]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c30e:	4b27      	ldr	r3, [pc, #156]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c310:	2200      	movs	r2, #0
 800c312:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800c314:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <VCU_TransmitModuleState+0x224>)
 800c316:	461a      	mov	r2, r3
 800c318:	1d3b      	adds	r3, r7, #4
 800c31a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c31e:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c322:	4b20      	ldr	r3, [pc, #128]	; (800c3a4 <VCU_TransmitModuleState+0x218>)
 800c324:	895b      	ldrh	r3, [r3, #10]
 800c326:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c330:	b299      	uxth	r1, r3
 800c332:	4a1e      	ldr	r2, [pc, #120]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c334:	8813      	ldrh	r3, [r2, #0]
 800c336:	f361 030a 	bfi	r3, r1, #0, #11
 800c33a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c33c:	4a1b      	ldr	r2, [pc, #108]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	f36f 23dc 	bfc	r3, #11, #18
 800c344:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c346:	4a19      	ldr	r2, [pc, #100]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c348:	7913      	ldrb	r3, [r2, #4]
 800c34a:	f36f 1386 	bfc	r3, #6, #1
 800c34e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c350:	4a16      	ldr	r2, [pc, #88]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c352:	7913      	ldrb	r3, [r2, #4]
 800c354:	2108      	movs	r1, #8
 800c356:	f361 0303 	bfi	r3, r1, #0, #4
 800c35a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c35c:	4a13      	ldr	r2, [pc, #76]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c35e:	7913      	ldrb	r3, [r2, #4]
 800c360:	f36f 13c7 	bfc	r3, #7, #1
 800c364:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c366:	4a11      	ldr	r2, [pc, #68]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c368:	7913      	ldrb	r3, [r2, #4]
 800c36a:	f36f 1304 	bfc	r3, #4, #1
 800c36e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c370:	4b10      	ldr	r3, [pc, #64]	; (800c3b4 <VCU_TransmitModuleState+0x228>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00c      	beq.n	800c396 <VCU_TransmitModuleState+0x20a>
 800c37c:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <VCU_TransmitModuleState+0x220>)
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c384:	b29b      	uxth	r3, r3
 800c386:	461a      	mov	r2, r3
 800c388:	490b      	ldr	r1, [pc, #44]	; (800c3b8 <VCU_TransmitModuleState+0x22c>)
 800c38a:	480c      	ldr	r0, [pc, #48]	; (800c3bc <VCU_TransmitModuleState+0x230>)
 800c38c:	f007 fc5e 	bl	8013c4c <siprintf>
 800c390:	480a      	ldr	r0, [pc, #40]	; (800c3bc <VCU_TransmitModuleState+0x230>)
 800c392:	f7f8 ffe5 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c396:	2000      	movs	r0, #0
 800c398:	f7fe fc9e 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c39c:	bf00      	nop
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	2000a664 	.word	0x2000a664
 800c3a8:	20000de4 	.word	0x20000de4
 800c3ac:	2000a6c4 	.word	0x2000a6c4
 800c3b0:	2000a6d0 	.word	0x2000a6d0
 800c3b4:	2000000c 	.word	0x2000000c
 800c3b8:	0801834c 	.word	0x0801834c
 800c3bc:	20000b64 	.word	0x20000b64

0800c3c0 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800c3c0:	b590      	push	{r4, r7, lr}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c3c6:	4b3d      	ldr	r3, [pc, #244]	; (800c4bc <VCU_TransmitModulePower+0xfc>)
 800c3c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fd fd75 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c3d6:	4b39      	ldr	r3, [pc, #228]	; (800c4bc <VCU_TransmitModulePower+0xfc>)
 800c3d8:	7d1b      	ldrb	r3, [r3, #20]
 800c3da:	7bfa      	ldrb	r2, [r7, #15]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d069      	beq.n	800c4b4 <VCU_TransmitModulePower+0xf4>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    modulePower.module_id       = pack.dmcModuleId;
 800c3e0:	4b36      	ldr	r3, [pc, #216]	; (800c4bc <VCU_TransmitModulePower+0xfc>)
 800c3e2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c3e6:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	4a35      	ldr	r2, [pc, #212]	; (800c4c0 <VCU_TransmitModulePower+0x100>)
 800c3ec:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c3f0:	fb01 f303 	mul.w	r3, r1, r3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	3316      	adds	r3, #22
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	4a30      	ldr	r2, [pc, #192]	; (800c4c0 <VCU_TransmitModulePower+0x100>)
 800c400:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c404:	fb01 f303 	mul.w	r3, r1, r3
 800c408:	4413      	add	r3, r2
 800c40a:	3314      	adds	r3, #20
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	813b      	strh	r3, [r7, #8]
 800c416:	2300      	movs	r3, #0
 800c418:	72bb      	strb	r3, [r7, #10]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c41a:	4b2a      	ldr	r3, [pc, #168]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c420:	4b28      	ldr	r3, [pc, #160]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c422:	2200      	movs	r2, #0
 800c424:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c426:	4b27      	ldr	r3, [pc, #156]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c428:	2200      	movs	r2, #0
 800c42a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800c42c:	4b26      	ldr	r3, [pc, #152]	; (800c4c8 <VCU_TransmitModulePower+0x108>)
 800c42e:	461c      	mov	r4, r3
 800c430:	463b      	mov	r3, r7
 800c432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c436:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c43a:	4b20      	ldr	r3, [pc, #128]	; (800c4bc <VCU_TransmitModulePower+0xfc>)
 800c43c:	895b      	ldrh	r3, [r3, #10]
 800c43e:	f203 4312 	addw	r3, r3, #1042	; 0x412
 800c442:	b29b      	uxth	r3, r3
 800c444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c448:	b299      	uxth	r1, r3
 800c44a:	4a1e      	ldr	r2, [pc, #120]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c44c:	8813      	ldrh	r3, [r2, #0]
 800c44e:	f361 030a 	bfi	r3, r1, #0, #11
 800c452:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c454:	4a1b      	ldr	r2, [pc, #108]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	f36f 23dc 	bfc	r3, #11, #18
 800c45c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c45e:	4a19      	ldr	r2, [pc, #100]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c460:	7913      	ldrb	r3, [r2, #4]
 800c462:	f36f 1386 	bfc	r3, #6, #1
 800c466:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c468:	4a16      	ldr	r2, [pc, #88]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c46a:	7913      	ldrb	r3, [r2, #4]
 800c46c:	2108      	movs	r1, #8
 800c46e:	f361 0303 	bfi	r3, r1, #0, #4
 800c472:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c474:	4a13      	ldr	r2, [pc, #76]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c476:	7913      	ldrb	r3, [r2, #4]
 800c478:	f36f 13c7 	bfc	r3, #7, #1
 800c47c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c47e:	4a11      	ldr	r2, [pc, #68]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c480:	7913      	ldrb	r3, [r2, #4]
 800c482:	f36f 1304 	bfc	r3, #4, #1
 800c486:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c488:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <VCU_TransmitModulePower+0x10c>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00c      	beq.n	800c4ae <VCU_TransmitModulePower+0xee>
 800c494:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <VCU_TransmitModulePower+0x104>)
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	490b      	ldr	r1, [pc, #44]	; (800c4d0 <VCU_TransmitModulePower+0x110>)
 800c4a2:	480c      	ldr	r0, [pc, #48]	; (800c4d4 <VCU_TransmitModulePower+0x114>)
 800c4a4:	f007 fbd2 	bl	8013c4c <siprintf>
 800c4a8:	480a      	ldr	r0, [pc, #40]	; (800c4d4 <VCU_TransmitModulePower+0x114>)
 800c4aa:	f7f8 ff59 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f7fe fc12 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd90      	pop	{r4, r7, pc}
 800c4bc:	2000a664 	.word	0x2000a664
 800c4c0:	20000de4 	.word	0x20000de4
 800c4c4:	2000a6c4 	.word	0x2000a6c4
 800c4c8:	2000a6d0 	.word	0x2000a6d0
 800c4cc:	2000000c 	.word	0x2000000c
 800c4d0:	08018368 	.word	0x08018368
 800c4d4:	20000b64 	.word	0x20000b64

0800c4d8 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c4de:	4b41      	ldr	r3, [pc, #260]	; (800c5e4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c4e0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fd fce9 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c4ee:	4b3d      	ldr	r3, [pc, #244]	; (800c5e4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c4f0:	7d1b      	ldrb	r3, [r3, #20]
 800c4f2:	7bfa      	ldrb	r2, [r7, #15]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d071      	beq.n	800c5dc <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800c4f8:	4b3a      	ldr	r3, [pc, #232]	; (800c5e4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c4fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c4fe:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	4a39      	ldr	r2, [pc, #228]	; (800c5e8 <VCU_TransmitModuleCellVoltage+0x110>)
 800c504:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c508:	fb01 f303 	mul.w	r3, r1, r3
 800c50c:	4413      	add	r3, r2
 800c50e:	3322      	adds	r3, #34	; 0x22
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	4a34      	ldr	r2, [pc, #208]	; (800c5e8 <VCU_TransmitModuleCellVoltage+0x110>)
 800c518:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c51c:	fb01 f303 	mul.w	r3, r1, r3
 800c520:	4413      	add	r3, r2
 800c522:	331e      	adds	r3, #30
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	4a2e      	ldr	r2, [pc, #184]	; (800c5e8 <VCU_TransmitModuleCellVoltage+0x110>)
 800c52e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c532:	fb01 f303 	mul.w	r3, r1, r3
 800c536:	4413      	add	r3, r2
 800c538:	3320      	adds	r3, #32
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c542:	4b2a      	ldr	r3, [pc, #168]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c548:	4b28      	ldr	r3, [pc, #160]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c54e:	4b27      	ldr	r3, [pc, #156]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c550:	2200      	movs	r2, #0
 800c552:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800c554:	4b26      	ldr	r3, [pc, #152]	; (800c5f0 <VCU_TransmitModuleCellVoltage+0x118>)
 800c556:	461c      	mov	r4, r3
 800c558:	463b      	mov	r3, r7
 800c55a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c55e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c562:	4b20      	ldr	r3, [pc, #128]	; (800c5e4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c564:	895b      	ldrh	r3, [r3, #10]
 800c566:	f203 4313 	addw	r3, r3, #1043	; 0x413
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c570:	b299      	uxth	r1, r3
 800c572:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c574:	8813      	ldrh	r3, [r2, #0]
 800c576:	f361 030a 	bfi	r3, r1, #0, #11
 800c57a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c57c:	4a1b      	ldr	r2, [pc, #108]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c57e:	6813      	ldr	r3, [r2, #0]
 800c580:	f36f 23dc 	bfc	r3, #11, #18
 800c584:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c586:	4a19      	ldr	r2, [pc, #100]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c588:	7913      	ldrb	r3, [r2, #4]
 800c58a:	f36f 1386 	bfc	r3, #6, #1
 800c58e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c590:	4a16      	ldr	r2, [pc, #88]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c592:	7913      	ldrb	r3, [r2, #4]
 800c594:	2108      	movs	r1, #8
 800c596:	f361 0303 	bfi	r3, r1, #0, #4
 800c59a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c59c:	4a13      	ldr	r2, [pc, #76]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c59e:	7913      	ldrb	r3, [r2, #4]
 800c5a0:	f36f 13c7 	bfc	r3, #7, #1
 800c5a4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c5a6:	4a11      	ldr	r2, [pc, #68]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c5a8:	7913      	ldrb	r3, [r2, #4]
 800c5aa:	f36f 1304 	bfc	r3, #4, #1
 800c5ae:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c5b0:	4b10      	ldr	r3, [pc, #64]	; (800c5f4 <VCU_TransmitModuleCellVoltage+0x11c>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00c      	beq.n	800c5d6 <VCU_TransmitModuleCellVoltage+0xfe>
 800c5bc:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <VCU_TransmitModuleCellVoltage+0x114>)
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	490b      	ldr	r1, [pc, #44]	; (800c5f8 <VCU_TransmitModuleCellVoltage+0x120>)
 800c5ca:	480c      	ldr	r0, [pc, #48]	; (800c5fc <VCU_TransmitModuleCellVoltage+0x124>)
 800c5cc:	f007 fb3e 	bl	8013c4c <siprintf>
 800c5d0:	480a      	ldr	r0, [pc, #40]	; (800c5fc <VCU_TransmitModuleCellVoltage+0x124>)
 800c5d2:	f7f8 fec5 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f7fe fb7e 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c5dc:	bf00      	nop
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd90      	pop	{r4, r7, pc}
 800c5e4:	2000a664 	.word	0x2000a664
 800c5e8:	20000de4 	.word	0x20000de4
 800c5ec:	2000a6c4 	.word	0x2000a6c4
 800c5f0:	2000a6d0 	.word	0x2000a6d0
 800c5f4:	2000000c 	.word	0x2000000c
 800c5f8:	08018384 	.word	0x08018384
 800c5fc:	20000b64 	.word	0x20000b64

0800c600 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c606:	4b41      	ldr	r3, [pc, #260]	; (800c70c <VCU_TransmitModuleCellTemp+0x10c>)
 800c608:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fd fc55 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c612:	4603      	mov	r3, r0
 800c614:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c616:	4b3d      	ldr	r3, [pc, #244]	; (800c70c <VCU_TransmitModuleCellTemp+0x10c>)
 800c618:	7d1b      	ldrb	r3, [r3, #20]
 800c61a:	7bfa      	ldrb	r2, [r7, #15]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d071      	beq.n	800c704 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800c620:	4b3a      	ldr	r3, [pc, #232]	; (800c70c <VCU_TransmitModuleCellTemp+0x10c>)
 800c622:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c626:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800c628:	7bfb      	ldrb	r3, [r7, #15]
 800c62a:	4a39      	ldr	r2, [pc, #228]	; (800c710 <VCU_TransmitModuleCellTemp+0x110>)
 800c62c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c630:	fb01 f303 	mul.w	r3, r1, r3
 800c634:	4413      	add	r3, r2
 800c636:	331c      	adds	r3, #28
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	4a34      	ldr	r2, [pc, #208]	; (800c710 <VCU_TransmitModuleCellTemp+0x110>)
 800c640:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c644:	fb01 f303 	mul.w	r3, r1, r3
 800c648:	4413      	add	r3, r2
 800c64a:	3318      	adds	r3, #24
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	4a2e      	ldr	r2, [pc, #184]	; (800c710 <VCU_TransmitModuleCellTemp+0x110>)
 800c656:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c65a:	fb01 f303 	mul.w	r3, r1, r3
 800c65e:	4413      	add	r3, r2
 800c660:	331a      	adds	r3, #26
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c66a:	4b2a      	ldr	r3, [pc, #168]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c670:	4b28      	ldr	r3, [pc, #160]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c672:	2200      	movs	r2, #0
 800c674:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c676:	4b27      	ldr	r3, [pc, #156]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c678:	2200      	movs	r2, #0
 800c67a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800c67c:	4b26      	ldr	r3, [pc, #152]	; (800c718 <VCU_TransmitModuleCellTemp+0x118>)
 800c67e:	461c      	mov	r4, r3
 800c680:	463b      	mov	r3, r7
 800c682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c686:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c68a:	4b20      	ldr	r3, [pc, #128]	; (800c70c <VCU_TransmitModuleCellTemp+0x10c>)
 800c68c:	895b      	ldrh	r3, [r3, #10]
 800c68e:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800c692:	b29b      	uxth	r3, r3
 800c694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c698:	b299      	uxth	r1, r3
 800c69a:	4a1e      	ldr	r2, [pc, #120]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c69c:	8813      	ldrh	r3, [r2, #0]
 800c69e:	f361 030a 	bfi	r3, r1, #0, #11
 800c6a2:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c6a4:	4a1b      	ldr	r2, [pc, #108]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	f36f 23dc 	bfc	r3, #11, #18
 800c6ac:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c6ae:	4a19      	ldr	r2, [pc, #100]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6b0:	7913      	ldrb	r3, [r2, #4]
 800c6b2:	f36f 1386 	bfc	r3, #6, #1
 800c6b6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c6b8:	4a16      	ldr	r2, [pc, #88]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6ba:	7913      	ldrb	r3, [r2, #4]
 800c6bc:	2108      	movs	r1, #8
 800c6be:	f361 0303 	bfi	r3, r1, #0, #4
 800c6c2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c6c4:	4a13      	ldr	r2, [pc, #76]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6c6:	7913      	ldrb	r3, [r2, #4]
 800c6c8:	f36f 13c7 	bfc	r3, #7, #1
 800c6cc:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c6ce:	4a11      	ldr	r2, [pc, #68]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6d0:	7913      	ldrb	r3, [r2, #4]
 800c6d2:	f36f 1304 	bfc	r3, #4, #1
 800c6d6:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c6d8:	4b10      	ldr	r3, [pc, #64]	; (800c71c <VCU_TransmitModuleCellTemp+0x11c>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00c      	beq.n	800c6fe <VCU_TransmitModuleCellTemp+0xfe>
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <VCU_TransmitModuleCellTemp+0x114>)
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	490b      	ldr	r1, [pc, #44]	; (800c720 <VCU_TransmitModuleCellTemp+0x120>)
 800c6f2:	480c      	ldr	r0, [pc, #48]	; (800c724 <VCU_TransmitModuleCellTemp+0x124>)
 800c6f4:	f007 faaa 	bl	8013c4c <siprintf>
 800c6f8:	480a      	ldr	r0, [pc, #40]	; (800c724 <VCU_TransmitModuleCellTemp+0x124>)
 800c6fa:	f7f8 fe31 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c6fe:	2000      	movs	r0, #0
 800c700:	f7fe faea 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c704:	bf00      	nop
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd90      	pop	{r4, r7, pc}
 800c70c:	2000a664 	.word	0x2000a664
 800c710:	20000de4 	.word	0x20000de4
 800c714:	2000a6c4 	.word	0x2000a6c4
 800c718:	2000a6d0 	.word	0x2000a6d0
 800c71c:	2000000c 	.word	0x2000000c
 800c720:	080183a8 	.word	0x080183a8
 800c724:	20000b64 	.word	0x20000b64

0800c728 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c72e:	4b41      	ldr	r3, [pc, #260]	; (800c834 <VCU_TransmitModuleLimits+0x10c>)
 800c730:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd fbc1 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c73a:	4603      	mov	r3, r0
 800c73c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c73e:	4b3d      	ldr	r3, [pc, #244]	; (800c834 <VCU_TransmitModuleLimits+0x10c>)
 800c740:	7d1b      	ldrb	r3, [r3, #20]
 800c742:	7bfa      	ldrb	r2, [r7, #15]
 800c744:	429a      	cmp	r2, r3
 800c746:	d071      	beq.n	800c82c <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800c748:	4b3a      	ldr	r3, [pc, #232]	; (800c834 <VCU_TransmitModuleLimits+0x10c>)
 800c74a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c74e:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	4a39      	ldr	r2, [pc, #228]	; (800c838 <VCU_TransmitModuleLimits+0x110>)
 800c754:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c758:	fb01 f303 	mul.w	r3, r1, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	3312      	adds	r3, #18
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	4a34      	ldr	r2, [pc, #208]	; (800c838 <VCU_TransmitModuleLimits+0x110>)
 800c768:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c76c:	fb01 f303 	mul.w	r3, r1, r3
 800c770:	4413      	add	r3, r2
 800c772:	330e      	adds	r3, #14
 800c774:	881b      	ldrh	r3, [r3, #0]
 800c776:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	4a2f      	ldr	r2, [pc, #188]	; (800c838 <VCU_TransmitModuleLimits+0x110>)
 800c77c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c780:	fb01 f303 	mul.w	r3, r1, r3
 800c784:	4413      	add	r3, r2
 800c786:	3310      	adds	r3, #16
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c792:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c798:	4b28      	ldr	r3, [pc, #160]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c79e:	4b27      	ldr	r3, [pc, #156]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800c7a4:	4b26      	ldr	r3, [pc, #152]	; (800c840 <VCU_TransmitModuleLimits+0x118>)
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c7b2:	4b20      	ldr	r3, [pc, #128]	; (800c834 <VCU_TransmitModuleLimits+0x10c>)
 800c7b4:	895b      	ldrh	r3, [r3, #10]
 800c7b6:	f203 4316 	addw	r3, r3, #1046	; 0x416
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7c0:	b299      	uxth	r1, r3
 800c7c2:	4a1e      	ldr	r2, [pc, #120]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7c4:	8813      	ldrh	r3, [r2, #0]
 800c7c6:	f361 030a 	bfi	r3, r1, #0, #11
 800c7ca:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c7cc:	4a1b      	ldr	r2, [pc, #108]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	f36f 23dc 	bfc	r3, #11, #18
 800c7d4:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c7d6:	4a19      	ldr	r2, [pc, #100]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7d8:	7913      	ldrb	r3, [r2, #4]
 800c7da:	f36f 1386 	bfc	r3, #6, #1
 800c7de:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c7e0:	4a16      	ldr	r2, [pc, #88]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7e2:	7913      	ldrb	r3, [r2, #4]
 800c7e4:	2108      	movs	r1, #8
 800c7e6:	f361 0303 	bfi	r3, r1, #0, #4
 800c7ea:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c7ec:	4a13      	ldr	r2, [pc, #76]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7ee:	7913      	ldrb	r3, [r2, #4]
 800c7f0:	f36f 13c7 	bfc	r3, #7, #1
 800c7f4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c7f6:	4a11      	ldr	r2, [pc, #68]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c7f8:	7913      	ldrb	r3, [r2, #4]
 800c7fa:	f36f 1304 	bfc	r3, #4, #1
 800c7fe:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c800:	4b10      	ldr	r3, [pc, #64]	; (800c844 <VCU_TransmitModuleLimits+0x11c>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00c      	beq.n	800c826 <VCU_TransmitModuleLimits+0xfe>
 800c80c:	4b0b      	ldr	r3, [pc, #44]	; (800c83c <VCU_TransmitModuleLimits+0x114>)
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c814:	b29b      	uxth	r3, r3
 800c816:	461a      	mov	r2, r3
 800c818:	490b      	ldr	r1, [pc, #44]	; (800c848 <VCU_TransmitModuleLimits+0x120>)
 800c81a:	480c      	ldr	r0, [pc, #48]	; (800c84c <VCU_TransmitModuleLimits+0x124>)
 800c81c:	f007 fa16 	bl	8013c4c <siprintf>
 800c820:	480a      	ldr	r0, [pc, #40]	; (800c84c <VCU_TransmitModuleLimits+0x124>)
 800c822:	f7f8 fd9d 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c826:	2000      	movs	r0, #0
 800c828:	f7fe fa56 	bl	800acd8 <VCU_TransmitMessageQueue>
  }

}
 800c82c:	bf00      	nop
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	bd90      	pop	{r4, r7, pc}
 800c834:	2000a664 	.word	0x2000a664
 800c838:	20000de4 	.word	0x20000de4
 800c83c:	2000a6c4 	.word	0x2000a6c4
 800c840:	2000a6d0 	.word	0x2000a6d0
 800c844:	2000000c 	.word	0x2000000c
 800c848:	080183c8 	.word	0x080183c8
 800c84c:	20000b64 	.word	0x20000b64

0800c850 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c854:	4b23      	ldr	r3, [pc, #140]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c85a:	4b22      	ldr	r3, [pc, #136]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c860:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c862:	2200      	movs	r2, #0
 800c864:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c866:	4b20      	ldr	r3, [pc, #128]	; (800c8e8 <VCU_RequestTime+0x98>)
 800c868:	895b      	ldrh	r3, [r3, #10]
 800c86a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c86e:	b29b      	uxth	r3, r3
 800c870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c874:	b299      	uxth	r1, r3
 800c876:	4a1b      	ldr	r2, [pc, #108]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c878:	8813      	ldrh	r3, [r2, #0]
 800c87a:	f361 030a 	bfi	r3, r1, #0, #11
 800c87e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	f36f 23dc 	bfc	r3, #11, #18
 800c888:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c88a:	4a16      	ldr	r2, [pc, #88]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c88c:	7913      	ldrb	r3, [r2, #4]
 800c88e:	f36f 1386 	bfc	r3, #6, #1
 800c892:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c894:	4a13      	ldr	r2, [pc, #76]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c896:	7913      	ldrb	r3, [r2, #4]
 800c898:	2108      	movs	r1, #8
 800c89a:	f361 0303 	bfi	r3, r1, #0, #4
 800c89e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c8a0:	4a10      	ldr	r2, [pc, #64]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c8a2:	7913      	ldrb	r3, [r2, #4]
 800c8a4:	f36f 13c7 	bfc	r3, #7, #1
 800c8a8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c8aa:	4a0e      	ldr	r2, [pc, #56]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c8ac:	7913      	ldrb	r3, [r2, #4]
 800c8ae:	f36f 1304 	bfc	r3, #4, #1
 800c8b2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <VCU_RequestTime+0x9c>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00c      	beq.n	800c8da <VCU_RequestTime+0x8a>
 800c8c0:	4b08      	ldr	r3, [pc, #32]	; (800c8e4 <VCU_RequestTime+0x94>)
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	4908      	ldr	r1, [pc, #32]	; (800c8f0 <VCU_RequestTime+0xa0>)
 800c8ce:	4809      	ldr	r0, [pc, #36]	; (800c8f4 <VCU_RequestTime+0xa4>)
 800c8d0:	f007 f9bc 	bl	8013c4c <siprintf>
 800c8d4:	4807      	ldr	r0, [pc, #28]	; (800c8f4 <VCU_RequestTime+0xa4>)
 800c8d6:	f7f8 fd43 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c8da:	2000      	movs	r0, #0
 800c8dc:	f7fe f9fc 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c8e0:	bf00      	nop
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	2000a6c4 	.word	0x2000a6c4
 800c8e8:	2000a664 	.word	0x2000a664
 800c8ec:	2000000c 	.word	0x2000000c
 800c8f0:	080183e4 	.word	0x080183e4
 800c8f4:	20000b64 	.word	0x20000b64

0800c8f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800c8f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c8fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c8fc:	3304      	adds	r3, #4

0800c8fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c8fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c900:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800c902:	d3f9      	bcc.n	800c8f8 <CopyDataInit>
  bx lr
 800c904:	4770      	bx	lr

0800c906 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800c906:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800c908:	3004      	adds	r0, #4

0800c90a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800c90a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800c90c:	d3fb      	bcc.n	800c906 <FillZerobss>
  bx lr
 800c90e:	4770      	bx	lr

0800c910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c910:	480c      	ldr	r0, [pc, #48]	; (800c944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c912:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800c914:	f7fe f886 	bl	800aa24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800c918:	480b      	ldr	r0, [pc, #44]	; (800c948 <LoopForever+0x6>)
 800c91a:	490c      	ldr	r1, [pc, #48]	; (800c94c <LoopForever+0xa>)
 800c91c:	4a0c      	ldr	r2, [pc, #48]	; (800c950 <LoopForever+0xe>)
 800c91e:	2300      	movs	r3, #0
 800c920:	f7ff ffed 	bl	800c8fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800c924:	480b      	ldr	r0, [pc, #44]	; (800c954 <LoopForever+0x12>)
 800c926:	490c      	ldr	r1, [pc, #48]	; (800c958 <LoopForever+0x16>)
 800c928:	4a0c      	ldr	r2, [pc, #48]	; (800c95c <LoopForever+0x1a>)
 800c92a:	2300      	movs	r3, #0
 800c92c:	f7ff ffe7 	bl	800c8fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800c930:	480b      	ldr	r0, [pc, #44]	; (800c960 <LoopForever+0x1e>)
 800c932:	490c      	ldr	r1, [pc, #48]	; (800c964 <LoopForever+0x22>)
 800c934:	2300      	movs	r3, #0
 800c936:	f7ff ffe8 	bl	800c90a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c93a:	f006 f821 	bl	8012980 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800c93e:	f7f9 f875 	bl	8005a2c <main>

0800c942 <LoopForever>:

LoopForever:
  b LoopForever
 800c942:	e7fe      	b.n	800c942 <LoopForever>
  ldr   r0, =_estack
 800c944:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800c948:	20000008 	.word	0x20000008
 800c94c:	200002d0 	.word	0x200002d0
 800c950:	08018ac0 	.word	0x08018ac0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800c954:	20030000 	.word	0x20030000
 800c958:	20030000 	.word	0x20030000
 800c95c:	08018d88 	.word	0x08018d88
  INIT_BSS _sbss, _ebss
 800c960:	200002d0 	.word	0x200002d0
 800c964:	2000a7b8 	.word	0x2000a7b8

0800c968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c968:	e7fe      	b.n	800c968 <ADC1_IRQHandler>
	...

0800c96c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c976:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <HAL_Init+0x3c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a0b      	ldr	r2, [pc, #44]	; (800c9a8 <HAL_Init+0x3c>)
 800c97c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c980:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c982:	2003      	movs	r0, #3
 800c984:	f000 f948 	bl	800cc18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c988:	200f      	movs	r0, #15
 800c98a:	f000 f80f 	bl	800c9ac <HAL_InitTick>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	71fb      	strb	r3, [r7, #7]
 800c998:	e001      	b.n	800c99e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c99a:	f7fd fd31 	bl	800a400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c99e:	79fb      	ldrb	r3, [r7, #7]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	58004000 	.word	0x58004000

0800c9ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800c9b8:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <HAL_InitTick+0x6c>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d024      	beq.n	800ca0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800c9c0:	f002 f820 	bl	800ea04 <HAL_RCC_GetHCLKFreq>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <HAL_InitTick+0x6c>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 f950 	bl	800cc7e <HAL_SYSTICK_Config>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10f      	bne.n	800ca04 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b0f      	cmp	r3, #15
 800c9e8:	d809      	bhi.n	800c9fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	6879      	ldr	r1, [r7, #4]
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	f000 f91c 	bl	800cc2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c9f6:	4a09      	ldr	r2, [pc, #36]	; (800ca1c <HAL_InitTick+0x70>)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	e007      	b.n	800ca0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	73fb      	strb	r3, [r7, #15]
 800ca02:	e004      	b.n	800ca0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	73fb      	strb	r3, [r7, #15]
 800ca08:	e001      	b.n	800ca0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	2000001c 	.word	0x2000001c
 800ca1c:	20000018 	.word	0x20000018

0800ca20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ca20:	b480      	push	{r7}
 800ca22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ca24:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <HAL_IncTick+0x20>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4b06      	ldr	r3, [pc, #24]	; (800ca44 <HAL_IncTick+0x24>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4413      	add	r3, r2
 800ca30:	4a04      	ldr	r2, [pc, #16]	; (800ca44 <HAL_IncTick+0x24>)
 800ca32:	6013      	str	r3, [r2, #0]
}
 800ca34:	bf00      	nop
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	2000001c 	.word	0x2000001c
 800ca44:	2000a764 	.word	0x2000a764

0800ca48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	af00      	add	r7, sp, #0
  return uwTick;
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <HAL_GetTick+0x14>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	2000a764 	.word	0x2000a764

0800ca60 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800ca64:	4b03      	ldr	r3, [pc, #12]	; (800ca74 <HAL_GetTickPrio+0x14>)
 800ca66:	681b      	ldr	r3, [r3, #0]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20000018 	.word	0x20000018

0800ca78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f003 0307 	and.w	r3, r3, #7
 800ca86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca88:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <__NVIC_SetPriorityGrouping+0x44>)
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ca94:	4013      	ands	r3, r2
 800ca96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800caa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800caa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800caaa:	4a04      	ldr	r2, [pc, #16]	; (800cabc <__NVIC_SetPriorityGrouping+0x44>)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	60d3      	str	r3, [r2, #12]
}
 800cab0:	bf00      	nop
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	e000ed00 	.word	0xe000ed00

0800cac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cac0:	b480      	push	{r7}
 800cac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cac4:	4b04      	ldr	r3, [pc, #16]	; (800cad8 <__NVIC_GetPriorityGrouping+0x18>)
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	f003 0307 	and.w	r3, r3, #7
}
 800cace:	4618      	mov	r0, r3
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	e000ed00 	.word	0xe000ed00

0800cadc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caea:	2b00      	cmp	r3, #0
 800caec:	db0b      	blt.n	800cb06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	f003 021f 	and.w	r2, r3, #31
 800caf4:	4907      	ldr	r1, [pc, #28]	; (800cb14 <__NVIC_EnableIRQ+0x38>)
 800caf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cafa:	095b      	lsrs	r3, r3, #5
 800cafc:	2001      	movs	r0, #1
 800cafe:	fa00 f202 	lsl.w	r2, r0, r2
 800cb02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cb06:	bf00      	nop
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	e000e100 	.word	0xe000e100

0800cb18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	6039      	str	r1, [r7, #0]
 800cb22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	db0a      	blt.n	800cb42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	490c      	ldr	r1, [pc, #48]	; (800cb64 <__NVIC_SetPriority+0x4c>)
 800cb32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb36:	0112      	lsls	r2, r2, #4
 800cb38:	b2d2      	uxtb	r2, r2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cb40:	e00a      	b.n	800cb58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	4908      	ldr	r1, [pc, #32]	; (800cb68 <__NVIC_SetPriority+0x50>)
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	f003 030f 	and.w	r3, r3, #15
 800cb4e:	3b04      	subs	r3, #4
 800cb50:	0112      	lsls	r2, r2, #4
 800cb52:	b2d2      	uxtb	r2, r2
 800cb54:	440b      	add	r3, r1
 800cb56:	761a      	strb	r2, [r3, #24]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	e000e100 	.word	0xe000e100
 800cb68:	e000ed00 	.word	0xe000ed00

0800cb6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b089      	sub	sp, #36	; 0x24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	f1c3 0307 	rsb	r3, r3, #7
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	bf28      	it	cs
 800cb8a:	2304      	movcs	r3, #4
 800cb8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	3304      	adds	r3, #4
 800cb92:	2b06      	cmp	r3, #6
 800cb94:	d902      	bls.n	800cb9c <NVIC_EncodePriority+0x30>
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	3b03      	subs	r3, #3
 800cb9a:	e000      	b.n	800cb9e <NVIC_EncodePriority+0x32>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cba0:	f04f 32ff 	mov.w	r2, #4294967295
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbaa:	43da      	mvns	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	401a      	ands	r2, r3
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cbb4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	fa01 f303 	lsl.w	r3, r1, r3
 800cbbe:	43d9      	mvns	r1, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbc4:	4313      	orrs	r3, r2
         );
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3724      	adds	r7, #36	; 0x24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbe4:	d301      	bcc.n	800cbea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e00f      	b.n	800cc0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cbea:	4a0a      	ldr	r2, [pc, #40]	; (800cc14 <SysTick_Config+0x40>)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cbf2:	210f      	movs	r1, #15
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	f7ff ff8e 	bl	800cb18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cbfc:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <SysTick_Config+0x40>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <SysTick_Config+0x40>)
 800cc04:	2207      	movs	r2, #7
 800cc06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	e000e010 	.word	0xe000e010

0800cc18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff ff29 	bl	800ca78 <__NVIC_SetPriorityGrouping>
}
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	4603      	mov	r3, r0
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	607a      	str	r2, [r7, #4]
 800cc3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc3c:	f7ff ff40 	bl	800cac0 <__NVIC_GetPriorityGrouping>
 800cc40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	6978      	ldr	r0, [r7, #20]
 800cc48:	f7ff ff90 	bl	800cb6c <NVIC_EncodePriority>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc52:	4611      	mov	r1, r2
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff ff5f 	bl	800cb18 <__NVIC_SetPriority>
}
 800cc5a:	bf00      	nop
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b082      	sub	sp, #8
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	4603      	mov	r3, r0
 800cc6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff ff33 	bl	800cadc <__NVIC_EnableIRQ>
}
 800cc76:	bf00      	nop
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff ffa4 	bl	800cbd4 <SysTick_Config>
 800cc8c:	4603      	mov	r3, r0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d101      	bne.n	800cca8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e04f      	b.n	800cd48 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d008      	beq.n	800ccc6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2204      	movs	r2, #4
 800ccb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e040      	b.n	800cd48 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f022 020e 	bic.w	r2, r2, #14
 800ccd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cce4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0201 	bic.w	r2, r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfa:	f003 021c 	and.w	r2, r3, #28
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	2101      	movs	r1, #1
 800cd04:	fa01 f202 	lsl.w	r2, r1, r2
 800cd08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cd12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800cd34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d005      	beq.n	800cd78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2204      	movs	r2, #4
 800cd70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	73fb      	strb	r3, [r7, #15]
 800cd76:	e047      	b.n	800ce08 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f022 020e 	bic.w	r2, r2, #14
 800cd86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 0201 	bic.w	r2, r2, #1
 800cd96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cda2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cda6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdac:	f003 021c 	and.w	r2, r3, #28
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	fa01 f202 	lsl.w	r2, r1, r2
 800cdba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cdc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00c      	beq.n	800cde8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cddc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800cde6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	4798      	blx	r3
    }
  }
  return status;
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ce22:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <HAL_FLASH_Program+0x80>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d101      	bne.n	800ce2e <HAL_FLASH_Program+0x1a>
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	e02d      	b.n	800ce8a <HAL_FLASH_Program+0x76>
 800ce2e:	4b19      	ldr	r3, [pc, #100]	; (800ce94 <HAL_FLASH_Program+0x80>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ce34:	4b17      	ldr	r3, [pc, #92]	; (800ce94 <HAL_FLASH_Program+0x80>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce3e:	f000 f869 	bl	800cf14 <FLASH_WaitForLastOperation>
 800ce42:	4603      	mov	r3, r0
 800ce44:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d11a      	bne.n	800ce82 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d105      	bne.n	800ce5e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ce52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce56:	68b8      	ldr	r0, [r7, #8]
 800ce58:	f000 f8cc 	bl	800cff4 <FLASH_Program_DoubleWord>
 800ce5c:	e004      	b.n	800ce68 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	68b8      	ldr	r0, [r7, #8]
 800ce64:	f00a f8a8 	bl	8016fb8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce6c:	f000 f852 	bl	800cf14 <FLASH_WaitForLastOperation>
 800ce70:	4603      	mov	r3, r0
 800ce72:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ce74:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <HAL_FLASH_Program+0x84>)
 800ce76:	695a      	ldr	r2, [r3, #20]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	43db      	mvns	r3, r3
 800ce7c:	4906      	ldr	r1, [pc, #24]	; (800ce98 <HAL_FLASH_Program+0x84>)
 800ce7e:	4013      	ands	r3, r2
 800ce80:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ce82:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <HAL_FLASH_Program+0x80>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3718      	adds	r7, #24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	2000a768 	.word	0x2000a768
 800ce98:	58004000 	.word	0x58004000

0800ce9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cea6:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <HAL_FLASH_Unlock+0x38>)
 800cea8:	695b      	ldr	r3, [r3, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da0b      	bge.n	800cec6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <HAL_FLASH_Unlock+0x38>)
 800ceb0:	4a09      	ldr	r2, [pc, #36]	; (800ced8 <HAL_FLASH_Unlock+0x3c>)
 800ceb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ceb4:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <HAL_FLASH_Unlock+0x38>)
 800ceb6:	4a09      	ldr	r2, [pc, #36]	; (800cedc <HAL_FLASH_Unlock+0x40>)
 800ceb8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ceba:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <HAL_FLASH_Unlock+0x38>)
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	da01      	bge.n	800cec6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cec6:	79fb      	ldrb	r3, [r7, #7]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	58004000 	.word	0x58004000
 800ced8:	45670123 	.word	0x45670123
 800cedc:	cdef89ab 	.word	0xcdef89ab

0800cee0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ceea:	4b09      	ldr	r3, [pc, #36]	; (800cf10 <HAL_FLASH_Lock+0x30>)
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	4a08      	ldr	r2, [pc, #32]	; (800cf10 <HAL_FLASH_Lock+0x30>)
 800cef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cef4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800cef6:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <HAL_FLASH_Lock+0x30>)
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	db01      	blt.n	800cf02 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cf02:	79fb      	ldrb	r3, [r7, #7]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	58004000 	.word	0x58004000

0800cf14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800cf1c:	f7ff fd94 	bl	800ca48 <HAL_GetTick>
 800cf20:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cf22:	e009      	b.n	800cf38 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800cf24:	f7ff fd90 	bl	800ca48 <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d801      	bhi.n	800cf38 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e054      	b.n	800cfe2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cf38:	4b2c      	ldr	r3, [pc, #176]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf44:	d0ee      	beq.n	800cf24 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800cf46:	4b29      	ldr	r3, [pc, #164]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cf56:	4b25      	ldr	r3, [pc, #148]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf58:	2201      	movs	r2, #1
 800cf5a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d007      	beq.n	800cf76 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800cf66:	4b21      	ldr	r3, [pc, #132]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cf6c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf74:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d007      	beq.n	800cf9a <FLASH_WaitForLastOperation+0x86>
 800cf8a:	4b18      	ldr	r3, [pc, #96]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf8c:	699a      	ldr	r2, [r3, #24]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf94:	4915      	ldr	r1, [pc, #84]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	618b      	str	r3, [r1, #24]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d004      	beq.n	800cfae <FLASH_WaitForLastOperation+0x9a>
 800cfa4:	4a11      	ldr	r2, [pc, #68]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfac:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00e      	beq.n	800cfd2 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800cfb4:	4a0e      	ldr	r2, [pc, #56]	; (800cff0 <FLASH_WaitForLastOperation+0xdc>)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e011      	b.n	800cfe2 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800cfbe:	f7ff fd43 	bl	800ca48 <HAL_GetTick>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d801      	bhi.n	800cfd2 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	e007      	b.n	800cfe2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800cfd2:	4b06      	ldr	r3, [pc, #24]	; (800cfec <FLASH_WaitForLastOperation+0xd8>)
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cfde:	d0ee      	beq.n	800cfbe <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	58004000 	.word	0x58004000
 800cff0:	2000a768 	.word	0x2000a768

0800cff4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d000:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <FLASH_Program_DoubleWord+0x48>)
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	4a0d      	ldr	r2, [pc, #52]	; (800d03c <FLASH_Program_DoubleWord+0x48>)
 800d006:	f043 0301 	orr.w	r3, r3, #1
 800d00a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800d012:	f3bf 8f6f 	isb	sy
}
 800d016:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800d018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d01c:	f04f 0200 	mov.w	r2, #0
 800d020:	f04f 0300 	mov.w	r3, #0
 800d024:	000a      	movs	r2, r1
 800d026:	2300      	movs	r3, #0
 800d028:	68f9      	ldr	r1, [r7, #12]
 800d02a:	3104      	adds	r1, #4
 800d02c:	4613      	mov	r3, r2
 800d02e:	600b      	str	r3, [r1, #0]
}
 800d030:	bf00      	nop
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	58004000 	.word	0x58004000

0800d040 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d04a:	4b24      	ldr	r3, [pc, #144]	; (800d0dc <HAL_FLASHEx_Erase+0x9c>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d101      	bne.n	800d056 <HAL_FLASHEx_Erase+0x16>
 800d052:	2302      	movs	r3, #2
 800d054:	e03d      	b.n	800d0d2 <HAL_FLASHEx_Erase+0x92>
 800d056:	4b21      	ldr	r3, [pc, #132]	; (800d0dc <HAL_FLASHEx_Erase+0x9c>)
 800d058:	2201      	movs	r2, #1
 800d05a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d05c:	4b1f      	ldr	r3, [pc, #124]	; (800d0dc <HAL_FLASHEx_Erase+0x9c>)
 800d05e:	2200      	movs	r2, #0
 800d060:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d066:	f7ff ff55 	bl	800cf14 <FLASH_WaitForLastOperation>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d12a      	bne.n	800d0ca <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d124      	bne.n	800d0c6 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	f04f 32ff 	mov.w	r2, #4294967295
 800d082:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	60bb      	str	r3, [r7, #8]
 800d08a:	e012      	b.n	800d0b2 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800d08c:	68b8      	ldr	r0, [r7, #8]
 800d08e:	f000 f869 	bl	800d164 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d096:	f7ff ff3d 	bl	800cf14 <FLASH_WaitForLastOperation>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	601a      	str	r2, [r3, #0]
          break;
 800d0aa:	e00a      	b.n	800d0c2 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	60bb      	str	r3, [r7, #8]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d3e4      	bcc.n	800d08c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800d0c2:	f000 f8b1 	bl	800d228 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d0c6:	f000 f867 	bl	800d198 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d0ca:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <HAL_FLASHEx_Erase+0x9c>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]

  return status;
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	2000a768 	.word	0x2000a768

0800d0e0 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d0e8:	4b1c      	ldr	r3, [pc, #112]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d101      	bne.n	800d0f4 <HAL_FLASHEx_Erase_IT+0x14>
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	e02e      	b.n	800d152 <HAL_FLASHEx_Erase_IT+0x72>
 800d0f4:	4b19      	ldr	r3, [pc, #100]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d0fa:	4b18      	ldr	r3, [pc, #96]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a15      	ldr	r2, [pc, #84]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d106:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d10c:	f7ff ff02 	bl	800cf14 <FLASH_WaitForLastOperation>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800d11a:	4b10      	ldr	r3, [pc, #64]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	701a      	strb	r2, [r3, #0]
 800d120:	e016      	b.n	800d150 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800d122:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <HAL_FLASHEx_Erase_IT+0x80>)
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	4a0e      	ldr	r2, [pc, #56]	; (800d160 <HAL_FLASHEx_Erase_IT+0x80>)
 800d128:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800d12c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d10c      	bne.n	800d150 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	4a08      	ldr	r2, [pc, #32]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d13c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	4a06      	ldr	r2, [pc, #24]	; (800d15c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d144:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f80a 	bl	800d164 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800d150:	7bfb      	ldrb	r3, [r7, #15]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	2000a768 	.word	0x2000a768
 800d160:	58004000 	.word	0x58004000

0800d164 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800d16c:	4b09      	ldr	r3, [pc, #36]	; (800d194 <FLASH_PageErase+0x30>)
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4313      	orrs	r3, r2
 800d17a:	4a06      	ldr	r2, [pc, #24]	; (800d194 <FLASH_PageErase+0x30>)
 800d17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d180:	f043 0302 	orr.w	r3, r3, #2
 800d184:	6153      	str	r3, [r2, #20]
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	58004000 	.word	0x58004000

0800d198 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800d19c:	4b21      	ldr	r3, [pc, #132]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1a8:	d117      	bne.n	800d1da <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d1aa:	4b1e      	ldr	r3, [pc, #120]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1b4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d1b6:	4b1b      	ldr	r3, [pc, #108]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a1a      	ldr	r2, [pc, #104]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	4b18      	ldr	r3, [pc, #96]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a17      	ldr	r2, [pc, #92]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1cc:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d1ce:	4b15      	ldr	r3, [pc, #84]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a14      	ldr	r2, [pc, #80]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d1d8:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1e6:	d117      	bne.n	800d218 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d1e8:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a0d      	ldr	r2, [pc, #52]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d1fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	4b08      	ldr	r3, [pc, #32]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a07      	ldr	r2, [pc, #28]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d20a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a04      	ldr	r2, [pc, #16]	; (800d224 <FLASH_FlushCaches+0x8c>)
 800d212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d216:	6013      	str	r3, [r2, #0]
  }
}
 800d218:	bf00      	nop
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	58004000 	.word	0x58004000

0800d228 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800d228:	b480      	push	{r7}
 800d22a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d22c:	4b06      	ldr	r3, [pc, #24]	; (800d248 <FLASH_AcknowledgePageErase+0x20>)
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	4a05      	ldr	r2, [pc, #20]	; (800d248 <FLASH_AcknowledgePageErase+0x20>)
 800d232:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d236:	f023 0302 	bic.w	r3, r3, #2
 800d23a:	6153      	str	r3, [r2, #20]
}
 800d23c:	bf00      	nop
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	58004000 	.word	0x58004000

0800d24c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d256:	2300      	movs	r3, #0
 800d258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d25a:	e14c      	b.n	800d4f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	2101      	movs	r1, #1
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	fa01 f303 	lsl.w	r3, r1, r3
 800d268:	4013      	ands	r3, r2
 800d26a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f000 813e 	beq.w	800d4f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f003 0303 	and.w	r3, r3, #3
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d005      	beq.n	800d28c <HAL_GPIO_Init+0x40>
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d130      	bne.n	800d2ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	2203      	movs	r2, #3
 800d298:	fa02 f303 	lsl.w	r3, r2, r3
 800d29c:	43db      	mvns	r3, r3
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	091b      	lsrs	r3, r3, #4
 800d2d8:	f003 0201 	and.w	r2, r3, #1
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d017      	beq.n	800d32a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	2203      	movs	r2, #3
 800d306:	fa02 f303 	lsl.w	r3, r2, r3
 800d30a:	43db      	mvns	r3, r3
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4013      	ands	r3, r2
 800d310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	4313      	orrs	r3, r2
 800d322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f003 0303 	and.w	r3, r3, #3
 800d332:	2b02      	cmp	r3, #2
 800d334:	d123      	bne.n	800d37e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	08da      	lsrs	r2, r3, #3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3208      	adds	r2, #8
 800d33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	220f      	movs	r2, #15
 800d34e:	fa02 f303 	lsl.w	r3, r2, r3
 800d352:	43db      	mvns	r3, r3
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	4013      	ands	r3, r2
 800d358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f003 0307 	and.w	r3, r3, #7
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	fa02 f303 	lsl.w	r3, r2, r3
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	08da      	lsrs	r2, r3, #3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3208      	adds	r2, #8
 800d378:	6939      	ldr	r1, [r7, #16]
 800d37a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	2203      	movs	r2, #3
 800d38a:	fa02 f303 	lsl.w	r3, r2, r3
 800d38e:	43db      	mvns	r3, r3
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4013      	ands	r3, r2
 800d394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f003 0203 	and.w	r2, r3, #3
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 8098 	beq.w	800d4f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800d3c0:	4a54      	ldr	r2, [pc, #336]	; (800d514 <HAL_GPIO_Init+0x2c8>)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	089b      	lsrs	r3, r3, #2
 800d3c6:	3302      	adds	r3, #2
 800d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f003 0303 	and.w	r3, r3, #3
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	220f      	movs	r2, #15
 800d3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3dc:	43db      	mvns	r3, r3
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d3ea:	d019      	beq.n	800d420 <HAL_GPIO_Init+0x1d4>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a4a      	ldr	r2, [pc, #296]	; (800d518 <HAL_GPIO_Init+0x2cc>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d013      	beq.n	800d41c <HAL_GPIO_Init+0x1d0>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a49      	ldr	r2, [pc, #292]	; (800d51c <HAL_GPIO_Init+0x2d0>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d00d      	beq.n	800d418 <HAL_GPIO_Init+0x1cc>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a48      	ldr	r2, [pc, #288]	; (800d520 <HAL_GPIO_Init+0x2d4>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d007      	beq.n	800d414 <HAL_GPIO_Init+0x1c8>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a47      	ldr	r2, [pc, #284]	; (800d524 <HAL_GPIO_Init+0x2d8>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d101      	bne.n	800d410 <HAL_GPIO_Init+0x1c4>
 800d40c:	2304      	movs	r3, #4
 800d40e:	e008      	b.n	800d422 <HAL_GPIO_Init+0x1d6>
 800d410:	2307      	movs	r3, #7
 800d412:	e006      	b.n	800d422 <HAL_GPIO_Init+0x1d6>
 800d414:	2303      	movs	r3, #3
 800d416:	e004      	b.n	800d422 <HAL_GPIO_Init+0x1d6>
 800d418:	2302      	movs	r3, #2
 800d41a:	e002      	b.n	800d422 <HAL_GPIO_Init+0x1d6>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <HAL_GPIO_Init+0x1d6>
 800d420:	2300      	movs	r3, #0
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	f002 0203 	and.w	r2, r2, #3
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	4093      	lsls	r3, r2
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d432:	4938      	ldr	r1, [pc, #224]	; (800d514 <HAL_GPIO_Init+0x2c8>)
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	089b      	lsrs	r3, r3, #2
 800d438:	3302      	adds	r3, #2
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d440:	4b39      	ldr	r3, [pc, #228]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	43db      	mvns	r3, r3
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	4013      	ands	r3, r2
 800d44e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	4313      	orrs	r3, r2
 800d462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d464:	4a30      	ldr	r2, [pc, #192]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d46a:	4b2f      	ldr	r3, [pc, #188]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	43db      	mvns	r3, r3
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	4013      	ands	r3, r2
 800d478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d494:	4b24      	ldr	r3, [pc, #144]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d49a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	43db      	mvns	r3, r3
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d4ba:	4a1b      	ldr	r2, [pc, #108]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800d4c2:	4b19      	ldr	r3, [pc, #100]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	43db      	mvns	r3, r3
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d4e8:	4a0f      	ldr	r2, [pc, #60]	; (800d528 <HAL_GPIO_Init+0x2dc>)
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	f47f aeab 	bne.w	800d25c <HAL_GPIO_Init+0x10>
  }
}
 800d506:	bf00      	nop
 800d508:	bf00      	nop
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	40010000 	.word	0x40010000
 800d518:	48000400 	.word	0x48000400
 800d51c:	48000800 	.word	0x48000800
 800d520:	48000c00 	.word	0x48000c00
 800d524:	48001000 	.word	0x48001000
 800d528:	58000800 	.word	0x58000800

0800d52c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	691a      	ldr	r2, [r3, #16]
 800d53c:	887b      	ldrh	r3, [r7, #2]
 800d53e:	4013      	ands	r3, r2
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d544:	2301      	movs	r3, #1
 800d546:	73fb      	strb	r3, [r7, #15]
 800d548:	e001      	b.n	800d54e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d54a:	2300      	movs	r3, #0
 800d54c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	807b      	strh	r3, [r7, #2]
 800d568:	4613      	mov	r3, r2
 800d56a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d56c:	787b      	ldrb	r3, [r7, #1]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d572:	887a      	ldrh	r2, [r7, #2]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d578:	e002      	b.n	800d580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d57a:	887a      	ldrh	r2, [r7, #2]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d59e:	887a      	ldrh	r2, [r7, #2]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	041a      	lsls	r2, r3, #16
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	43d9      	mvns	r1, r3
 800d5aa:	887b      	ldrh	r3, [r7, #2]
 800d5ac:	400b      	ands	r3, r1
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	619a      	str	r2, [r3, #24]
}
 800d5b4:	bf00      	nop
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d5ca:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d5cc:	68da      	ldr	r2, [r3, #12]
 800d5ce:	88fb      	ldrh	r3, [r7, #6]
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d006      	beq.n	800d5e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d5d6:	4a05      	ldr	r2, [pc, #20]	; (800d5ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d5d8:	88fb      	ldrh	r3, [r7, #6]
 800d5da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d5dc:	88fb      	ldrh	r3, [r7, #6]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7f8 f8e4 	bl	80057ac <HAL_GPIO_EXTI_Callback>
  }
}
 800d5e4:	bf00      	nop
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	58000800 	.word	0x58000800

0800d5f0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800d5f6:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <HAL_HSEM_IRQHandler+0x30>)
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800d5fc:	4b08      	ldr	r3, [pc, #32]	; (800d620 <HAL_HSEM_IRQHandler+0x30>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	43db      	mvns	r3, r3
 800d604:	4906      	ldr	r1, [pc, #24]	; (800d620 <HAL_HSEM_IRQHandler+0x30>)
 800d606:	4013      	ands	r3, r2
 800d608:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800d60a:	4a05      	ldr	r2, [pc, #20]	; (800d620 <HAL_HSEM_IRQHandler+0x30>)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f807 	bl	800d624 <HAL_HSEM_FreeCallback>
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	58001500 	.word	0x58001500

0800d624 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63a:	b08b      	sub	sp, #44	; 0x2c
 800d63c:	af06      	add	r7, sp, #24
 800d63e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d101      	bne.n	800d64a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e0cb      	b.n	800d7e2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7fd f82a 	bl	800a6b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2203      	movs	r2, #3
 800d668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4618      	mov	r0, r3
 800d672:	f005 f943 	bl	80128fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]
 800d67a:	e040      	b.n	800d6fe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	440b      	add	r3, r1
 800d68c:	3301      	adds	r3, #1
 800d68e:	2201      	movs	r2, #1
 800d690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	440b      	add	r3, r1
 800d6a2:	7bfa      	ldrb	r2, [r7, #15]
 800d6a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
 800d6a8:	6879      	ldr	r1, [r7, #4]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	440b      	add	r3, r1
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d6bc:	7bfa      	ldrb	r2, [r7, #15]
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	440b      	add	r3, r1
 800d6ca:	3338      	adds	r3, #56	; 0x38
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d6d0:	7bfa      	ldrb	r2, [r7, #15]
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	440b      	add	r3, r1
 800d6de:	333c      	adds	r3, #60	; 0x3c
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d6e4:	7bfa      	ldrb	r2, [r7, #15]
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	440b      	add	r3, r1
 800d6f2:	3340      	adds	r3, #64	; 0x40
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	73fb      	strb	r3, [r7, #15]
 800d6fe:	7bfa      	ldrb	r2, [r7, #15]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	429a      	cmp	r2, r3
 800d706:	d3b9      	bcc.n	800d67c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
 800d70c:	e044      	b.n	800d798 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d70e:	7bfa      	ldrb	r2, [r7, #15]
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	440b      	add	r3, r1
 800d71c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d720:	2200      	movs	r2, #0
 800d722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d724:	7bfa      	ldrb	r2, [r7, #15]
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	440b      	add	r3, r1
 800d732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d736:	7bfa      	ldrb	r2, [r7, #15]
 800d738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d73a:	7bfa      	ldrb	r2, [r7, #15]
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	440b      	add	r3, r1
 800d748:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d74c:	2200      	movs	r2, #0
 800d74e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d750:	7bfa      	ldrb	r2, [r7, #15]
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	440b      	add	r3, r1
 800d75e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d766:	7bfa      	ldrb	r2, [r7, #15]
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	440b      	add	r3, r1
 800d774:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d77c:	7bfa      	ldrb	r2, [r7, #15]
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	440b      	add	r3, r1
 800d78a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	3301      	adds	r3, #1
 800d796:	73fb      	strb	r3, [r7, #15]
 800d798:	7bfa      	ldrb	r2, [r7, #15]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d3b5      	bcc.n	800d70e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	603b      	str	r3, [r7, #0]
 800d7a8:	687e      	ldr	r6, [r7, #4]
 800d7aa:	466d      	mov	r5, sp
 800d7ac:	f106 0410 	add.w	r4, r6, #16
 800d7b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	1d33      	adds	r3, r6, #4
 800d7ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7bc:	6838      	ldr	r0, [r7, #0]
 800d7be:	f005 f8b8 	bl	8012932 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d102      	bne.n	800d7e0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f805 	bl	800d7ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b085      	sub	sp, #20
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d80e:	b29b      	uxth	r3, r3
 800d810:	f043 0301 	orr.w	r3, r3, #1
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d822:	b29b      	uxth	r3, r3
 800d824:	f043 0302 	orr.w	r3, r3, #2
 800d828:	b29a      	uxth	r2, r3
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d01d      	beq.n	800d88c <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	791b      	ldrb	r3, [r3, #4]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7fc fe5a 	bl	800a514 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2202      	movs	r2, #2
 800d864:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2201      	movs	r2, #1
 800d86c:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800d87c:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	711a      	strb	r2, [r3, #4]
 800d88a:	e001      	b.n	800d890 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
	...

0800d89c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d89c:	b480      	push	{r7}
 800d89e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a04      	ldr	r2, [pc, #16]	; (800d8b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d8a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8aa:	6013      	str	r3, [r2, #0]
}
 800d8ac:	bf00      	nop
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	58000400 	.word	0x58000400

0800d8bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d8c0:	4b04      	ldr	r3, [pc, #16]	; (800d8d4 <HAL_PWREx_GetVoltageRange+0x18>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	58000400 	.word	0x58000400

0800d8d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d8d8:	b480      	push	{r7}
 800d8da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8ea:	d101      	bne.n	800d8f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e000      	b.n	800d8f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <LL_RCC_HSE_Enable>:
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d90a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d90e:	6013      	str	r3, [r2, #0]
}
 800d910:	bf00      	nop
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <LL_RCC_HSE_Disable>:
{
 800d91a:	b480      	push	{r7}
 800d91c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d91e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d92c:	6013      	str	r3, [r2, #0]
}
 800d92e:	bf00      	nop
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <LL_RCC_HSE_IsReady>:
{
 800d938:	b480      	push	{r7}
 800d93a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d93c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d94a:	d101      	bne.n	800d950 <LL_RCC_HSE_IsReady+0x18>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <LL_RCC_HSE_IsReady+0x1a>
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <LL_RCC_HSI_Enable>:
{
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d96a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d96e:	6013      	str	r3, [r2, #0]
}
 800d970:	bf00      	nop
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <LL_RCC_HSI_Disable>:
{
 800d97a:	b480      	push	{r7}
 800d97c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d97e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d98c:	6013      	str	r3, [r2, #0]
}
 800d98e:	bf00      	nop
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <LL_RCC_HSI_IsReady>:
{
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d99c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9aa:	d101      	bne.n	800d9b0 <LL_RCC_HSI_IsReady+0x18>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <LL_RCC_HSI_IsReady+0x1a>
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <LL_RCC_HSI_SetCalibTrimming>:
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800d9c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	061b      	lsls	r3, r3, #24
 800d9d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	604b      	str	r3, [r1, #4]
}
 800d9da:	bf00      	nop
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <LL_RCC_HSI48_Enable>:
{
 800d9e6:	b480      	push	{r7}
 800d9e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d9ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d9f6:	f043 0301 	orr.w	r3, r3, #1
 800d9fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800d9fe:	bf00      	nop
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <LL_RCC_HSI48_Disable>:
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800da0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da18:	f023 0301 	bic.w	r3, r3, #1
 800da1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800da20:	bf00      	nop
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <LL_RCC_HSI48_IsReady>:
{
 800da2a:	b480      	push	{r7}
 800da2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800da2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d101      	bne.n	800da42 <LL_RCC_HSI48_IsReady+0x18>
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <LL_RCC_HSI48_IsReady+0x1a>
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <LL_RCC_LSE_Enable>:
{
 800da4e:	b480      	push	{r7}
 800da50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800da52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da5e:	f043 0301 	orr.w	r3, r3, #1
 800da62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800da66:	bf00      	nop
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <LL_RCC_LSE_Disable>:
{
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800da74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da80:	f023 0301 	bic.w	r3, r3, #1
 800da84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800da88:	bf00      	nop
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <LL_RCC_LSE_EnableBypass>:
{
 800da92:	b480      	push	{r7}
 800da94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800da96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800daa2:	f043 0304 	orr.w	r3, r3, #4
 800daa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800daaa:	bf00      	nop
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <LL_RCC_LSE_DisableBypass>:
{
 800dab4:	b480      	push	{r7}
 800dab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800dab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dac4:	f023 0304 	bic.w	r3, r3, #4
 800dac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dacc:	bf00      	nop
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <LL_RCC_LSE_IsReady>:
{
 800dad6:	b480      	push	{r7}
 800dad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae2:	f003 0302 	and.w	r3, r3, #2
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d101      	bne.n	800daee <LL_RCC_LSE_IsReady+0x18>
 800daea:	2301      	movs	r3, #1
 800daec:	e000      	b.n	800daf0 <LL_RCC_LSE_IsReady+0x1a>
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <LL_RCC_LSI1_Enable>:
{
 800dafa:	b480      	push	{r7}
 800dafc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800dafe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db0a:	f043 0301 	orr.w	r3, r3, #1
 800db0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db12:	bf00      	nop
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <LL_RCC_LSI1_Disable>:
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800db20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db2c:	f023 0301 	bic.w	r3, r3, #1
 800db30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db34:	bf00      	nop
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <LL_RCC_LSI1_IsReady>:
{
 800db3e:	b480      	push	{r7}
 800db40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800db42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db4a:	f003 0302 	and.w	r3, r3, #2
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d101      	bne.n	800db56 <LL_RCC_LSI1_IsReady+0x18>
 800db52:	2301      	movs	r3, #1
 800db54:	e000      	b.n	800db58 <LL_RCC_LSI1_IsReady+0x1a>
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <LL_RCC_LSI2_Enable>:
{
 800db62:	b480      	push	{r7}
 800db64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800db66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db72:	f043 0304 	orr.w	r3, r3, #4
 800db76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db7a:	bf00      	nop
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <LL_RCC_LSI2_Disable>:
{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800db88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db94:	f023 0304 	bic.w	r3, r3, #4
 800db98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db9c:	bf00      	nop
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <LL_RCC_LSI2_IsReady>:
{
 800dba6:	b480      	push	{r7}
 800dba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800dbaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b08      	cmp	r3, #8
 800dbb8:	d101      	bne.n	800dbbe <LL_RCC_LSI2_IsReady+0x18>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e000      	b.n	800dbc0 <LL_RCC_LSI2_IsReady+0x1a>
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <LL_RCC_LSI2_SetTrimming>:
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b083      	sub	sp, #12
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800dbd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	021b      	lsls	r3, r3, #8
 800dbe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <LL_RCC_MSI_Enable>:
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800dbfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc06:	f043 0301 	orr.w	r3, r3, #1
 800dc0a:	6013      	str	r3, [r2, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <LL_RCC_MSI_Disable>:
{
 800dc16:	b480      	push	{r7}
 800dc18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800dc1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc24:	f023 0301 	bic.w	r3, r3, #1
 800dc28:	6013      	str	r3, [r2, #0]
}
 800dc2a:	bf00      	nop
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <LL_RCC_MSI_IsReady>:
{
 800dc34:	b480      	push	{r7}
 800dc36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800dc38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0302 	and.w	r3, r3, #2
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d101      	bne.n	800dc4a <LL_RCC_MSI_IsReady+0x16>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <LL_RCC_MSI_IsReady+0x18>
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <LL_RCC_MSI_SetRange>:
{
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800dc5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	600b      	str	r3, [r1, #0]
}
 800dc72:	bf00      	nop
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <LL_RCC_MSI_GetRange>:
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800dc84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2bb0      	cmp	r3, #176	; 0xb0
 800dc94:	d901      	bls.n	800dc9a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800dc96:	23b0      	movs	r3, #176	; 0xb0
 800dc98:	607b      	str	r3, [r7, #4]
  return msiRange;
 800dc9a:	687b      	ldr	r3, [r7, #4]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800dcb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	604b      	str	r3, [r1, #4]
}
 800dcc6:	bf00      	nop
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <LL_RCC_SetSysClkSource>:
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b083      	sub	sp, #12
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800dcda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f023 0203 	bic.w	r2, r3, #3
 800dce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4313      	orrs	r3, r2
 800dcec:	608b      	str	r3, [r1, #8]
}
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <LL_RCC_GetSysClkSource>:
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800dcfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	f003 030c 	and.w	r3, r3, #12
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <LL_RCC_SetAHBPrescaler>:
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800dd1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	608b      	str	r3, [r1, #8]
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <LL_C2_RCC_SetAHBPrescaler>:
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800dd42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800dd4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4313      	orrs	r3, r2
 800dd56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800dd5a:	bf00      	nop
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <LL_RCC_SetAHB4Prescaler>:
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800dd6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800dd76:	f023 020f 	bic.w	r2, r3, #15
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	091b      	lsrs	r3, r3, #4
 800dd7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd82:	4313      	orrs	r3, r2
 800dd84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <LL_RCC_SetAPB1Prescaler>:
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800dd9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dda6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	608b      	str	r3, [r1, #8]
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <LL_RCC_SetAPB2Prescaler>:
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ddc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ddce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	608b      	str	r3, [r1, #8]
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <LL_RCC_GetAHBPrescaler>:
{
 800dde4:	b480      	push	{r7}
 800dde6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800dde8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <LL_RCC_GetAHB4Prescaler>:
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800de00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800de08:	011b      	lsls	r3, r3, #4
 800de0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <LL_RCC_GetAPB1Prescaler>:
{
 800de18:	b480      	push	{r7}
 800de1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800de1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800de26:	4618      	mov	r0, r3
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <LL_RCC_GetAPB2Prescaler>:
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800de34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800de3e:	4618      	mov	r0, r3
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800de48:	b480      	push	{r7}
 800de4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800de4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de5a:	6013      	str	r3, [r2, #0]
}
 800de5c:	bf00      	nop
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800de66:	b480      	push	{r7}
 800de68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800de6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de78:	6013      	str	r3, [r2, #0]
}
 800de7a:	bf00      	nop
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800de88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de96:	d101      	bne.n	800de9c <LL_RCC_PLL_IsReady+0x18>
 800de98:	2301      	movs	r3, #1
 800de9a:	e000      	b.n	800de9e <LL_RCC_PLL_IsReady+0x1a>
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800deac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	0a1b      	lsrs	r3, r3, #8
 800deb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800deb8:	4618      	mov	r0, r3
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800dec2:	b480      	push	{r7}
 800dec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800dec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800deda:	b480      	push	{r7}
 800dedc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800dede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800dee8:	4618      	mov	r0, r3
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800def2:	b480      	push	{r7}
 800def4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800def6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	f003 0303 	and.w	r3, r3, #3
}
 800df00:	4618      	mov	r0, r3
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800df0a:	b480      	push	{r7}
 800df0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800df0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df1c:	d101      	bne.n	800df22 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800df2e:	b480      	push	{r7}
 800df30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800df32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800df3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df42:	d101      	bne.n	800df48 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800df44:	2301      	movs	r3, #1
 800df46:	e000      	b.n	800df4a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800df54:	b480      	push	{r7}
 800df56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800df58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800df60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df68:	d101      	bne.n	800df6e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e000      	b.n	800df70 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800df7a:	b480      	push	{r7}
 800df7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800df7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df8c:	d101      	bne.n	800df92 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800df8e:	2301      	movs	r3, #1
 800df90:	e000      	b.n	800df94 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800dfa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfb0:	d101      	bne.n	800dfb6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e000      	b.n	800dfb8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
	...

0800dfc4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfc4:	b590      	push	{r4, r7, lr}
 800dfc6:	b08d      	sub	sp, #52	; 0x34
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d101      	bne.n	800dfd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e363      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 0320 	and.w	r3, r3, #32
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 808d 	beq.w	800e0fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfe4:	f7ff fe89 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800dfe8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dfea:	f7ff ff82 	bl	800def2 <LL_RCC_PLL_GetMainSource>
 800dfee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <HAL_RCC_OscConfig+0x3e>
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2b0c      	cmp	r3, #12
 800dffa:	d147      	bne.n	800e08c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d144      	bne.n	800e08c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e347      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e012:	f7ff fe34 	bl	800dc7e <LL_RCC_MSI_GetRange>
 800e016:	4603      	mov	r3, r0
 800e018:	429c      	cmp	r4, r3
 800e01a:	d914      	bls.n	800e046 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fd2f 	bl	800ea84 <RCC_SetFlashLatencyFromMSIRange>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e336      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff fe0e 	bl	800dc56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff fe32 	bl	800dca8 <LL_RCC_MSI_SetCalibTrimming>
 800e044:	e013      	b.n	800e06e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff fe03 	bl	800dc56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff fe27 	bl	800dca8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 fd10 	bl	800ea84 <RCC_SetFlashLatencyFromMSIRange>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e317      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e06e:	f000 fcc9 	bl	800ea04 <HAL_RCC_GetHCLKFreq>
 800e072:	4603      	mov	r3, r0
 800e074:	4aa4      	ldr	r2, [pc, #656]	; (800e308 <HAL_RCC_OscConfig+0x344>)
 800e076:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e078:	4ba4      	ldr	r3, [pc, #656]	; (800e30c <HAL_RCC_OscConfig+0x348>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fc95 	bl	800c9ac <HAL_InitTick>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d039      	beq.n	800e0fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e308      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	69db      	ldr	r3, [r3, #28]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d01e      	beq.n	800e0d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e094:	f7ff fdb0 	bl	800dbf8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e098:	f7fe fcd6 	bl	800ca48 <HAL_GetTick>
 800e09c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e09e:	e008      	b.n	800e0b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e0a0:	f7fe fcd2 	bl	800ca48 <HAL_GetTick>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d901      	bls.n	800e0b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e2f5      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e0b2:	f7ff fdbf 	bl	800dc34 <LL_RCC_MSI_IsReady>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d0f1      	beq.n	800e0a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff fdc8 	bl	800dc56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fdec 	bl	800dca8 <LL_RCC_MSI_SetCalibTrimming>
 800e0d0:	e015      	b.n	800e0fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e0d2:	f7ff fda0 	bl	800dc16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e0d6:	f7fe fcb7 	bl	800ca48 <HAL_GetTick>
 800e0da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e0dc:	e008      	b.n	800e0f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e0de:	f7fe fcb3 	bl	800ca48 <HAL_GetTick>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d901      	bls.n	800e0f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e2d6      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e0f0:	f7ff fda0 	bl	800dc34 <LL_RCC_MSI_IsReady>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1f1      	bne.n	800e0de <HAL_RCC_OscConfig+0x11a>
 800e0fa:	e000      	b.n	800e0fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e0fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	2b00      	cmp	r3, #0
 800e108:	d047      	beq.n	800e19a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e10a:	f7ff fdf6 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800e10e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e110:	f7ff feef 	bl	800def2 <LL_RCC_PLL_GetMainSource>
 800e114:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d005      	beq.n	800e128 <HAL_RCC_OscConfig+0x164>
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	2b0c      	cmp	r3, #12
 800e120:	d108      	bne.n	800e134 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	2b03      	cmp	r3, #3
 800e126:	d105      	bne.n	800e134 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d134      	bne.n	800e19a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	e2b4      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e13c:	d102      	bne.n	800e144 <HAL_RCC_OscConfig+0x180>
 800e13e:	f7ff fbdd 	bl	800d8fc <LL_RCC_HSE_Enable>
 800e142:	e001      	b.n	800e148 <HAL_RCC_OscConfig+0x184>
 800e144:	f7ff fbe9 	bl	800d91a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d012      	beq.n	800e176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e150:	f7fe fc7a 	bl	800ca48 <HAL_GetTick>
 800e154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e156:	e008      	b.n	800e16a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e158:	f7fe fc76 	bl	800ca48 <HAL_GetTick>
 800e15c:	4602      	mov	r2, r0
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	2b64      	cmp	r3, #100	; 0x64
 800e164:	d901      	bls.n	800e16a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e166:	2303      	movs	r3, #3
 800e168:	e299      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e16a:	f7ff fbe5 	bl	800d938 <LL_RCC_HSE_IsReady>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d0f1      	beq.n	800e158 <HAL_RCC_OscConfig+0x194>
 800e174:	e011      	b.n	800e19a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e176:	f7fe fc67 	bl	800ca48 <HAL_GetTick>
 800e17a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e17c:	e008      	b.n	800e190 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e17e:	f7fe fc63 	bl	800ca48 <HAL_GetTick>
 800e182:	4602      	mov	r2, r0
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	2b64      	cmp	r3, #100	; 0x64
 800e18a:	d901      	bls.n	800e190 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e18c:	2303      	movs	r3, #3
 800e18e:	e286      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e190:	f7ff fbd2 	bl	800d938 <LL_RCC_HSE_IsReady>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1f1      	bne.n	800e17e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d04c      	beq.n	800e240 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1a6:	f7ff fda8 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800e1aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e1ac:	f7ff fea1 	bl	800def2 <LL_RCC_PLL_GetMainSource>
 800e1b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d005      	beq.n	800e1c4 <HAL_RCC_OscConfig+0x200>
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b0c      	cmp	r3, #12
 800e1bc:	d10e      	bne.n	800e1dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	d10b      	bne.n	800e1dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e266      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff fbf1 	bl	800d9bc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e1da:	e031      	b.n	800e240 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d019      	beq.n	800e218 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e1e4:	f7ff fbba 	bl	800d95c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1e8:	f7fe fc2e 	bl	800ca48 <HAL_GetTick>
 800e1ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e1ee:	e008      	b.n	800e202 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1f0:	f7fe fc2a 	bl	800ca48 <HAL_GetTick>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d901      	bls.n	800e202 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e1fe:	2303      	movs	r3, #3
 800e200:	e24d      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e202:	f7ff fbc9 	bl	800d998 <LL_RCC_HSI_IsReady>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0f1      	beq.n	800e1f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fbd3 	bl	800d9bc <LL_RCC_HSI_SetCalibTrimming>
 800e216:	e013      	b.n	800e240 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e218:	f7ff fbaf 	bl	800d97a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e21c:	f7fe fc14 	bl	800ca48 <HAL_GetTick>
 800e220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e222:	e008      	b.n	800e236 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e224:	f7fe fc10 	bl	800ca48 <HAL_GetTick>
 800e228:	4602      	mov	r2, r0
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d901      	bls.n	800e236 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e232:	2303      	movs	r3, #3
 800e234:	e233      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e236:	f7ff fbaf 	bl	800d998 <LL_RCC_HSI_IsReady>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1f1      	bne.n	800e224 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 0308 	and.w	r3, r3, #8
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d106      	bne.n	800e25a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 80a3 	beq.w	800e3a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d076      	beq.n	800e350 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0310 	and.w	r3, r3, #16
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d046      	beq.n	800e2fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e26e:	f7ff fc66 	bl	800db3e <LL_RCC_LSI1_IsReady>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d113      	bne.n	800e2a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e278:	f7ff fc3f 	bl	800dafa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e27c:	f7fe fbe4 	bl	800ca48 <HAL_GetTick>
 800e280:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e282:	e008      	b.n	800e296 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e284:	f7fe fbe0 	bl	800ca48 <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d901      	bls.n	800e296 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e292:	2303      	movs	r3, #3
 800e294:	e203      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e296:	f7ff fc52 	bl	800db3e <LL_RCC_LSI1_IsReady>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d0f1      	beq.n	800e284 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e2a0:	f7ff fc5f 	bl	800db62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2a4:	f7fe fbd0 	bl	800ca48 <HAL_GetTick>
 800e2a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e2aa:	e008      	b.n	800e2be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e2ac:	f7fe fbcc 	bl	800ca48 <HAL_GetTick>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d901      	bls.n	800e2be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	e1ef      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e2be:	f7ff fc72 	bl	800dba6 <LL_RCC_LSI2_IsReady>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0f1      	beq.n	800e2ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff fc7c 	bl	800dbca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e2d2:	f7ff fc23 	bl	800db1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2d6:	f7fe fbb7 	bl	800ca48 <HAL_GetTick>
 800e2da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e2dc:	e008      	b.n	800e2f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e2de:	f7fe fbb3 	bl	800ca48 <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d901      	bls.n	800e2f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e1d6      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e2f0:	f7ff fc25 	bl	800db3e <LL_RCC_LSI1_IsReady>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1f1      	bne.n	800e2de <HAL_RCC_OscConfig+0x31a>
 800e2fa:	e051      	b.n	800e3a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e2fc:	f7ff fbfd 	bl	800dafa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e300:	f7fe fba2 	bl	800ca48 <HAL_GetTick>
 800e304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e306:	e00c      	b.n	800e322 <HAL_RCC_OscConfig+0x35e>
 800e308:	20000014 	.word	0x20000014
 800e30c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e310:	f7fe fb9a 	bl	800ca48 <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d901      	bls.n	800e322 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e31e:	2303      	movs	r3, #3
 800e320:	e1bd      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e322:	f7ff fc0c 	bl	800db3e <LL_RCC_LSI1_IsReady>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0f1      	beq.n	800e310 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e32c:	f7ff fc2a 	bl	800db84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e330:	e008      	b.n	800e344 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e332:	f7fe fb89 	bl	800ca48 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d901      	bls.n	800e344 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e340:	2303      	movs	r3, #3
 800e342:	e1ac      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e344:	f7ff fc2f 	bl	800dba6 <LL_RCC_LSI2_IsReady>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1f1      	bne.n	800e332 <HAL_RCC_OscConfig+0x36e>
 800e34e:	e027      	b.n	800e3a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e350:	f7ff fc18 	bl	800db84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e354:	f7fe fb78 	bl	800ca48 <HAL_GetTick>
 800e358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e35a:	e008      	b.n	800e36e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e35c:	f7fe fb74 	bl	800ca48 <HAL_GetTick>
 800e360:	4602      	mov	r2, r0
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	2b03      	cmp	r3, #3
 800e368:	d901      	bls.n	800e36e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e197      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e36e:	f7ff fc1a 	bl	800dba6 <LL_RCC_LSI2_IsReady>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1f1      	bne.n	800e35c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e378:	f7ff fbd0 	bl	800db1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e37c:	f7fe fb64 	bl	800ca48 <HAL_GetTick>
 800e380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e382:	e008      	b.n	800e396 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e384:	f7fe fb60 	bl	800ca48 <HAL_GetTick>
 800e388:	4602      	mov	r2, r0
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d901      	bls.n	800e396 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	e183      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e396:	f7ff fbd2 	bl	800db3e <LL_RCC_LSI1_IsReady>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1f1      	bne.n	800e384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f003 0304 	and.w	r3, r3, #4
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d05b      	beq.n	800e464 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e3ac:	4ba7      	ldr	r3, [pc, #668]	; (800e64c <HAL_RCC_OscConfig+0x688>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d114      	bne.n	800e3e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e3b8:	f7ff fa70 	bl	800d89c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e3bc:	f7fe fb44 	bl	800ca48 <HAL_GetTick>
 800e3c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e3c2:	e008      	b.n	800e3d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e3c4:	f7fe fb40 	bl	800ca48 <HAL_GetTick>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d901      	bls.n	800e3d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	e163      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e3d6:	4b9d      	ldr	r3, [pc, #628]	; (800e64c <HAL_RCC_OscConfig+0x688>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0f0      	beq.n	800e3c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d102      	bne.n	800e3f0 <HAL_RCC_OscConfig+0x42c>
 800e3ea:	f7ff fb30 	bl	800da4e <LL_RCC_LSE_Enable>
 800e3ee:	e00c      	b.n	800e40a <HAL_RCC_OscConfig+0x446>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	2b05      	cmp	r3, #5
 800e3f6:	d104      	bne.n	800e402 <HAL_RCC_OscConfig+0x43e>
 800e3f8:	f7ff fb4b 	bl	800da92 <LL_RCC_LSE_EnableBypass>
 800e3fc:	f7ff fb27 	bl	800da4e <LL_RCC_LSE_Enable>
 800e400:	e003      	b.n	800e40a <HAL_RCC_OscConfig+0x446>
 800e402:	f7ff fb35 	bl	800da70 <LL_RCC_LSE_Disable>
 800e406:	f7ff fb55 	bl	800dab4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d014      	beq.n	800e43c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e412:	f7fe fb19 	bl	800ca48 <HAL_GetTick>
 800e416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800e418:	e00a      	b.n	800e430 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e41a:	f7fe fb15 	bl	800ca48 <HAL_GetTick>
 800e41e:	4602      	mov	r2, r0
 800e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	f241 3288 	movw	r2, #5000	; 0x1388
 800e428:	4293      	cmp	r3, r2
 800e42a:	d901      	bls.n	800e430 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e136      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800e430:	f7ff fb51 	bl	800dad6 <LL_RCC_LSE_IsReady>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0ef      	beq.n	800e41a <HAL_RCC_OscConfig+0x456>
 800e43a:	e013      	b.n	800e464 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e43c:	f7fe fb04 	bl	800ca48 <HAL_GetTick>
 800e440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800e442:	e00a      	b.n	800e45a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e444:	f7fe fb00 	bl	800ca48 <HAL_GetTick>
 800e448:	4602      	mov	r2, r0
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e452:	4293      	cmp	r3, r2
 800e454:	d901      	bls.n	800e45a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800e456:	2303      	movs	r3, #3
 800e458:	e121      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800e45a:	f7ff fb3c 	bl	800dad6 <LL_RCC_LSE_IsReady>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1ef      	bne.n	800e444 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d02c      	beq.n	800e4ca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e474:	2b00      	cmp	r3, #0
 800e476:	d014      	beq.n	800e4a2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e478:	f7ff fab5 	bl	800d9e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e47c:	f7fe fae4 	bl	800ca48 <HAL_GetTick>
 800e480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e482:	e008      	b.n	800e496 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e484:	f7fe fae0 	bl	800ca48 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d901      	bls.n	800e496 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800e492:	2303      	movs	r3, #3
 800e494:	e103      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e496:	f7ff fac8 	bl	800da2a <LL_RCC_HSI48_IsReady>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d0f1      	beq.n	800e484 <HAL_RCC_OscConfig+0x4c0>
 800e4a0:	e013      	b.n	800e4ca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4a2:	f7ff fab1 	bl	800da08 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4a6:	f7fe facf 	bl	800ca48 <HAL_GetTick>
 800e4aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e4ac:	e008      	b.n	800e4c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4ae:	f7fe facb 	bl	800ca48 <HAL_GetTick>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d901      	bls.n	800e4c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	e0ee      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e4c0:	f7ff fab3 	bl	800da2a <LL_RCC_HSI48_IsReady>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1f1      	bne.n	800e4ae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f000 80e4 	beq.w	800e69c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e4d4:	f7ff fc11 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800e4d8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e4da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	f040 80b4 	bne.w	800e654 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f003 0203 	and.w	r2, r3, #3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d123      	bne.n	800e542 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e504:	429a      	cmp	r2, r3
 800e506:	d11c      	bne.n	800e542 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	0a1b      	lsrs	r3, r3, #8
 800e50c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e514:	429a      	cmp	r2, r3
 800e516:	d114      	bne.n	800e542 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e522:	429a      	cmp	r2, r3
 800e524:	d10d      	bne.n	800e542 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e530:	429a      	cmp	r2, r3
 800e532:	d106      	bne.n	800e542 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e53e:	429a      	cmp	r2, r3
 800e540:	d05d      	beq.n	800e5fe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2b0c      	cmp	r3, #12
 800e546:	d058      	beq.n	800e5fa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e0a1      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e55a:	f7ff fc84 	bl	800de66 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e55e:	f7fe fa73 	bl	800ca48 <HAL_GetTick>
 800e562:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e564:	e008      	b.n	800e578 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e566:	f7fe fa6f 	bl	800ca48 <HAL_GetTick>
 800e56a:	4602      	mov	r2, r0
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	2b02      	cmp	r3, #2
 800e572:	d901      	bls.n	800e578 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800e574:	2303      	movs	r3, #3
 800e576:	e092      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1ef      	bne.n	800e566 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e58a:	68da      	ldr	r2, [r3, #12]
 800e58c:	4b30      	ldr	r3, [pc, #192]	; (800e650 <HAL_RCC_OscConfig+0x68c>)
 800e58e:	4013      	ands	r3, r2
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e598:	4311      	orrs	r1, r2
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e59e:	0212      	lsls	r2, r2, #8
 800e5a0:	4311      	orrs	r1, r2
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e5a6:	4311      	orrs	r1, r2
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e5ac:	4311      	orrs	r1, r2
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e5b2:	430a      	orrs	r2, r1
 800e5b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e5bc:	f7ff fc44 	bl	800de48 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e5c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e5ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e5d0:	f7fe fa3a 	bl	800ca48 <HAL_GetTick>
 800e5d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e5d6:	e008      	b.n	800e5ea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5d8:	f7fe fa36 	bl	800ca48 <HAL_GetTick>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d901      	bls.n	800e5ea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	e059      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e5ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d0ef      	beq.n	800e5d8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e5f8:	e050      	b.n	800e69c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e04f      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e5fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d147      	bne.n	800e69c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e60c:	f7ff fc1c 	bl	800de48 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e61e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e620:	f7fe fa12 	bl	800ca48 <HAL_GetTick>
 800e624:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e626:	e008      	b.n	800e63a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e628:	f7fe fa0e 	bl	800ca48 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	2b02      	cmp	r3, #2
 800e634:	d901      	bls.n	800e63a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800e636:	2303      	movs	r3, #3
 800e638:	e031      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e63a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0ef      	beq.n	800e628 <HAL_RCC_OscConfig+0x664>
 800e648:	e028      	b.n	800e69c <HAL_RCC_OscConfig+0x6d8>
 800e64a:	bf00      	nop
 800e64c:	58000400 	.word	0x58000400
 800e650:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	2b0c      	cmp	r3, #12
 800e658:	d01e      	beq.n	800e698 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e65a:	f7ff fc04 	bl	800de66 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e65e:	f7fe f9f3 	bl	800ca48 <HAL_GetTick>
 800e662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e664:	e008      	b.n	800e678 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e666:	f7fe f9ef 	bl	800ca48 <HAL_GetTick>
 800e66a:	4602      	mov	r2, r0
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	2b02      	cmp	r3, #2
 800e672:	d901      	bls.n	800e678 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800e674:	2303      	movs	r3, #3
 800e676:	e012      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1ef      	bne.n	800e666 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800e686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e68a:	68da      	ldr	r2, [r3, #12]
 800e68c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e690:	4b05      	ldr	r3, [pc, #20]	; (800e6a8 <HAL_RCC_OscConfig+0x6e4>)
 800e692:	4013      	ands	r3, r2
 800e694:	60cb      	str	r3, [r1, #12]
 800e696:	e001      	b.n	800e69c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	e000      	b.n	800e69e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3734      	adds	r7, #52	; 0x34
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd90      	pop	{r4, r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	eefefffc 	.word	0xeefefffc

0800e6ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e12d      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e6c0:	4b98      	ldr	r3, [pc, #608]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 0307 	and.w	r3, r3, #7
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d91b      	bls.n	800e706 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6ce:	4b95      	ldr	r3, [pc, #596]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f023 0207 	bic.w	r2, r3, #7
 800e6d6:	4993      	ldr	r1, [pc, #588]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6de:	f7fe f9b3 	bl	800ca48 <HAL_GetTick>
 800e6e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6e4:	e008      	b.n	800e6f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e6e6:	f7fe f9af 	bl	800ca48 <HAL_GetTick>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d901      	bls.n	800e6f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e111      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6f8:	4b8a      	ldr	r3, [pc, #552]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f003 0307 	and.w	r3, r3, #7
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	429a      	cmp	r2, r3
 800e704:	d1ef      	bne.n	800e6e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 0302 	and.w	r3, r3, #2
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d016      	beq.n	800e740 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fafb 	bl	800dd12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e71c:	f7fe f994 	bl	800ca48 <HAL_GetTick>
 800e720:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e722:	e008      	b.n	800e736 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e724:	f7fe f990 	bl	800ca48 <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d901      	bls.n	800e736 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e0f2      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e736:	f7ff fbe8 	bl	800df0a <LL_RCC_IsActiveFlag_HPRE>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d0f1      	beq.n	800e724 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 0320 	and.w	r3, r3, #32
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d016      	beq.n	800e77a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff faf2 	bl	800dd3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e756:	f7fe f977 	bl	800ca48 <HAL_GetTick>
 800e75a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e75c:	e008      	b.n	800e770 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e75e:	f7fe f973 	bl	800ca48 <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d901      	bls.n	800e770 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e0d5      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e770:	f7ff fbdd 	bl	800df2e <LL_RCC_IsActiveFlag_C2HPRE>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0f1      	beq.n	800e75e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e782:	2b00      	cmp	r3, #0
 800e784:	d016      	beq.n	800e7b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7ff faeb 	bl	800dd66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e790:	f7fe f95a 	bl	800ca48 <HAL_GetTick>
 800e794:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e796:	e008      	b.n	800e7aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e798:	f7fe f956 	bl	800ca48 <HAL_GetTick>
 800e79c:	4602      	mov	r2, r0
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d901      	bls.n	800e7aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e0b8      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e7aa:	f7ff fbd3 	bl	800df54 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0f1      	beq.n	800e798 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f003 0304 	and.w	r3, r3, #4
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d016      	beq.n	800e7ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff fae5 	bl	800dd94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e7ca:	f7fe f93d 	bl	800ca48 <HAL_GetTick>
 800e7ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e7d0:	e008      	b.n	800e7e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e7d2:	f7fe f939 	bl	800ca48 <HAL_GetTick>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	d901      	bls.n	800e7e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	e09b      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e7e4:	f7ff fbc9 	bl	800df7a <LL_RCC_IsActiveFlag_PPRE1>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0f1      	beq.n	800e7d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f003 0308 	and.w	r3, r3, #8
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d017      	beq.n	800e82a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fadb 	bl	800ddbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e806:	f7fe f91f 	bl	800ca48 <HAL_GetTick>
 800e80a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e80c:	e008      	b.n	800e820 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e80e:	f7fe f91b 	bl	800ca48 <HAL_GetTick>
 800e812:	4602      	mov	r2, r0
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d901      	bls.n	800e820 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e81c:	2303      	movs	r3, #3
 800e81e:	e07d      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e820:	f7ff fbbd 	bl	800df9e <LL_RCC_IsActiveFlag_PPRE2>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d0f1      	beq.n	800e80e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d043      	beq.n	800e8be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d106      	bne.n	800e84c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e83e:	f7ff f87b 	bl	800d938 <LL_RCC_HSE_IsReady>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d11e      	bne.n	800e886 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e067      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	2b03      	cmp	r3, #3
 800e852:	d106      	bne.n	800e862 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e854:	f7ff fb16 	bl	800de84 <LL_RCC_PLL_IsReady>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d113      	bne.n	800e886 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	e05c      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e86a:	f7ff f9e3 	bl	800dc34 <LL_RCC_MSI_IsReady>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d108      	bne.n	800e886 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e051      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e878:	f7ff f88e 	bl	800d998 <LL_RCC_HSI_IsReady>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d101      	bne.n	800e886 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	e04a      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff fa21 	bl	800dcd2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e890:	f7fe f8da 	bl	800ca48 <HAL_GetTick>
 800e894:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e896:	e00a      	b.n	800e8ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e898:	f7fe f8d6 	bl	800ca48 <HAL_GetTick>
 800e89c:	4602      	mov	r2, r0
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d901      	bls.n	800e8ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e036      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8ae:	f7ff fa24 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d1ec      	bne.n	800e898 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e8be:	4b19      	ldr	r3, [pc, #100]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f003 0307 	and.w	r3, r3, #7
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d21b      	bcs.n	800e904 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8cc:	4b15      	ldr	r3, [pc, #84]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f023 0207 	bic.w	r2, r3, #7
 800e8d4:	4913      	ldr	r1, [pc, #76]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8dc:	f7fe f8b4 	bl	800ca48 <HAL_GetTick>
 800e8e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8e2:	e008      	b.n	800e8f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e8e4:	f7fe f8b0 	bl	800ca48 <HAL_GetTick>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	2b02      	cmp	r3, #2
 800e8f0:	d901      	bls.n	800e8f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e012      	b.n	800e91c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <HAL_RCC_ClockConfig+0x278>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d1ef      	bne.n	800e8e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e904:	f000 f87e 	bl	800ea04 <HAL_RCC_GetHCLKFreq>
 800e908:	4603      	mov	r3, r0
 800e90a:	4a07      	ldr	r2, [pc, #28]	; (800e928 <HAL_RCC_ClockConfig+0x27c>)
 800e90c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e90e:	f7fe f8a7 	bl	800ca60 <HAL_GetTickPrio>
 800e912:	4603      	mov	r3, r0
 800e914:	4618      	mov	r0, r3
 800e916:	f7fe f849 	bl	800c9ac <HAL_InitTick>
 800e91a:	4603      	mov	r3, r0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	58004000 	.word	0x58004000
 800e928:	20000014 	.word	0x20000014

0800e92c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e92c:	b590      	push	{r4, r7, lr}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e932:	f7ff f9e2 	bl	800dcfa <LL_RCC_GetSysClkSource>
 800e936:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e93e:	f7ff f99e 	bl	800dc7e <LL_RCC_MSI_GetRange>
 800e942:	4603      	mov	r3, r0
 800e944:	091b      	lsrs	r3, r3, #4
 800e946:	f003 030f 	and.w	r3, r3, #15
 800e94a:	4a2b      	ldr	r2, [pc, #172]	; (800e9f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	e04b      	b.n	800e9ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b04      	cmp	r3, #4
 800e958:	d102      	bne.n	800e960 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e95a:	4b28      	ldr	r3, [pc, #160]	; (800e9fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	e045      	b.n	800e9ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b08      	cmp	r3, #8
 800e964:	d10a      	bne.n	800e97c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e966:	f7fe ffb7 	bl	800d8d8 <LL_RCC_HSE_IsEnabledDiv2>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d102      	bne.n	800e976 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e970:	4b22      	ldr	r3, [pc, #136]	; (800e9fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	e03a      	b.n	800e9ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e976:	4b22      	ldr	r3, [pc, #136]	; (800ea00 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	e037      	b.n	800e9ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e97c:	f7ff fab9 	bl	800def2 <LL_RCC_PLL_GetMainSource>
 800e980:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b02      	cmp	r3, #2
 800e986:	d003      	beq.n	800e990 <HAL_RCC_GetSysClockFreq+0x64>
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d003      	beq.n	800e996 <HAL_RCC_GetSysClockFreq+0x6a>
 800e98e:	e00d      	b.n	800e9ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e990:	4b1a      	ldr	r3, [pc, #104]	; (800e9fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800e992:	60bb      	str	r3, [r7, #8]
        break;
 800e994:	e015      	b.n	800e9c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e996:	f7fe ff9f 	bl	800d8d8 <LL_RCC_HSE_IsEnabledDiv2>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d102      	bne.n	800e9a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e9a0:	4b16      	ldr	r3, [pc, #88]	; (800e9fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800e9a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e9a4:	e00d      	b.n	800e9c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e9a6:	4b16      	ldr	r3, [pc, #88]	; (800ea00 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e9a8:	60bb      	str	r3, [r7, #8]
        break;
 800e9aa:	e00a      	b.n	800e9c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e9ac:	f7ff f967 	bl	800dc7e <LL_RCC_MSI_GetRange>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	091b      	lsrs	r3, r3, #4
 800e9b4:	f003 030f 	and.w	r3, r3, #15
 800e9b8:	4a0f      	ldr	r2, [pc, #60]	; (800e9f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9be:	60bb      	str	r3, [r7, #8]
        break;
 800e9c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800e9c2:	f7ff fa71 	bl	800dea8 <LL_RCC_PLL_GetN>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	fb03 f402 	mul.w	r4, r3, r2
 800e9ce:	f7ff fa84 	bl	800deda <LL_RCC_PLL_GetDivider>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	091b      	lsrs	r3, r3, #4
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	fbb4 f4f3 	udiv	r4, r4, r3
 800e9dc:	f7ff fa71 	bl	800dec2 <LL_RCC_PLL_GetR>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	0f5b      	lsrs	r3, r3, #29
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	fbb4 f3f3 	udiv	r3, r4, r3
 800e9ea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd90      	pop	{r4, r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0801849c 	.word	0x0801849c
 800e9fc:	00f42400 	.word	0x00f42400
 800ea00:	01e84800 	.word	0x01e84800

0800ea04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea04:	b598      	push	{r3, r4, r7, lr}
 800ea06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ea08:	f7ff ff90 	bl	800e92c <HAL_RCC_GetSysClockFreq>
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	f7ff f9e9 	bl	800dde4 <LL_RCC_GetAHBPrescaler>
 800ea12:	4603      	mov	r3, r0
 800ea14:	091b      	lsrs	r3, r3, #4
 800ea16:	f003 030f 	and.w	r3, r3, #15
 800ea1a:	4a03      	ldr	r2, [pc, #12]	; (800ea28 <HAL_RCC_GetHCLKFreq+0x24>)
 800ea1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	bd98      	pop	{r3, r4, r7, pc}
 800ea28:	0801843c 	.word	0x0801843c

0800ea2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea2c:	b598      	push	{r3, r4, r7, lr}
 800ea2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ea30:	f7ff ffe8 	bl	800ea04 <HAL_RCC_GetHCLKFreq>
 800ea34:	4604      	mov	r4, r0
 800ea36:	f7ff f9ef 	bl	800de18 <LL_RCC_GetAPB1Prescaler>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	0a1b      	lsrs	r3, r3, #8
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	4a04      	ldr	r2, [pc, #16]	; (800ea54 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ea44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea48:	f003 031f 	and.w	r3, r3, #31
 800ea4c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	bd98      	pop	{r3, r4, r7, pc}
 800ea54:	0801847c 	.word	0x0801847c

0800ea58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea58:	b598      	push	{r3, r4, r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ea5c:	f7ff ffd2 	bl	800ea04 <HAL_RCC_GetHCLKFreq>
 800ea60:	4604      	mov	r4, r0
 800ea62:	f7ff f9e5 	bl	800de30 <LL_RCC_GetAPB2Prescaler>
 800ea66:	4603      	mov	r3, r0
 800ea68:	0adb      	lsrs	r3, r3, #11
 800ea6a:	f003 0307 	and.w	r3, r3, #7
 800ea6e:	4a04      	ldr	r2, [pc, #16]	; (800ea80 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea74:	f003 031f 	and.w	r3, r3, #31
 800ea78:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	bd98      	pop	{r3, r4, r7, pc}
 800ea80:	0801847c 	.word	0x0801847c

0800ea84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2bb0      	cmp	r3, #176	; 0xb0
 800ea90:	d903      	bls.n	800ea9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ea92:	4b15      	ldr	r3, [pc, #84]	; (800eae8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ea94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	e007      	b.n	800eaaa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	091b      	lsrs	r3, r3, #4
 800ea9e:	f003 030f 	and.w	r3, r3, #15
 800eaa2:	4a11      	ldr	r2, [pc, #68]	; (800eae8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800eaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaa8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800eaaa:	f7ff f9a7 	bl	800ddfc <LL_RCC_GetAHB4Prescaler>
 800eaae:	4603      	mov	r3, r0
 800eab0:	091b      	lsrs	r3, r3, #4
 800eab2:	f003 030f 	and.w	r3, r3, #15
 800eab6:	4a0d      	ldr	r2, [pc, #52]	; (800eaec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800eab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	4a0a      	ldr	r2, [pc, #40]	; (800eaf0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800eac8:	fba2 2303 	umull	r2, r3, r2, r3
 800eacc:	0c9c      	lsrs	r4, r3, #18
 800eace:	f7fe fef5 	bl	800d8bc <HAL_PWREx_GetVoltageRange>
 800ead2:	4603      	mov	r3, r0
 800ead4:	4619      	mov	r1, r3
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 f80c 	bl	800eaf4 <RCC_SetFlashLatency>
 800eadc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd90      	pop	{r4, r7, pc}
 800eae6:	bf00      	nop
 800eae8:	0801849c 	.word	0x0801849c
 800eaec:	0801843c 	.word	0x0801843c
 800eaf0:	431bde83 	.word	0x431bde83

0800eaf4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800eaf4:	b590      	push	{r4, r7, lr}
 800eaf6:	b093      	sub	sp, #76	; 0x4c
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800eafe:	4b37      	ldr	r3, [pc, #220]	; (800ebdc <RCC_SetFlashLatency+0xe8>)
 800eb00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800eb04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800eb0a:	4a35      	ldr	r2, [pc, #212]	; (800ebe0 <RCC_SetFlashLatency+0xec>)
 800eb0c:	f107 031c 	add.w	r3, r7, #28
 800eb10:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800eb16:	4b33      	ldr	r3, [pc, #204]	; (800ebe4 <RCC_SetFlashLatency+0xf0>)
 800eb18:	f107 040c 	add.w	r4, r7, #12
 800eb1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800eb22:	2300      	movs	r3, #0
 800eb24:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb2c:	d11a      	bne.n	800eb64 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eb2e:	2300      	movs	r3, #0
 800eb30:	643b      	str	r3, [r7, #64]	; 0x40
 800eb32:	e013      	b.n	800eb5c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800eb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	3348      	adds	r3, #72	; 0x48
 800eb3a:	443b      	add	r3, r7
 800eb3c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d807      	bhi.n	800eb56 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	3348      	adds	r3, #72	; 0x48
 800eb4c:	443b      	add	r3, r7
 800eb4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb52:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800eb54:	e020      	b.n	800eb98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb58:	3301      	adds	r3, #1
 800eb5a:	643b      	str	r3, [r7, #64]	; 0x40
 800eb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d9e8      	bls.n	800eb34 <RCC_SetFlashLatency+0x40>
 800eb62:	e019      	b.n	800eb98 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800eb64:	2300      	movs	r3, #0
 800eb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb68:	e013      	b.n	800eb92 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	3348      	adds	r3, #72	; 0x48
 800eb70:	443b      	add	r3, r7
 800eb72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d807      	bhi.n	800eb8c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	3348      	adds	r3, #72	; 0x48
 800eb82:	443b      	add	r3, r7
 800eb84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb88:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800eb8a:	e005      	b.n	800eb98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800eb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb8e:	3301      	adds	r3, #1
 800eb90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d9e8      	bls.n	800eb6a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800eb98:	4b13      	ldr	r3, [pc, #76]	; (800ebe8 <RCC_SetFlashLatency+0xf4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f023 0207 	bic.w	r2, r3, #7
 800eba0:	4911      	ldr	r1, [pc, #68]	; (800ebe8 <RCC_SetFlashLatency+0xf4>)
 800eba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eba4:	4313      	orrs	r3, r2
 800eba6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eba8:	f7fd ff4e 	bl	800ca48 <HAL_GetTick>
 800ebac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ebae:	e008      	b.n	800ebc2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ebb0:	f7fd ff4a 	bl	800ca48 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d901      	bls.n	800ebc2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e007      	b.n	800ebd2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ebc2:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <RCC_SetFlashLatency+0xf4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d1ef      	bne.n	800ebb0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	374c      	adds	r7, #76	; 0x4c
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd90      	pop	{r4, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	08018404 	.word	0x08018404
 800ebe0:	08018414 	.word	0x08018414
 800ebe4:	08018420 	.word	0x08018420
 800ebe8:	58004000 	.word	0x58004000

0800ebec <LL_RCC_LSE_IsEnabled>:
{
 800ebec:	b480      	push	{r7}
 800ebee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ebf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d101      	bne.n	800ec04 <LL_RCC_LSE_IsEnabled+0x18>
 800ec00:	2301      	movs	r3, #1
 800ec02:	e000      	b.n	800ec06 <LL_RCC_LSE_IsEnabled+0x1a>
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <LL_RCC_LSE_IsReady>:
{
 800ec10:	b480      	push	{r7}
 800ec12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ec14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec1c:	f003 0302 	and.w	r3, r3, #2
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d101      	bne.n	800ec28 <LL_RCC_LSE_IsReady+0x18>
 800ec24:	2301      	movs	r3, #1
 800ec26:	e000      	b.n	800ec2a <LL_RCC_LSE_IsReady+0x1a>
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <LL_RCC_SetRFWKPClockSource>:
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ec3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ec48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <LL_RCC_SetSMPSClockSource>:
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ec68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	f023 0203 	bic.w	r2, r3, #3
 800ec72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <LL_RCC_SetSMPSPrescaler>:
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ec90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ec9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <LL_RCC_SetUSARTClockSource>:
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ecb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecc0:	f023 0203 	bic.w	r2, r3, #3
 800ecc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <LL_RCC_SetLPUARTClockSource>:
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ece4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ece8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ecf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <LL_RCC_SetI2CClockSource>:
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ed10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	091b      	lsrs	r3, r3, #4
 800ed1c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ed20:	43db      	mvns	r3, r3
 800ed22:	401a      	ands	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	011b      	lsls	r3, r3, #4
 800ed28:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ed2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed30:	4313      	orrs	r3, r2
 800ed32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed36:	bf00      	nop
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <LL_RCC_SetLPTIMClockSource>:
{
 800ed42:	b480      	push	{r7}
 800ed44:	b083      	sub	sp, #12
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ed4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	0c1b      	lsrs	r3, r3, #16
 800ed56:	041b      	lsls	r3, r3, #16
 800ed58:	43db      	mvns	r3, r3
 800ed5a:	401a      	ands	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	041b      	lsls	r3, r3, #16
 800ed60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed64:	4313      	orrs	r3, r2
 800ed66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed6a:	bf00      	nop
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <LL_RCC_SetSAIClockSource>:
{
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800ed7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ed8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr

0800eda2 <LL_RCC_SetRNGClockSource>:
{
 800eda2:	b480      	push	{r7}
 800eda4:	b083      	sub	sp, #12
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800edaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800edb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800edc2:	bf00      	nop
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <LL_RCC_SetCLK48ClockSource>:
{
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800edd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ede2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4313      	orrs	r3, r2
 800edea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <LL_RCC_SetUSBClockSource>:
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff ffe3 	bl	800edce <LL_RCC_SetCLK48ClockSource>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <LL_RCC_SetADCClockSource>:
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ee18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ee24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <LL_RCC_SetRTCClockSource>:
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ee44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <LL_RCC_GetRTCClockSource>:
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ee6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee74:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <LL_RCC_ForceBackupDomainReset>:
{
 800ee82:	b480      	push	{r7}
 800ee84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ee86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ee92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ee9a:	bf00      	nop
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800eea4:	b480      	push	{r7}
 800eea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800eea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eeb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eeb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800eebc:	bf00      	nop
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <LL_RCC_PLLSAI1_Enable>:
{
 800eec6:	b480      	push	{r7}
 800eec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800eeca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eed8:	6013      	str	r3, [r2, #0]
}
 800eeda:	bf00      	nop
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <LL_RCC_PLLSAI1_Disable>:
{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800eee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eef6:	6013      	str	r3, [r2, #0]
}
 800eef8:	bf00      	nop
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <LL_RCC_PLLSAI1_IsReady>:
{
 800ef02:	b480      	push	{r7}
 800ef04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ef06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef14:	d101      	bne.n	800ef1a <LL_RCC_PLLSAI1_IsReady+0x18>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e000      	b.n	800ef1c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b088      	sub	sp, #32
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ef2e:	2300      	movs	r3, #0
 800ef30:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800ef32:	2300      	movs	r3, #0
 800ef34:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d034      	beq.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef4a:	d021      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ef4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef50:	d81b      	bhi.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef56:	d01d      	beq.n	800ef94 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ef58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef5c:	d815      	bhi.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00b      	beq.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ef62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef66:	d110      	bne.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800ef68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef76:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800ef78:	e00d      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 f947 	bl	800f212 <RCCEx_PLLSAI1_ConfigNP>
 800ef84:	4603      	mov	r3, r0
 800ef86:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ef88:	e005      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	77fb      	strb	r3, [r7, #31]
        break;
 800ef8e:	e002      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ef90:	bf00      	nop
 800ef92:	e000      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ef94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef96:	7ffb      	ldrb	r3, [r7, #31]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d105      	bne.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff fee8 	bl	800ed76 <LL_RCC_SetSAIClockSource>
 800efa6:	e001      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efa8:	7ffb      	ldrb	r3, [r7, #31]
 800efaa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d046      	beq.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800efb8:	f7ff ff56 	bl	800ee68 <LL_RCC_GetRTCClockSource>
 800efbc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc2:	69ba      	ldr	r2, [r7, #24]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d03c      	beq.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800efc8:	f7fe fc68 	bl	800d89c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d105      	bne.n	800efde <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff ff30 	bl	800ee3c <LL_RCC_SetRTCClockSource>
 800efdc:	e02e      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800efde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efe6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800efe8:	f7ff ff4b 	bl	800ee82 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800efec:	f7ff ff5a 	bl	800eea4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800effa:	4313      	orrs	r3, r2
 800effc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800effe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f008:	f7ff fdf0 	bl	800ebec <LL_RCC_LSE_IsEnabled>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d114      	bne.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f012:	f7fd fd19 	bl	800ca48 <HAL_GetTick>
 800f016:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f018:	e00b      	b.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f01a:	f7fd fd15 	bl	800ca48 <HAL_GetTick>
 800f01e:	4602      	mov	r2, r0
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	f241 3288 	movw	r2, #5000	; 0x1388
 800f028:	4293      	cmp	r3, r2
 800f02a:	d902      	bls.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f02c:	2303      	movs	r3, #3
 800f02e:	77fb      	strb	r3, [r7, #31]
              break;
 800f030:	e004      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f032:	f7ff fded 	bl	800ec10 <LL_RCC_LSE_IsReady>
 800f036:	4603      	mov	r3, r0
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d1ee      	bne.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f03c:	7ffb      	ldrb	r3, [r7, #31]
 800f03e:	77bb      	strb	r3, [r7, #30]
 800f040:	e001      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f042:	7ffb      	ldrb	r3, [r7, #31]
 800f044:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f003 0301 	and.w	r3, r3, #1
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d004      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fe2a 	bl	800ecb0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f003 0302 	and.w	r3, r3, #2
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	69db      	ldr	r3, [r3, #28]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7ff fe35 	bl	800ecdc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 0310 	and.w	r3, r3, #16
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d004      	beq.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f082:	4618      	mov	r0, r3
 800f084:	f7ff fe5d 	bl	800ed42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f003 0320 	and.w	r3, r3, #32
 800f090:	2b00      	cmp	r3, #0
 800f092:	d004      	beq.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff fe52 	bl	800ed42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f003 0304 	and.w	r3, r3, #4
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d004      	beq.n	800f0b4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7ff fe2a 	bl	800ed08 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f003 0308 	and.w	r3, r3, #8
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff fe1f 	bl	800ed08 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d022      	beq.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fe8d 	bl	800edfa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0e8:	d107      	bne.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f0f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f0f8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f102:	d10b      	bne.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	4618      	mov	r0, r3
 800f10a:	f000 f8dd 	bl	800f2c8 <RCCEx_PLLSAI1_ConfigNQ>
 800f10e:	4603      	mov	r3, r0
 800f110:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f112:	7ffb      	ldrb	r3, [r7, #31]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f118:	7ffb      	ldrb	r3, [r7, #31]
 800f11a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f124:	2b00      	cmp	r3, #0
 800f126:	d02b      	beq.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f130:	d008      	beq.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f13a:	d003      	beq.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f140:	2b00      	cmp	r3, #0
 800f142:	d105      	bne.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fe2a 	bl	800eda2 <LL_RCC_SetRNGClockSource>
 800f14e:	e00a      	b.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f158:	60fb      	str	r3, [r7, #12]
 800f15a:	2000      	movs	r0, #0
 800f15c:	f7ff fe21 	bl	800eda2 <LL_RCC_SetRNGClockSource>
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f7ff fe34 	bl	800edce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f16a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800f16e:	d107      	bne.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f17a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f17e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d022      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fe3d 	bl	800ee10 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f19e:	d107      	bne.n	800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f1a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f1aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1ae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1b8:	d10b      	bne.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 f8dd 	bl	800f37e <RCCEx_PLLSAI1_ConfigNR>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f1c8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f1ce:	7ffb      	ldrb	r3, [r7, #31]
 800f1d0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff fd26 	bl	800ec34 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d009      	beq.n	800f208 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff fd45 	bl	800ec88 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fd2c 	bl	800ec60 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f208:	7fbb      	ldrb	r3, [r7, #30]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f21a:	2300      	movs	r3, #0
 800f21c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f21e:	f7ff fe61 	bl	800eee4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f222:	f7fd fc11 	bl	800ca48 <HAL_GetTick>
 800f226:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f228:	e009      	b.n	800f23e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f22a:	f7fd fc0d 	bl	800ca48 <HAL_GetTick>
 800f22e:	4602      	mov	r2, r0
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	2b02      	cmp	r3, #2
 800f236:	d902      	bls.n	800f23e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f238:	2303      	movs	r3, #3
 800f23a:	73fb      	strb	r3, [r7, #15]
      break;
 800f23c:	e004      	b.n	800f248 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f23e:	f7ff fe60 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1f0      	bne.n	800f22a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f248:	7bfb      	ldrb	r3, [r7, #15]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d137      	bne.n	800f2be <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f24e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f262:	4313      	orrs	r3, r2
 800f264:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f278:	4313      	orrs	r3, r2
 800f27a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f27c:	f7ff fe23 	bl	800eec6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f280:	f7fd fbe2 	bl	800ca48 <HAL_GetTick>
 800f284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f286:	e009      	b.n	800f29c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f288:	f7fd fbde 	bl	800ca48 <HAL_GetTick>
 800f28c:	4602      	mov	r2, r0
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	2b02      	cmp	r3, #2
 800f294:	d902      	bls.n	800f29c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f296:	2303      	movs	r3, #3
 800f298:	73fb      	strb	r3, [r7, #15]
        break;
 800f29a:	e004      	b.n	800f2a6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f29c:	f7ff fe31 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d1f0      	bne.n	800f288 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d108      	bne.n	800f2be <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f2ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2b0:	691a      	ldr	r2, [r3, #16]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f2d4:	f7ff fe06 	bl	800eee4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f2d8:	f7fd fbb6 	bl	800ca48 <HAL_GetTick>
 800f2dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f2de:	e009      	b.n	800f2f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f2e0:	f7fd fbb2 	bl	800ca48 <HAL_GetTick>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d902      	bls.n	800f2f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f2f2:	e004      	b.n	800f2fe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f2f4:	f7ff fe05 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1f0      	bne.n	800f2e0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f2fe:	7bfb      	ldrb	r3, [r7, #15]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d137      	bne.n	800f374 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f318:	4313      	orrs	r3, r2
 800f31a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f32e:	4313      	orrs	r3, r2
 800f330:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f332:	f7ff fdc8 	bl	800eec6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f336:	f7fd fb87 	bl	800ca48 <HAL_GetTick>
 800f33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f33c:	e009      	b.n	800f352 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f33e:	f7fd fb83 	bl	800ca48 <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d902      	bls.n	800f352 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800f34c:	2303      	movs	r3, #3
 800f34e:	73fb      	strb	r3, [r7, #15]
        break;
 800f350:	e004      	b.n	800f35c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f352:	f7ff fdd6 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f356:	4603      	mov	r3, r0
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d1f0      	bne.n	800f33e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d108      	bne.n	800f374 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f366:	691a      	ldr	r2, [r3, #16]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f370:	4313      	orrs	r3, r2
 800f372:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f374:	7bfb      	ldrb	r3, [r7, #15]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f38a:	f7ff fdab 	bl	800eee4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f38e:	f7fd fb5b 	bl	800ca48 <HAL_GetTick>
 800f392:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f394:	e009      	b.n	800f3aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f396:	f7fd fb57 	bl	800ca48 <HAL_GetTick>
 800f39a:	4602      	mov	r2, r0
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d902      	bls.n	800f3aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3a8:	e004      	b.n	800f3b4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f3aa:	f7ff fdaa 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1f0      	bne.n	800f396 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d137      	bne.n	800f42a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f3ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	021b      	lsls	r3, r3, #8
 800f3ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800f3d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f3e8:	f7ff fd6d 	bl	800eec6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3ec:	f7fd fb2c 	bl	800ca48 <HAL_GetTick>
 800f3f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f3f2:	e009      	b.n	800f408 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f3f4:	f7fd fb28 	bl	800ca48 <HAL_GetTick>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d902      	bls.n	800f408 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800f402:	2303      	movs	r3, #3
 800f404:	73fb      	strb	r3, [r7, #15]
        break;
 800f406:	e004      	b.n	800f412 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f408:	f7ff fd7b 	bl	800ef02 <LL_RCC_PLLSAI1_IsReady>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d1f0      	bne.n	800f3f4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d108      	bne.n	800f42a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f41c:	691a      	ldr	r2, [r3, #16]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f426:	4313      	orrs	r3, r2
 800f428:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3710      	adds	r7, #16
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f442:	2301      	movs	r3, #1
 800f444:	e09f      	b.n	800f586 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f7fb f86e 	bl	800a53c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2202      	movs	r2, #2
 800f464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f468:	4b49      	ldr	r3, [pc, #292]	; (800f590 <HAL_RTC_Init+0x15c>)
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	f003 0310 	and.w	r3, r3, #16
 800f470:	2b10      	cmp	r3, #16
 800f472:	d07e      	beq.n	800f572 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	22ca      	movs	r2, #202	; 0xca
 800f47a:	625a      	str	r2, [r3, #36]	; 0x24
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2253      	movs	r2, #83	; 0x53
 800f482:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fac6 	bl	800fa16 <RTC_EnterInitMode>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00a      	beq.n	800f4a6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	22ff      	movs	r2, #255	; 0xff
 800f496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2204      	movs	r2, #4
 800f49c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	73fb      	strb	r3, [r7, #15]
 800f4a4:	e067      	b.n	800f576 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	6812      	ldr	r2, [r2, #0]
 800f4b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4b8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6899      	ldr	r1, [r3, #8]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	685a      	ldr	r2, [r3, #4]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	431a      	orrs	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	431a      	orrs	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	430a      	orrs	r2, r1
 800f4d6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	68d2      	ldr	r2, [r2, #12]
 800f4e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6919      	ldr	r1, [r3, #16]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	041a      	lsls	r2, r3, #16
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	430a      	orrs	r2, r1
 800f4f4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68da      	ldr	r2, [r3, #12]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f504:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f022 0203 	bic.w	r2, r2, #3
 800f514:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	69da      	ldr	r2, [r3, #28]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	695b      	ldr	r3, [r3, #20]
 800f524:	431a      	orrs	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	430a      	orrs	r2, r1
 800f52c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	f003 0320 	and.w	r3, r3, #32
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d113      	bne.n	800f564 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fa44 	bl	800f9ca <HAL_RTC_WaitForSynchro>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00d      	beq.n	800f564 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	22ff      	movs	r2, #255	; 0xff
 800f54e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2204      	movs	r2, #4
 800f554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800f560:	2301      	movs	r3, #1
 800f562:	e010      	b.n	800f586 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	22ff      	movs	r2, #255	; 0xff
 800f56a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	73fb      	strb	r3, [r7, #15]
 800f570:	e001      	b.n	800f576 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d103      	bne.n	800f584 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800f584:	7bfb      	ldrb	r3, [r7, #15]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	40002800 	.word	0x40002800

0800f594 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f594:	b590      	push	{r4, r7, lr}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d101      	bne.n	800f5ae <HAL_RTC_SetTime+0x1a>
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	e0b2      	b.n	800f714 <HAL_RTC_SetTime+0x180>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d126      	bne.n	800f612 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d102      	bne.n	800f5d8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 fa44 	bl	800fa6a <RTC_ByteToBcd2>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	785b      	ldrb	r3, [r3, #1]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fa3d 	bl	800fa6a <RTC_ByteToBcd2>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f5f4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	789b      	ldrb	r3, [r3, #2]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 fa35 	bl	800fa6a <RTC_ByteToBcd2>
 800f600:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f602:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	78db      	ldrb	r3, [r3, #3]
 800f60a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f60c:	4313      	orrs	r3, r2
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	e018      	b.n	800f644 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d102      	bne.n	800f626 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	2200      	movs	r2, #0
 800f624:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	785b      	ldrb	r3, [r3, #1]
 800f630:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f632:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f638:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	78db      	ldrb	r3, [r3, #3]
 800f63e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f640:	4313      	orrs	r3, r2
 800f642:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	22ca      	movs	r2, #202	; 0xca
 800f64a:	625a      	str	r2, [r3, #36]	; 0x24
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2253      	movs	r2, #83	; 0x53
 800f652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 f9de 	bl	800fa16 <RTC_EnterInitMode>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00d      	beq.n	800f67c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	22ff      	movs	r2, #255	; 0xff
 800f666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2204      	movs	r2, #4
 800f66c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800f678:	2301      	movs	r3, #1
 800f67a:	e04b      	b.n	800f714 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f686:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f68a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	689a      	ldr	r2, [r3, #8]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f69a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6899      	ldr	r1, [r3, #8]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	68da      	ldr	r2, [r3, #12]
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	691b      	ldr	r3, [r3, #16]
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	430a      	orrs	r2, r1
 800f6b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68da      	ldr	r2, [r3, #12]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f6c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	f003 0320 	and.w	r3, r3, #32
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d113      	bne.n	800f6fa <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f000 f979 	bl	800f9ca <HAL_RTC_WaitForSynchro>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00d      	beq.n	800f6fa <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	22ff      	movs	r2, #255	; 0xff
 800f6e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2204      	movs	r2, #4
 800f6ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e00c      	b.n	800f714 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	22ff      	movs	r2, #255	; 0xff
 800f700:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800f712:	2300      	movs	r3, #0
  }
}
 800f714:	4618      	mov	r0, r3
 800f716:	371c      	adds	r7, #28
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd90      	pop	{r4, r7, pc}

0800f71c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f74a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f74e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	0c1b      	lsrs	r3, r3, #16
 800f754:	b2db      	uxtb	r3, r3
 800f756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f75a:	b2da      	uxtb	r2, r3
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	0a1b      	lsrs	r3, r3, #8
 800f764:	b2db      	uxtb	r3, r3
 800f766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f76a:	b2da      	uxtb	r2, r3
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	b2db      	uxtb	r3, r3
 800f774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f778:	b2da      	uxtb	r2, r3
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	0c1b      	lsrs	r3, r3, #16
 800f782:	b2db      	uxtb	r3, r3
 800f784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d11a      	bne.n	800f7ca <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 f986 	bl	800faaa <RTC_Bcd2ToByte>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	785b      	ldrb	r3, [r3, #1]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 f97d 	bl	800faaa <RTC_Bcd2ToByte>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	789b      	ldrb	r3, [r3, #2]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 f974 	bl	800faaa <RTC_Bcd2ToByte>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3718      	adds	r7, #24
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f7d4:	b590      	push	{r4, r7, lr}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d101      	bne.n	800f7ee <HAL_RTC_SetDate+0x1a>
 800f7ea:	2302      	movs	r3, #2
 800f7ec:	e09c      	b.n	800f928 <HAL_RTC_SetDate+0x154>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d10e      	bne.n	800f822 <HAL_RTC_SetDate+0x4e>
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	785b      	ldrb	r3, [r3, #1]
 800f808:	f003 0310 	and.w	r3, r3, #16
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d008      	beq.n	800f822 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	785b      	ldrb	r3, [r3, #1]
 800f814:	f023 0310 	bic.w	r3, r3, #16
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	330a      	adds	r3, #10
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d11c      	bne.n	800f862 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	78db      	ldrb	r3, [r3, #3]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f000 f91c 	bl	800fa6a <RTC_ByteToBcd2>
 800f832:	4603      	mov	r3, r0
 800f834:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	785b      	ldrb	r3, [r3, #1]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 f915 	bl	800fa6a <RTC_ByteToBcd2>
 800f840:	4603      	mov	r3, r0
 800f842:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f844:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	789b      	ldrb	r3, [r3, #2]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 f90d 	bl	800fa6a <RTC_ByteToBcd2>
 800f850:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f852:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f85c:	4313      	orrs	r3, r2
 800f85e:	617b      	str	r3, [r7, #20]
 800f860:	e00e      	b.n	800f880 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	78db      	ldrb	r3, [r3, #3]
 800f866:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	785b      	ldrb	r3, [r3, #1]
 800f86c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f86e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f874:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f87c:	4313      	orrs	r3, r2
 800f87e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	22ca      	movs	r2, #202	; 0xca
 800f886:	625a      	str	r2, [r3, #36]	; 0x24
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2253      	movs	r2, #83	; 0x53
 800f88e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 f8c0 	bl	800fa16 <RTC_EnterInitMode>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00d      	beq.n	800f8b8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	22ff      	movs	r2, #255	; 0xff
 800f8a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e037      	b.n	800f928 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f8c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f8c6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f8d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f003 0320 	and.w	r3, r3, #32
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d113      	bne.n	800f90e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f000 f86f 	bl	800f9ca <HAL_RTC_WaitForSynchro>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00d      	beq.n	800f90e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	22ff      	movs	r2, #255	; 0xff
 800f8f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2204      	movs	r2, #4
 800f8fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e00c      	b.n	800f928 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	22ff      	movs	r2, #255	; 0xff
 800f914:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800f926:	2300      	movs	r3, #0
  }
}
 800f928:	4618      	mov	r0, r3
 800f92a:	371c      	adds	r7, #28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd90      	pop	{r4, r7, pc}

0800f930 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f946:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f94a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	0c1b      	lsrs	r3, r3, #16
 800f950:	b2da      	uxtb	r2, r3
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	0a1b      	lsrs	r3, r3, #8
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	f003 031f 	and.w	r3, r3, #31
 800f960:	b2da      	uxtb	r2, r3
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	0b5b      	lsrs	r3, r3, #13
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	f003 0307 	and.w	r3, r3, #7
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d11a      	bne.n	800f9c0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	78db      	ldrb	r3, [r3, #3]
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 f88b 	bl	800faaa <RTC_Bcd2ToByte>
 800f994:	4603      	mov	r3, r0
 800f996:	461a      	mov	r2, r3
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	785b      	ldrb	r3, [r3, #1]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 f882 	bl	800faaa <RTC_Bcd2ToByte>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	789b      	ldrb	r3, [r3, #2]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 f879 	bl	800faaa <RTC_Bcd2ToByte>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3718      	adds	r7, #24
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b084      	sub	sp, #16
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f9e0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f9e2:	f7fd f831 	bl	800ca48 <HAL_GetTick>
 800f9e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f9e8:	e009      	b.n	800f9fe <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f9ea:	f7fd f82d 	bl	800ca48 <HAL_GetTick>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9f8:	d901      	bls.n	800f9fe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800f9fa:	2303      	movs	r3, #3
 800f9fc:	e007      	b.n	800fa0e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	f003 0320 	and.w	r3, r3, #32
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d0ee      	beq.n	800f9ea <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d119      	bne.n	800fa60 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f04f 32ff 	mov.w	r2, #4294967295
 800fa34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800fa36:	f7fd f807 	bl	800ca48 <HAL_GetTick>
 800fa3a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa3c:	e009      	b.n	800fa52 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fa3e:	f7fd f803 	bl	800ca48 <HAL_GetTick>
 800fa42:	4602      	mov	r2, r0
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	1ad3      	subs	r3, r2, r3
 800fa48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa4c:	d901      	bls.n	800fa52 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800fa4e:	2303      	movs	r3, #3
 800fa50:	e007      	b.n	800fa62 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d0ee      	beq.n	800fa3e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	4603      	mov	r3, r0
 800fa72:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fa74:	2300      	movs	r3, #0
 800fa76:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800fa78:	79fb      	ldrb	r3, [r7, #7]
 800fa7a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800fa7c:	e005      	b.n	800fa8a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3301      	adds	r3, #1
 800fa82:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800fa84:	7afb      	ldrb	r3, [r7, #11]
 800fa86:	3b0a      	subs	r3, #10
 800fa88:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800fa8a:	7afb      	ldrb	r3, [r7, #11]
 800fa8c:	2b09      	cmp	r3, #9
 800fa8e:	d8f6      	bhi.n	800fa7e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	b2da      	uxtb	r2, r3
 800fa98:	7afb      	ldrb	r3, [r7, #11]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	b2db      	uxtb	r3, r3
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800faaa:	b480      	push	{r7}
 800faac:	b085      	sub	sp, #20
 800faae:	af00      	add	r7, sp, #0
 800fab0:	4603      	mov	r3, r0
 800fab2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fab4:	79fb      	ldrb	r3, [r7, #7]
 800fab6:	091b      	lsrs	r3, r3, #4
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	461a      	mov	r2, r3
 800fabc:	4613      	mov	r3, r2
 800fabe:	009b      	lsls	r3, r3, #2
 800fac0:	4413      	add	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	f003 030f 	and.w	r3, r3, #15
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	4413      	add	r3, r2
 800fad4:	b2db      	uxtb	r3, r3
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3714      	adds	r7, #20
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b087      	sub	sp, #28
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	60b9      	str	r1, [r7, #8]
 800faec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3350      	adds	r3, #80	; 0x50
 800faf4:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	697a      	ldr	r2, [r7, #20]
 800fafc:	4413      	add	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
}
 800fb06:	bf00      	nop
 800fb08:	371c      	adds	r7, #28
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b084      	sub	sp, #16
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	e095      	b.n	800fc50 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d108      	bne.n	800fb3e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb34:	d009      	beq.n	800fb4a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	61da      	str	r2, [r3, #28]
 800fb3c:	e005      	b.n	800fb4a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f7fa fd15 	bl	800a594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2202      	movs	r2, #2
 800fb6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fb8a:	d902      	bls.n	800fb92 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	60fb      	str	r3, [r7, #12]
 800fb90:	e002      	b.n	800fb98 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fb92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800fba0:	d007      	beq.n	800fbb2 <HAL_SPI_Init+0xa0>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fbaa:	d002      	beq.n	800fbb2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fbc2:	431a      	orrs	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	691b      	ldr	r3, [r3, #16]
 800fbc8:	f003 0302 	and.w	r3, r3, #2
 800fbcc:	431a      	orrs	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	695b      	ldr	r3, [r3, #20]
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	431a      	orrs	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	699b      	ldr	r3, [r3, #24]
 800fbdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fbe0:	431a      	orrs	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	69db      	ldr	r3, [r3, #28]
 800fbe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbea:	431a      	orrs	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a1b      	ldr	r3, [r3, #32]
 800fbf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbf4:	ea42 0103 	orr.w	r1, r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	430a      	orrs	r2, r1
 800fc06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	699b      	ldr	r3, [r3, #24]
 800fc0c:	0c1b      	lsrs	r3, r3, #16
 800fc0e:	f003 0204 	and.w	r2, r3, #4
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	f003 0310 	and.w	r3, r3, #16
 800fc1a:	431a      	orrs	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc20:	f003 0308 	and.w	r3, r3, #8
 800fc24:	431a      	orrs	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fc2e:	ea42 0103 	orr.w	r1, r2, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	430a      	orrs	r2, r1
 800fc3e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	; 0x28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fc66:	2301      	movs	r3, #1
 800fc68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_SPI_TransmitReceive+0x26>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e1fb      	b.n	8010076 <HAL_SPI_TransmitReceive+0x41e>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc86:	f7fc fedf 	bl	800ca48 <HAL_GetTick>
 800fc8a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800fc9a:	887b      	ldrh	r3, [r7, #2]
 800fc9c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800fc9e:	887b      	ldrh	r3, [r7, #2]
 800fca0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fca2:	7efb      	ldrb	r3, [r7, #27]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d00e      	beq.n	800fcc6 <HAL_SPI_TransmitReceive+0x6e>
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcae:	d106      	bne.n	800fcbe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <HAL_SPI_TransmitReceive+0x66>
 800fcb8:	7efb      	ldrb	r3, [r7, #27]
 800fcba:	2b04      	cmp	r3, #4
 800fcbc:	d003      	beq.n	800fcc6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800fcc4:	e1cd      	b.n	8010062 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d005      	beq.n	800fcd8 <HAL_SPI_TransmitReceive+0x80>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <HAL_SPI_TransmitReceive+0x80>
 800fcd2:	887b      	ldrh	r3, [r7, #2]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800fcde:	e1c0      	b.n	8010062 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	d003      	beq.n	800fcf4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2205      	movs	r2, #5
 800fcf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	887a      	ldrh	r2, [r7, #2]
 800fd04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	887a      	ldrh	r2, [r7, #2]
 800fd0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	887a      	ldrh	r2, [r7, #2]
 800fd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	887a      	ldrh	r2, [r7, #2]
 800fd20:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fd36:	d802      	bhi.n	800fd3e <HAL_SPI_TransmitReceive+0xe6>
 800fd38:	8a3b      	ldrh	r3, [r7, #16]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d908      	bls.n	800fd50 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	685a      	ldr	r2, [r3, #4]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fd4c:	605a      	str	r2, [r3, #4]
 800fd4e:	e007      	b.n	800fd60 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd6a:	2b40      	cmp	r3, #64	; 0x40
 800fd6c:	d007      	beq.n	800fd7e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fd86:	d97c      	bls.n	800fe82 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <HAL_SPI_TransmitReceive+0x13e>
 800fd90:	8a7b      	ldrh	r3, [r7, #18]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d169      	bne.n	800fe6a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd9a:	881a      	ldrh	r2, [r3, #0]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda6:	1c9a      	adds	r2, r3, #2
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fdba:	e056      	b.n	800fe6a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f003 0302 	and.w	r3, r3, #2
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d11b      	bne.n	800fe02 <HAL_SPI_TransmitReceive+0x1aa>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d016      	beq.n	800fe02 <HAL_SPI_TransmitReceive+0x1aa>
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d113      	bne.n	800fe02 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdde:	881a      	ldrh	r2, [r3, #0]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdea:	1c9a      	adds	r2, r3, #2
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d11c      	bne.n	800fe4a <HAL_SPI_TransmitReceive+0x1f2>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d016      	beq.n	800fe4a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68da      	ldr	r2, [r3, #12]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe26:	b292      	uxth	r2, r2
 800fe28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2e:	1c9a      	adds	r2, r3, #2
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fe46:	2301      	movs	r3, #1
 800fe48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fe4a:	f7fc fdfd 	bl	800ca48 <HAL_GetTick>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d807      	bhi.n	800fe6a <HAL_SPI_TransmitReceive+0x212>
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe60:	d003      	beq.n	800fe6a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800fe68:	e0fb      	b.n	8010062 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1a3      	bne.n	800fdbc <HAL_SPI_TransmitReceive+0x164>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d19d      	bne.n	800fdbc <HAL_SPI_TransmitReceive+0x164>
 800fe80:	e0df      	b.n	8010042 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d003      	beq.n	800fe92 <HAL_SPI_TransmitReceive+0x23a>
 800fe8a:	8a7b      	ldrh	r3, [r7, #18]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	f040 80cb 	bne.w	8010028 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d912      	bls.n	800fec2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea0:	881a      	ldrh	r2, [r3, #0]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feac:	1c9a      	adds	r2, r3, #2
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	3b02      	subs	r3, #2
 800feba:	b29a      	uxth	r2, r3
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fec0:	e0b2      	b.n	8010028 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	330c      	adds	r3, #12
 800fecc:	7812      	ldrb	r2, [r2, #0]
 800fece:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed4:	1c5a      	adds	r2, r3, #1
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fede:	b29b      	uxth	r3, r3
 800fee0:	3b01      	subs	r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fee8:	e09e      	b.n	8010028 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	f003 0302 	and.w	r3, r3, #2
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d134      	bne.n	800ff62 <HAL_SPI_TransmitReceive+0x30a>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d02f      	beq.n	800ff62 <HAL_SPI_TransmitReceive+0x30a>
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d12c      	bne.n	800ff62 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d912      	bls.n	800ff38 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff16:	881a      	ldrh	r2, [r3, #0]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff22:	1c9a      	adds	r2, r3, #2
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	3b02      	subs	r3, #2
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ff36:	e012      	b.n	800ff5e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	330c      	adds	r3, #12
 800ff42:	7812      	ldrb	r2, [r2, #0]
 800ff44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	3b01      	subs	r3, #1
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d148      	bne.n	8010002 <HAL_SPI_TransmitReceive+0x3aa>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d042      	beq.n	8010002 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d923      	bls.n	800ffd0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68da      	ldr	r2, [r3, #12]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff92:	b292      	uxth	r2, r2
 800ff94:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9a:	1c9a      	adds	r2, r3, #2
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	3b02      	subs	r3, #2
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d81f      	bhi.n	800fffe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	685a      	ldr	r2, [r3, #4]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ffcc:	605a      	str	r2, [r3, #4]
 800ffce:	e016      	b.n	800fffe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f103 020c 	add.w	r2, r3, #12
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffdc:	7812      	ldrb	r2, [r2, #0]
 800ffde:	b2d2      	uxtb	r2, r2
 800ffe0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	3b01      	subs	r3, #1
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fffe:	2301      	movs	r3, #1
 8010000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010002:	f7fc fd21 	bl	800ca48 <HAL_GetTick>
 8010006:	4602      	mov	r2, r0
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801000e:	429a      	cmp	r2, r3
 8010010:	d803      	bhi.n	801001a <HAL_SPI_TransmitReceive+0x3c2>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d102      	bne.n	8010020 <HAL_SPI_TransmitReceive+0x3c8>
 801001a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001c:	2b00      	cmp	r3, #0
 801001e:	d103      	bne.n	8010028 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010020:	2303      	movs	r3, #3
 8010022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010026:	e01c      	b.n	8010062 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801002c:	b29b      	uxth	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	f47f af5b 	bne.w	800feea <HAL_SPI_TransmitReceive+0x292>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801003a:	b29b      	uxth	r3, r3
 801003c:	2b00      	cmp	r3, #0
 801003e:	f47f af54 	bne.w	800feea <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010042:	69fa      	ldr	r2, [r7, #28]
 8010044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010046:	68f8      	ldr	r0, [r7, #12]
 8010048:	f000 f938 	bl	80102bc <SPI_EndRxTxTransaction>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010052:	2301      	movs	r3, #1
 8010054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2220      	movs	r2, #32
 801005c:	661a      	str	r2, [r3, #96]	; 0x60
 801005e:	e000      	b.n	8010062 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8010060:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2201      	movs	r2, #1
 8010066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010076:	4618      	mov	r0, r3
 8010078:	3728      	adds	r7, #40	; 0x28
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
	...

08010080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	4613      	mov	r3, r2
 801008e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010090:	f7fc fcda 	bl	800ca48 <HAL_GetTick>
 8010094:	4602      	mov	r2, r0
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	4413      	add	r3, r2
 801009e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80100a0:	f7fc fcd2 	bl	800ca48 <HAL_GetTick>
 80100a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80100a6:	4b39      	ldr	r3, [pc, #228]	; (801018c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	015b      	lsls	r3, r3, #5
 80100ac:	0d1b      	lsrs	r3, r3, #20
 80100ae:	69fa      	ldr	r2, [r7, #28]
 80100b0:	fb02 f303 	mul.w	r3, r2, r3
 80100b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80100b6:	e054      	b.n	8010162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100be:	d050      	beq.n	8010162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80100c0:	f7fc fcc2 	bl	800ca48 <HAL_GetTick>
 80100c4:	4602      	mov	r2, r0
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	69fa      	ldr	r2, [r7, #28]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d902      	bls.n	80100d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d13d      	bne.n	8010152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80100e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80100ee:	d111      	bne.n	8010114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100f8:	d004      	beq.n	8010104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010102:	d107      	bne.n	8010114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801011c:	d10f      	bne.n	801013e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801013c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2201      	movs	r2, #1
 8010142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e017      	b.n	8010182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010158:	2300      	movs	r3, #0
 801015a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	3b01      	subs	r3, #1
 8010160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	689a      	ldr	r2, [r3, #8]
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	4013      	ands	r3, r2
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	429a      	cmp	r2, r3
 8010170:	bf0c      	ite	eq
 8010172:	2301      	moveq	r3, #1
 8010174:	2300      	movne	r3, #0
 8010176:	b2db      	uxtb	r3, r3
 8010178:	461a      	mov	r2, r3
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	429a      	cmp	r2, r3
 801017e:	d19b      	bne.n	80100b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3720      	adds	r7, #32
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	20000014 	.word	0x20000014

08010190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b08a      	sub	sp, #40	; 0x28
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
 801019c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80101a2:	f7fc fc51 	bl	800ca48 <HAL_GetTick>
 80101a6:	4602      	mov	r2, r0
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101aa:	1a9b      	subs	r3, r3, r2
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	4413      	add	r3, r2
 80101b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80101b2:	f7fc fc49 	bl	800ca48 <HAL_GetTick>
 80101b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	330c      	adds	r3, #12
 80101be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80101c0:	4b3d      	ldr	r3, [pc, #244]	; (80102b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	4613      	mov	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	4413      	add	r3, r2
 80101ca:	00da      	lsls	r2, r3, #3
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	0d1b      	lsrs	r3, r3, #20
 80101d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d2:	fb02 f303 	mul.w	r3, r2, r3
 80101d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80101d8:	e060      	b.n	801029c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80101e0:	d107      	bne.n	80101f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80101f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f8:	d050      	beq.n	801029c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80101fa:	f7fc fc25 	bl	800ca48 <HAL_GetTick>
 80101fe:	4602      	mov	r2, r0
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010206:	429a      	cmp	r2, r3
 8010208:	d902      	bls.n	8010210 <SPI_WaitFifoStateUntilTimeout+0x80>
 801020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020c:	2b00      	cmp	r3, #0
 801020e:	d13d      	bne.n	801028c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801021e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010228:	d111      	bne.n	801024e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010232:	d004      	beq.n	801023e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801023c:	d107      	bne.n	801024e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801024c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010256:	d10f      	bne.n	8010278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010266:	601a      	str	r2, [r3, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2201      	movs	r2, #1
 801027c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	e010      	b.n	80102ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d101      	bne.n	8010296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010292:	2300      	movs	r3, #0
 8010294:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	3b01      	subs	r3, #1
 801029a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	689a      	ldr	r2, [r3, #8]
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	4013      	ands	r3, r2
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d196      	bne.n	80101da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3728      	adds	r7, #40	; 0x28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20000014 	.word	0x20000014

080102bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af02      	add	r7, sp, #8
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f7ff ff5b 	bl	8010190 <SPI_WaitFifoStateUntilTimeout>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d007      	beq.n	80102f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102e4:	f043 0220 	orr.w	r2, r3, #32
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80102ec:	2303      	movs	r3, #3
 80102ee:	e027      	b.n	8010340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2200      	movs	r2, #0
 80102f8:	2180      	movs	r1, #128	; 0x80
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f7ff fec0 	bl	8010080 <SPI_WaitFlagStateUntilTimeout>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d007      	beq.n	8010316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801030a:	f043 0220 	orr.w	r2, r3, #32
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010312:	2303      	movs	r3, #3
 8010314:	e014      	b.n	8010340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2200      	movs	r2, #0
 801031e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff ff34 	bl	8010190 <SPI_WaitFifoStateUntilTimeout>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d007      	beq.n	801033e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010332:	f043 0220 	orr.w	r2, r3, #32
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801033a:	2303      	movs	r3, #3
 801033c:	e000      	b.n	8010340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801033e:	2300      	movs	r3, #0
}
 8010340:	4618      	mov	r0, r3
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	e054      	b.n	8010404 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010360:	b2db      	uxtb	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	d111      	bne.n	801038a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 ff68 	bl	8011244 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a23      	ldr	r2, [pc, #140]	; (801040c <HAL_TIM_Base_Init+0xc4>)
 8010380:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2202      	movs	r2, #2
 801038e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	3304      	adds	r3, #4
 801039a:	4619      	mov	r1, r3
 801039c:	4610      	mov	r0, r2
 801039e:	f000 fbd3 	bl	8010b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2201      	movs	r2, #1
 80103ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2201      	movs	r2, #1
 80103be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2201      	movs	r2, #1
 80103ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2201      	movs	r2, #1
 80103d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2201      	movs	r2, #1
 80103de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	0800a681 	.word	0x0800a681

08010410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b01      	cmp	r3, #1
 8010422:	d001      	beq.n	8010428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010424:	2301      	movs	r3, #1
 8010426:	e036      	b.n	8010496 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2202      	movs	r2, #2
 801042c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68da      	ldr	r2, [r3, #12]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f042 0201 	orr.w	r2, r2, #1
 801043e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4a17      	ldr	r2, [pc, #92]	; (80104a4 <HAL_TIM_Base_Start_IT+0x94>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d004      	beq.n	8010454 <HAL_TIM_Base_Start_IT+0x44>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010452:	d115      	bne.n	8010480 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	689a      	ldr	r2, [r3, #8]
 801045a:	4b13      	ldr	r3, [pc, #76]	; (80104a8 <HAL_TIM_Base_Start_IT+0x98>)
 801045c:	4013      	ands	r3, r2
 801045e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2b06      	cmp	r3, #6
 8010464:	d015      	beq.n	8010492 <HAL_TIM_Base_Start_IT+0x82>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801046c:	d011      	beq.n	8010492 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f042 0201 	orr.w	r2, r2, #1
 801047c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801047e:	e008      	b.n	8010492 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f042 0201 	orr.w	r2, r2, #1
 801048e:	601a      	str	r2, [r3, #0]
 8010490:	e000      	b.n	8010494 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	40012c00 	.word	0x40012c00
 80104a8:	00010007 	.word	0x00010007

080104ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d101      	bne.n	80104be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e054      	b.n	8010568 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d111      	bne.n	80104ee <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 feb6 	bl	8011244 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a23      	ldr	r2, [pc, #140]	; (8010570 <HAL_TIM_OC_Init+0xc4>)
 80104e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2202      	movs	r2, #2
 80104f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3304      	adds	r3, #4
 80104fe:	4619      	mov	r1, r3
 8010500:	4610      	mov	r0, r2
 8010502:	f000 fb21 	bl	8010b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2201      	movs	r2, #1
 801050a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2201      	movs	r2, #1
 8010522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2201      	movs	r2, #1
 801052a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2201      	movs	r2, #1
 801054a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010566:	2300      	movs	r3, #0
}
 8010568:	4618      	mov	r0, r3
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	08010575 	.word	0x08010575

08010574 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801057c:	bf00      	nop
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	f003 0302 	and.w	r3, r3, #2
 801059a:	2b02      	cmp	r3, #2
 801059c:	d128      	bne.n	80105f0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	f003 0302 	and.w	r3, r3, #2
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d121      	bne.n	80105f0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f06f 0202 	mvn.w	r2, #2
 80105b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2201      	movs	r2, #1
 80105ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	f003 0303 	and.w	r3, r3, #3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d005      	beq.n	80105d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	4798      	blx	r3
 80105d4:	e009      	b.n	80105ea <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	691b      	ldr	r3, [r3, #16]
 80105f6:	f003 0304 	and.w	r3, r3, #4
 80105fa:	2b04      	cmp	r3, #4
 80105fc:	d128      	bne.n	8010650 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	f003 0304 	and.w	r3, r3, #4
 8010608:	2b04      	cmp	r3, #4
 801060a:	d121      	bne.n	8010650 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f06f 0204 	mvn.w	r2, #4
 8010614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2202      	movs	r2, #2
 801061a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	699b      	ldr	r3, [r3, #24]
 8010622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010626:	2b00      	cmp	r3, #0
 8010628:	d005      	beq.n	8010636 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	4798      	blx	r3
 8010634:	e009      	b.n	801064a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	f003 0308 	and.w	r3, r3, #8
 801065a:	2b08      	cmp	r3, #8
 801065c:	d128      	bne.n	80106b0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	f003 0308 	and.w	r3, r3, #8
 8010668:	2b08      	cmp	r3, #8
 801066a:	d121      	bne.n	80106b0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f06f 0208 	mvn.w	r2, #8
 8010674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2204      	movs	r2, #4
 801067a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	69db      	ldr	r3, [r3, #28]
 8010682:	f003 0303 	and.w	r3, r3, #3
 8010686:	2b00      	cmp	r3, #0
 8010688:	d005      	beq.n	8010696 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	4798      	blx	r3
 8010694:	e009      	b.n	80106aa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	691b      	ldr	r3, [r3, #16]
 80106b6:	f003 0310 	and.w	r3, r3, #16
 80106ba:	2b10      	cmp	r3, #16
 80106bc:	d128      	bne.n	8010710 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	f003 0310 	and.w	r3, r3, #16
 80106c8:	2b10      	cmp	r3, #16
 80106ca:	d121      	bne.n	8010710 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f06f 0210 	mvn.w	r2, #16
 80106d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2208      	movs	r2, #8
 80106da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	69db      	ldr	r3, [r3, #28]
 80106e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d005      	beq.n	80106f6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	4798      	blx	r3
 80106f4:	e009      	b.n	801070a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b01      	cmp	r3, #1
 801071c:	d110      	bne.n	8010740 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	2b01      	cmp	r3, #1
 801072a:	d109      	bne.n	8010740 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f06f 0201 	mvn.w	r2, #1
 8010734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801074a:	2b80      	cmp	r3, #128	; 0x80
 801074c:	d110      	bne.n	8010770 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010758:	2b80      	cmp	r3, #128	; 0x80
 801075a:	d109      	bne.n	8010770 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	691b      	ldr	r3, [r3, #16]
 8010776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801077a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801077e:	d110      	bne.n	80107a2 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078a:	2b80      	cmp	r3, #128	; 0x80
 801078c:	d109      	bne.n	80107a2 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	691b      	ldr	r3, [r3, #16]
 80107a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ac:	2b40      	cmp	r3, #64	; 0x40
 80107ae:	d110      	bne.n	80107d2 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ba:	2b40      	cmp	r3, #64	; 0x40
 80107bc:	d109      	bne.n	80107d2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b20      	cmp	r3, #32
 80107de:	d110      	bne.n	8010802 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	f003 0320 	and.w	r3, r3, #32
 80107ea:	2b20      	cmp	r3, #32
 80107ec:	d109      	bne.n	8010802 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f06f 0220 	mvn.w	r2, #32
 80107f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010802:	bf00      	nop
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
	...

0801080c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010822:	2b01      	cmp	r3, #1
 8010824:	d101      	bne.n	801082a <HAL_TIM_OC_ConfigChannel+0x1e>
 8010826:	2302      	movs	r3, #2
 8010828:	e066      	b.n	80108f8 <HAL_TIM_OC_ConfigChannel+0xec>
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b14      	cmp	r3, #20
 8010836:	d857      	bhi.n	80108e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8010838:	a201      	add	r2, pc, #4	; (adr r2, 8010840 <HAL_TIM_OC_ConfigChannel+0x34>)
 801083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083e:	bf00      	nop
 8010840:	08010895 	.word	0x08010895
 8010844:	080108e9 	.word	0x080108e9
 8010848:	080108e9 	.word	0x080108e9
 801084c:	080108e9 	.word	0x080108e9
 8010850:	080108a3 	.word	0x080108a3
 8010854:	080108e9 	.word	0x080108e9
 8010858:	080108e9 	.word	0x080108e9
 801085c:	080108e9 	.word	0x080108e9
 8010860:	080108b1 	.word	0x080108b1
 8010864:	080108e9 	.word	0x080108e9
 8010868:	080108e9 	.word	0x080108e9
 801086c:	080108e9 	.word	0x080108e9
 8010870:	080108bf 	.word	0x080108bf
 8010874:	080108e9 	.word	0x080108e9
 8010878:	080108e9 	.word	0x080108e9
 801087c:	080108e9 	.word	0x080108e9
 8010880:	080108cd 	.word	0x080108cd
 8010884:	080108e9 	.word	0x080108e9
 8010888:	080108e9 	.word	0x080108e9
 801088c:	080108e9 	.word	0x080108e9
 8010890:	080108db 	.word	0x080108db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	68b9      	ldr	r1, [r7, #8]
 801089a:	4618      	mov	r0, r3
 801089c:	f000 f9b8 	bl	8010c10 <TIM_OC1_SetConfig>
      break;
 80108a0:	e025      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	68b9      	ldr	r1, [r7, #8]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 fa2d 	bl	8010d08 <TIM_OC2_SetConfig>
      break;
 80108ae:	e01e      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68b9      	ldr	r1, [r7, #8]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 faa0 	bl	8010dfc <TIM_OC3_SetConfig>
      break;
 80108bc:	e017      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	68b9      	ldr	r1, [r7, #8]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 fb11 	bl	8010eec <TIM_OC4_SetConfig>
      break;
 80108ca:	e010      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68b9      	ldr	r1, [r7, #8]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 fb68 	bl	8010fa8 <TIM_OC5_SetConfig>
      break;
 80108d8:	e009      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	68b9      	ldr	r1, [r7, #8]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f000 fbb9 	bl	8011058 <TIM_OC6_SetConfig>
      break;
 80108e6:	e002      	b.n	80108ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80108e8:	2301      	movs	r3, #1
 80108ea:	75fb      	strb	r3, [r7, #23]
      break;
 80108ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3718      	adds	r7, #24
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010914:	2b01      	cmp	r3, #1
 8010916:	d101      	bne.n	801091c <HAL_TIM_ConfigClockSource+0x1c>
 8010918:	2302      	movs	r3, #2
 801091a:	e0b6      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x18a>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2202      	movs	r2, #2
 8010928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801093a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801093e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010958:	d03e      	beq.n	80109d8 <HAL_TIM_ConfigClockSource+0xd8>
 801095a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801095e:	f200 8087 	bhi.w	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010966:	f000 8086 	beq.w	8010a76 <HAL_TIM_ConfigClockSource+0x176>
 801096a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801096e:	d87f      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010970:	2b70      	cmp	r3, #112	; 0x70
 8010972:	d01a      	beq.n	80109aa <HAL_TIM_ConfigClockSource+0xaa>
 8010974:	2b70      	cmp	r3, #112	; 0x70
 8010976:	d87b      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010978:	2b60      	cmp	r3, #96	; 0x60
 801097a:	d050      	beq.n	8010a1e <HAL_TIM_ConfigClockSource+0x11e>
 801097c:	2b60      	cmp	r3, #96	; 0x60
 801097e:	d877      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010980:	2b50      	cmp	r3, #80	; 0x50
 8010982:	d03c      	beq.n	80109fe <HAL_TIM_ConfigClockSource+0xfe>
 8010984:	2b50      	cmp	r3, #80	; 0x50
 8010986:	d873      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010988:	2b40      	cmp	r3, #64	; 0x40
 801098a:	d058      	beq.n	8010a3e <HAL_TIM_ConfigClockSource+0x13e>
 801098c:	2b40      	cmp	r3, #64	; 0x40
 801098e:	d86f      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010990:	2b30      	cmp	r3, #48	; 0x30
 8010992:	d064      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x15e>
 8010994:	2b30      	cmp	r3, #48	; 0x30
 8010996:	d86b      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 8010998:	2b20      	cmp	r3, #32
 801099a:	d060      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x15e>
 801099c:	2b20      	cmp	r3, #32
 801099e:	d867      	bhi.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d05c      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x15e>
 80109a4:	2b10      	cmp	r3, #16
 80109a6:	d05a      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x15e>
 80109a8:	e062      	b.n	8010a70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6818      	ldr	r0, [r3, #0]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	6899      	ldr	r1, [r3, #8]
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	f000 fc23 	bl	8011204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80109cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68ba      	ldr	r2, [r7, #8]
 80109d4:	609a      	str	r2, [r3, #8]
      break;
 80109d6:	e04f      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6818      	ldr	r0, [r3, #0]
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	6899      	ldr	r1, [r3, #8]
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	685a      	ldr	r2, [r3, #4]
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	f000 fc0c 	bl	8011204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	689a      	ldr	r2, [r3, #8]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80109fa:	609a      	str	r2, [r3, #8]
      break;
 80109fc:	e03c      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6818      	ldr	r0, [r3, #0]
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	6859      	ldr	r1, [r3, #4]
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	f000 fb7e 	bl	801110c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2150      	movs	r1, #80	; 0x50
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 fbd7 	bl	80111ca <TIM_ITRx_SetConfig>
      break;
 8010a1c:	e02c      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6818      	ldr	r0, [r3, #0]
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	6859      	ldr	r1, [r3, #4]
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	f000 fb9d 	bl	801116a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2160      	movs	r1, #96	; 0x60
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fbc7 	bl	80111ca <TIM_ITRx_SetConfig>
      break;
 8010a3c:	e01c      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	6859      	ldr	r1, [r3, #4]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	f000 fb5e 	bl	801110c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2140      	movs	r1, #64	; 0x40
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fbb7 	bl	80111ca <TIM_ITRx_SetConfig>
      break;
 8010a5c:	e00c      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4619      	mov	r1, r3
 8010a68:	4610      	mov	r0, r2
 8010a6a:	f000 fbae 	bl	80111ca <TIM_ITRx_SetConfig>
      break;
 8010a6e:	e003      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010a70:	2301      	movs	r3, #1
 8010a72:	73fb      	strb	r3, [r7, #15]
      break;
 8010a74:	e000      	b.n	8010a78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8010a9a:	bf00      	nop
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr

08010aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010aa6:	b480      	push	{r7}
 8010aa8:	b083      	sub	sp, #12
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010aae:	bf00      	nop
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b083      	sub	sp, #12
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ac2:	bf00      	nop
 8010ac4:	370c      	adds	r7, #12
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ace:	b480      	push	{r7}
 8010ad0:	b083      	sub	sp, #12
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8010ad6:	bf00      	nop
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010aea:	bf00      	nop
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010af6:	b480      	push	{r7}
 8010af8:	b083      	sub	sp, #12
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010afe:	bf00      	nop
 8010b00:	370c      	adds	r7, #12
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr

08010b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b0a:	b480      	push	{r7}
 8010b0c:	b083      	sub	sp, #12
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b12:	bf00      	nop
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8010b26:	bf00      	nop
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010b32:	b480      	push	{r7}
 8010b34:	b083      	sub	sp, #12
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010b3a:	bf00      	nop
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
	...

08010b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	4a2a      	ldr	r2, [pc, #168]	; (8010c04 <TIM_Base_SetConfig+0xbc>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d003      	beq.n	8010b68 <TIM_Base_SetConfig+0x20>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b66:	d108      	bne.n	8010b7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	4313      	orrs	r3, r2
 8010b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a21      	ldr	r2, [pc, #132]	; (8010c04 <TIM_Base_SetConfig+0xbc>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d00b      	beq.n	8010b9a <TIM_Base_SetConfig+0x52>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b88:	d007      	beq.n	8010b9a <TIM_Base_SetConfig+0x52>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4a1e      	ldr	r2, [pc, #120]	; (8010c08 <TIM_Base_SetConfig+0xc0>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d003      	beq.n	8010b9a <TIM_Base_SetConfig+0x52>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4a1d      	ldr	r2, [pc, #116]	; (8010c0c <TIM_Base_SetConfig+0xc4>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d108      	bne.n	8010bac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	689a      	ldr	r2, [r3, #8]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a0c      	ldr	r2, [pc, #48]	; (8010c04 <TIM_Base_SetConfig+0xbc>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d007      	beq.n	8010be8 <TIM_Base_SetConfig+0xa0>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a0b      	ldr	r2, [pc, #44]	; (8010c08 <TIM_Base_SetConfig+0xc0>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d003      	beq.n	8010be8 <TIM_Base_SetConfig+0xa0>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a0a      	ldr	r2, [pc, #40]	; (8010c0c <TIM_Base_SetConfig+0xc4>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d103      	bne.n	8010bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	691a      	ldr	r2, [r3, #16]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	615a      	str	r2, [r3, #20]
}
 8010bf6:	bf00      	nop
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	40012c00 	.word	0x40012c00
 8010c08:	40014400 	.word	0x40014400
 8010c0c:	40014800 	.word	0x40014800

08010c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b087      	sub	sp, #28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	f023 0201 	bic.w	r2, r3, #1
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6a1b      	ldr	r3, [r3, #32]
 8010c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f023 0303 	bic.w	r3, r3, #3
 8010c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	4313      	orrs	r3, r2
 8010c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	f023 0302 	bic.w	r3, r3, #2
 8010c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	4313      	orrs	r3, r2
 8010c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4a24      	ldr	r2, [pc, #144]	; (8010cfc <TIM_OC1_SetConfig+0xec>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d007      	beq.n	8010c80 <TIM_OC1_SetConfig+0x70>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4a23      	ldr	r2, [pc, #140]	; (8010d00 <TIM_OC1_SetConfig+0xf0>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d003      	beq.n	8010c80 <TIM_OC1_SetConfig+0x70>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a22      	ldr	r2, [pc, #136]	; (8010d04 <TIM_OC1_SetConfig+0xf4>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d10c      	bne.n	8010c9a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f023 0308 	bic.w	r3, r3, #8
 8010c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	697a      	ldr	r2, [r7, #20]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	f023 0304 	bic.w	r3, r3, #4
 8010c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4a17      	ldr	r2, [pc, #92]	; (8010cfc <TIM_OC1_SetConfig+0xec>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d007      	beq.n	8010cb2 <TIM_OC1_SetConfig+0xa2>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a17      	ldr	r2, [pc, #92]	; (8010d04 <TIM_OC1_SetConfig+0xf4>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d003      	beq.n	8010cb2 <TIM_OC1_SetConfig+0xa2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a14      	ldr	r2, [pc, #80]	; (8010d00 <TIM_OC1_SetConfig+0xf0>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d111      	bne.n	8010cd6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	693a      	ldr	r2, [r7, #16]
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	693a      	ldr	r2, [r7, #16]
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	697a      	ldr	r2, [r7, #20]
 8010cee:	621a      	str	r2, [r3, #32]
}
 8010cf0:	bf00      	nop
 8010cf2:	371c      	adds	r7, #28
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	40012c00 	.word	0x40012c00
 8010d00:	40014800 	.word	0x40014800
 8010d04:	40014400 	.word	0x40014400

08010d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b087      	sub	sp, #28
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a1b      	ldr	r3, [r3, #32]
 8010d16:	f023 0210 	bic.w	r2, r3, #16
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	021b      	lsls	r3, r3, #8
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	f023 0320 	bic.w	r3, r3, #32
 8010d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	011b      	lsls	r3, r3, #4
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4a22      	ldr	r2, [pc, #136]	; (8010df0 <TIM_OC2_SetConfig+0xe8>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d10d      	bne.n	8010d88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	011b      	lsls	r3, r3, #4
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a19      	ldr	r2, [pc, #100]	; (8010df0 <TIM_OC2_SetConfig+0xe8>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d007      	beq.n	8010da0 <TIM_OC2_SetConfig+0x98>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a18      	ldr	r2, [pc, #96]	; (8010df4 <TIM_OC2_SetConfig+0xec>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d003      	beq.n	8010da0 <TIM_OC2_SetConfig+0x98>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a17      	ldr	r2, [pc, #92]	; (8010df8 <TIM_OC2_SetConfig+0xf0>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d113      	bne.n	8010dc8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	695b      	ldr	r3, [r3, #20]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	693a      	ldr	r2, [r7, #16]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	693a      	ldr	r2, [r7, #16]
 8010dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	68fa      	ldr	r2, [r7, #12]
 8010dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	697a      	ldr	r2, [r7, #20]
 8010de0:	621a      	str	r2, [r3, #32]
}
 8010de2:	bf00      	nop
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	40012c00 	.word	0x40012c00
 8010df4:	40014400 	.word	0x40014400
 8010df8:	40014800 	.word	0x40014800

08010dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b087      	sub	sp, #28
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6a1b      	ldr	r3, [r3, #32]
 8010e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a1b      	ldr	r3, [r3, #32]
 8010e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	69db      	ldr	r3, [r3, #28]
 8010e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f023 0303 	bic.w	r3, r3, #3
 8010e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	021b      	lsls	r3, r3, #8
 8010e50:	697a      	ldr	r2, [r7, #20]
 8010e52:	4313      	orrs	r3, r2
 8010e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4a21      	ldr	r2, [pc, #132]	; (8010ee0 <TIM_OC3_SetConfig+0xe4>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d10d      	bne.n	8010e7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	021b      	lsls	r3, r3, #8
 8010e6c:	697a      	ldr	r2, [r7, #20]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a18      	ldr	r2, [pc, #96]	; (8010ee0 <TIM_OC3_SetConfig+0xe4>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d007      	beq.n	8010e92 <TIM_OC3_SetConfig+0x96>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4a17      	ldr	r2, [pc, #92]	; (8010ee4 <TIM_OC3_SetConfig+0xe8>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d003      	beq.n	8010e92 <TIM_OC3_SetConfig+0x96>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4a16      	ldr	r2, [pc, #88]	; (8010ee8 <TIM_OC3_SetConfig+0xec>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d113      	bne.n	8010eba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	695b      	ldr	r3, [r3, #20]
 8010ea6:	011b      	lsls	r3, r3, #4
 8010ea8:	693a      	ldr	r2, [r7, #16]
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	699b      	ldr	r3, [r3, #24]
 8010eb2:	011b      	lsls	r3, r3, #4
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	697a      	ldr	r2, [r7, #20]
 8010ed2:	621a      	str	r2, [r3, #32]
}
 8010ed4:	bf00      	nop
 8010ed6:	371c      	adds	r7, #28
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	40012c00 	.word	0x40012c00
 8010ee4:	40014400 	.word	0x40014400
 8010ee8:	40014800 	.word	0x40014800

08010eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b087      	sub	sp, #28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6a1b      	ldr	r3, [r3, #32]
 8010efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6a1b      	ldr	r3, [r3, #32]
 8010f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	021b      	lsls	r3, r3, #8
 8010f2e:	68fa      	ldr	r2, [r7, #12]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	031b      	lsls	r3, r3, #12
 8010f42:	693a      	ldr	r2, [r7, #16]
 8010f44:	4313      	orrs	r3, r2
 8010f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4a14      	ldr	r2, [pc, #80]	; (8010f9c <TIM_OC4_SetConfig+0xb0>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d007      	beq.n	8010f60 <TIM_OC4_SetConfig+0x74>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	4a13      	ldr	r2, [pc, #76]	; (8010fa0 <TIM_OC4_SetConfig+0xb4>)
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d003      	beq.n	8010f60 <TIM_OC4_SetConfig+0x74>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4a12      	ldr	r2, [pc, #72]	; (8010fa4 <TIM_OC4_SetConfig+0xb8>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d109      	bne.n	8010f74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	695b      	ldr	r3, [r3, #20]
 8010f6c:	019b      	lsls	r3, r3, #6
 8010f6e:	697a      	ldr	r2, [r7, #20]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	697a      	ldr	r2, [r7, #20]
 8010f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	685a      	ldr	r2, [r3, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	693a      	ldr	r2, [r7, #16]
 8010f8c:	621a      	str	r2, [r3, #32]
}
 8010f8e:	bf00      	nop
 8010f90:	371c      	adds	r7, #28
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	40012c00 	.word	0x40012c00
 8010fa0:	40014400 	.word	0x40014400
 8010fa4:	40014800 	.word	0x40014800

08010fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b087      	sub	sp, #28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6a1b      	ldr	r3, [r3, #32]
 8010fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a1b      	ldr	r3, [r3, #32]
 8010fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	041b      	lsls	r3, r3, #16
 8010ff4:	693a      	ldr	r2, [r7, #16]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4a13      	ldr	r2, [pc, #76]	; (801104c <TIM_OC5_SetConfig+0xa4>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d007      	beq.n	8011012 <TIM_OC5_SetConfig+0x6a>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a12      	ldr	r2, [pc, #72]	; (8011050 <TIM_OC5_SetConfig+0xa8>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d003      	beq.n	8011012 <TIM_OC5_SetConfig+0x6a>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a11      	ldr	r2, [pc, #68]	; (8011054 <TIM_OC5_SetConfig+0xac>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d109      	bne.n	8011026 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	695b      	ldr	r3, [r3, #20]
 801101e:	021b      	lsls	r3, r3, #8
 8011020:	697a      	ldr	r2, [r7, #20]
 8011022:	4313      	orrs	r3, r2
 8011024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	697a      	ldr	r2, [r7, #20]
 801102a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	621a      	str	r2, [r3, #32]
}
 8011040:	bf00      	nop
 8011042:	371c      	adds	r7, #28
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	40012c00 	.word	0x40012c00
 8011050:	40014400 	.word	0x40014400
 8011054:	40014800 	.word	0x40014800

08011058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011058:	b480      	push	{r7}
 801105a:	b087      	sub	sp, #28
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6a1b      	ldr	r3, [r3, #32]
 8011066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801108a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	021b      	lsls	r3, r3, #8
 8011092:	68fa      	ldr	r2, [r7, #12]
 8011094:	4313      	orrs	r3, r2
 8011096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801109e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	051b      	lsls	r3, r3, #20
 80110a6:	693a      	ldr	r2, [r7, #16]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4a14      	ldr	r2, [pc, #80]	; (8011100 <TIM_OC6_SetConfig+0xa8>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d007      	beq.n	80110c4 <TIM_OC6_SetConfig+0x6c>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4a13      	ldr	r2, [pc, #76]	; (8011104 <TIM_OC6_SetConfig+0xac>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d003      	beq.n	80110c4 <TIM_OC6_SetConfig+0x6c>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	4a12      	ldr	r2, [pc, #72]	; (8011108 <TIM_OC6_SetConfig+0xb0>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d109      	bne.n	80110d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80110ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	029b      	lsls	r3, r3, #10
 80110d2:	697a      	ldr	r2, [r7, #20]
 80110d4:	4313      	orrs	r3, r2
 80110d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685a      	ldr	r2, [r3, #4]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	693a      	ldr	r2, [r7, #16]
 80110f0:	621a      	str	r2, [r3, #32]
}
 80110f2:	bf00      	nop
 80110f4:	371c      	adds	r7, #28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	40012c00 	.word	0x40012c00
 8011104:	40014400 	.word	0x40014400
 8011108:	40014800 	.word	0x40014800

0801110c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801110c:	b480      	push	{r7}
 801110e:	b087      	sub	sp, #28
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6a1b      	ldr	r3, [r3, #32]
 801111c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6a1b      	ldr	r3, [r3, #32]
 8011122:	f023 0201 	bic.w	r2, r3, #1
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	693a      	ldr	r2, [r7, #16]
 801113e:	4313      	orrs	r3, r2
 8011140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f023 030a 	bic.w	r3, r3, #10
 8011148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801114a:	697a      	ldr	r2, [r7, #20]
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	4313      	orrs	r3, r2
 8011150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	693a      	ldr	r2, [r7, #16]
 8011156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	697a      	ldr	r2, [r7, #20]
 801115c:	621a      	str	r2, [r3, #32]
}
 801115e:	bf00      	nop
 8011160:	371c      	adds	r7, #28
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr

0801116a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801116a:	b480      	push	{r7}
 801116c:	b087      	sub	sp, #28
 801116e:	af00      	add	r7, sp, #0
 8011170:	60f8      	str	r0, [r7, #12]
 8011172:	60b9      	str	r1, [r7, #8]
 8011174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6a1b      	ldr	r3, [r3, #32]
 801117a:	f023 0210 	bic.w	r2, r3, #16
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6a1b      	ldr	r3, [r3, #32]
 801118c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	031b      	lsls	r3, r3, #12
 801119a:	697a      	ldr	r2, [r7, #20]
 801119c:	4313      	orrs	r3, r2
 801119e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80111a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	011b      	lsls	r3, r3, #4
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	4313      	orrs	r3, r2
 80111b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	693a      	ldr	r2, [r7, #16]
 80111bc:	621a      	str	r2, [r3, #32]
}
 80111be:	bf00      	nop
 80111c0:	371c      	adds	r7, #28
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b085      	sub	sp, #20
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
 80111d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80111e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	f043 0307 	orr.w	r3, r3, #7
 80111f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	609a      	str	r2, [r3, #8]
}
 80111f8:	bf00      	nop
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011204:	b480      	push	{r7}
 8011206:	b087      	sub	sp, #28
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
 8011210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	689b      	ldr	r3, [r3, #8]
 8011216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801121e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	021a      	lsls	r2, r3, #8
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	431a      	orrs	r2, r3
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	4313      	orrs	r3, r2
 801122c:	697a      	ldr	r2, [r7, #20]
 801122e:	4313      	orrs	r3, r2
 8011230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	697a      	ldr	r2, [r7, #20]
 8011236:	609a      	str	r2, [r3, #8]
}
 8011238:	bf00      	nop
 801123a:	371c      	adds	r7, #28
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	4a1e      	ldr	r2, [pc, #120]	; (80112c8 <TIM_ResetCallback+0x84>)
 8011250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4a1d      	ldr	r2, [pc, #116]	; (80112cc <TIM_ResetCallback+0x88>)
 8011258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a1c      	ldr	r2, [pc, #112]	; (80112d0 <TIM_ResetCallback+0x8c>)
 8011260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a1b      	ldr	r2, [pc, #108]	; (80112d4 <TIM_ResetCallback+0x90>)
 8011268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	4a1a      	ldr	r2, [pc, #104]	; (80112d8 <TIM_ResetCallback+0x94>)
 8011270:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4a19      	ldr	r2, [pc, #100]	; (80112dc <TIM_ResetCallback+0x98>)
 8011278:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a18      	ldr	r2, [pc, #96]	; (80112e0 <TIM_ResetCallback+0x9c>)
 8011280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a17      	ldr	r2, [pc, #92]	; (80112e4 <TIM_ResetCallback+0xa0>)
 8011288:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a16      	ldr	r2, [pc, #88]	; (80112e8 <TIM_ResetCallback+0xa4>)
 8011290:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a15      	ldr	r2, [pc, #84]	; (80112ec <TIM_ResetCallback+0xa8>)
 8011298:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a14      	ldr	r2, [pc, #80]	; (80112f0 <TIM_ResetCallback+0xac>)
 80112a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a13      	ldr	r2, [pc, #76]	; (80112f4 <TIM_ResetCallback+0xb0>)
 80112a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4a12      	ldr	r2, [pc, #72]	; (80112f8 <TIM_ResetCallback+0xb4>)
 80112b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4a11      	ldr	r2, [pc, #68]	; (80112fc <TIM_ResetCallback+0xb8>)
 80112b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80112bc:	bf00      	nop
 80112be:	370c      	adds	r7, #12
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	080058c9 	.word	0x080058c9
 80112cc:	08010a93 	.word	0x08010a93
 80112d0:	08010b0b 	.word	0x08010b0b
 80112d4:	08010b1f 	.word	0x08010b1f
 80112d8:	08010abb 	.word	0x08010abb
 80112dc:	08010acf 	.word	0x08010acf
 80112e0:	08010aa7 	.word	0x08010aa7
 80112e4:	08010ae3 	.word	0x08010ae3
 80112e8:	08010af7 	.word	0x08010af7
 80112ec:	08010b33 	.word	0x08010b33
 80112f0:	080114e1 	.word	0x080114e1
 80112f4:	080114f5 	.word	0x080114f5
 80112f8:	08011509 	.word	0x08011509
 80112fc:	0801151d 	.word	0x0801151d

08011300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011314:	2302      	movs	r3, #2
 8011316:	e04a      	b.n	80113ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2202      	movs	r2, #2
 8011324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a1f      	ldr	r2, [pc, #124]	; (80113bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d108      	bne.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011348:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	4313      	orrs	r3, r2
 8011352:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801135a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	4313      	orrs	r3, r2
 8011364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4a12      	ldr	r2, [pc, #72]	; (80113bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d004      	beq.n	8011382 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011380:	d10c      	bne.n	801139c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	4313      	orrs	r3, r2
 8011392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	68ba      	ldr	r2, [r7, #8]
 801139a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	40012c00 	.word	0x40012c00

080113c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80113ca:	2300      	movs	r3, #0
 80113cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d101      	bne.n	80113dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80113d8:	2302      	movs	r3, #2
 80113da:	e078      	b.n	80114ce <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2201      	movs	r2, #1
 80113e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	4313      	orrs	r3, r2
 80113f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	4313      	orrs	r3, r2
 80113fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	4313      	orrs	r3, r2
 801140c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4313      	orrs	r3, r2
 801141a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	4313      	orrs	r3, r2
 8011428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	695b      	ldr	r3, [r3, #20]
 8011434:	4313      	orrs	r3, r2
 8011436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011442:	4313      	orrs	r3, r2
 8011444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	699b      	ldr	r3, [r3, #24]
 8011450:	041b      	lsls	r3, r3, #16
 8011452:	4313      	orrs	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	4a20      	ldr	r2, [pc, #128]	; (80114dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d106      	bne.n	801146e <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	69db      	ldr	r3, [r3, #28]
 801146a:	4313      	orrs	r3, r2
 801146c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a1a      	ldr	r2, [pc, #104]	; (80114dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d121      	bne.n	80114bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011482:	051b      	lsls	r3, r3, #20
 8011484:	4313      	orrs	r3, r2
 8011486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	4313      	orrs	r3, r2
 8011494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a0:	4313      	orrs	r3, r2
 80114a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4a0c      	ldr	r2, [pc, #48]	; (80114dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d106      	bne.n	80114bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b8:	4313      	orrs	r3, r2
 80114ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3714      	adds	r7, #20
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	40012c00 	.word	0x40012c00

080114e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80114e8:	bf00      	nop
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80114fc:	bf00      	nop
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011510:	bf00      	nop
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr

0801151c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011524:	bf00      	nop
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <LL_RCC_GetUSARTClockSource>:
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8011538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801153c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4013      	ands	r3, r2
}
 8011544:	4618      	mov	r0, r3
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <LL_RCC_GetLPUARTClockSource>:
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8011558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801155c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	4013      	ands	r3, r2
}
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d101      	bne.n	8011582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801157e:	2301      	movs	r3, #1
 8011580:	e042      	b.n	8011608 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011588:	2b00      	cmp	r3, #0
 801158a:	d106      	bne.n	801159a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7f8 ff43 	bl	800a420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2224      	movs	r2, #36	; 0x24
 801159e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f022 0201 	bic.w	r2, r2, #1
 80115b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 fbfe 	bl	8011db4 <UART_SetConfig>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d101      	bne.n	80115c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e022      	b.n	8011608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d002      	beq.n	80115d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fe1a 	bl	8012204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80115de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	689a      	ldr	r2, [r3, #8]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80115ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f042 0201 	orr.w	r2, r2, #1
 80115fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f000 fea1 	bl	8012348 <UART_CheckIdleState>
 8011606:	4603      	mov	r3, r0
}
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b08a      	sub	sp, #40	; 0x28
 8011614:	af02      	add	r7, sp, #8
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	4613      	mov	r3, r2
 801161e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011626:	2b20      	cmp	r3, #32
 8011628:	d17b      	bne.n	8011722 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <HAL_UART_Transmit+0x26>
 8011630:	88fb      	ldrh	r3, [r7, #6]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011636:	2301      	movs	r3, #1
 8011638:	e074      	b.n	8011724 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2200      	movs	r2, #0
 801163e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2221      	movs	r2, #33	; 0x21
 8011646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801164a:	f7fb f9fd 	bl	800ca48 <HAL_GetTick>
 801164e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	88fa      	ldrh	r2, [r7, #6]
 8011654:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	88fa      	ldrh	r2, [r7, #6]
 801165c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011668:	d108      	bne.n	801167c <HAL_UART_Transmit+0x6c>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d104      	bne.n	801167c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011672:	2300      	movs	r3, #0
 8011674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	61bb      	str	r3, [r7, #24]
 801167a:	e003      	b.n	8011684 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011680:	2300      	movs	r3, #0
 8011682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011684:	e030      	b.n	80116e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	2200      	movs	r2, #0
 801168e:	2180      	movs	r1, #128	; 0x80
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	f000 ff03 	bl	801249c <UART_WaitOnFlagUntilTimeout>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d005      	beq.n	80116a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2220      	movs	r2, #32
 80116a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80116a4:	2303      	movs	r3, #3
 80116a6:	e03d      	b.n	8011724 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d10b      	bne.n	80116c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	881b      	ldrh	r3, [r3, #0]
 80116b2:	461a      	mov	r2, r3
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80116bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	3302      	adds	r3, #2
 80116c2:	61bb      	str	r3, [r7, #24]
 80116c4:	e007      	b.n	80116d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	781a      	ldrb	r2, [r3, #0]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	3301      	adds	r3, #1
 80116d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80116dc:	b29b      	uxth	r3, r3
 80116de:	3b01      	subs	r3, #1
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d1c8      	bne.n	8011686 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	2200      	movs	r2, #0
 80116fc:	2140      	movs	r1, #64	; 0x40
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f000 fecc 	bl	801249c <UART_WaitOnFlagUntilTimeout>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	d005      	beq.n	8011716 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2220      	movs	r2, #32
 801170e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011712:	2303      	movs	r3, #3
 8011714:	e006      	b.n	8011724 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2220      	movs	r2, #32
 801171a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801171e:	2300      	movs	r3, #0
 8011720:	e000      	b.n	8011724 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011722:	2302      	movs	r3, #2
  }
}
 8011724:	4618      	mov	r0, r3
 8011726:	3720      	adds	r7, #32
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b0ba      	sub	sp, #232	; 0xe8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	69db      	ldr	r3, [r3, #28]
 801173a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011752:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011756:	f640 030f 	movw	r3, #2063	; 0x80f
 801175a:	4013      	ands	r3, r2
 801175c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011764:	2b00      	cmp	r3, #0
 8011766:	d11b      	bne.n	80117a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801176c:	f003 0320 	and.w	r3, r3, #32
 8011770:	2b00      	cmp	r3, #0
 8011772:	d015      	beq.n	80117a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011778:	f003 0320 	and.w	r3, r3, #32
 801177c:	2b00      	cmp	r3, #0
 801177e:	d105      	bne.n	801178c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d009      	beq.n	80117a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 82e3 	beq.w	8011d5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	4798      	blx	r3
      }
      return;
 801179e:	e2dd      	b.n	8011d5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80117a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f000 8123 	beq.w	80119f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80117aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80117ae:	4b8d      	ldr	r3, [pc, #564]	; (80119e4 <HAL_UART_IRQHandler+0x2b8>)
 80117b0:	4013      	ands	r3, r2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d106      	bne.n	80117c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80117b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80117ba:	4b8b      	ldr	r3, [pc, #556]	; (80119e8 <HAL_UART_IRQHandler+0x2bc>)
 80117bc:	4013      	ands	r3, r2
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 8116 	beq.w	80119f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80117c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d011      	beq.n	80117f4 <HAL_UART_IRQHandler+0xc8>
 80117d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00b      	beq.n	80117f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2201      	movs	r2, #1
 80117e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117ea:	f043 0201 	orr.w	r2, r3, #1
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80117f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117f8:	f003 0302 	and.w	r3, r3, #2
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d011      	beq.n	8011824 <HAL_UART_IRQHandler+0xf8>
 8011800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011804:	f003 0301 	and.w	r3, r3, #1
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00b      	beq.n	8011824 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	2202      	movs	r2, #2
 8011812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801181a:	f043 0204 	orr.w	r2, r3, #4
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011828:	f003 0304 	and.w	r3, r3, #4
 801182c:	2b00      	cmp	r3, #0
 801182e:	d011      	beq.n	8011854 <HAL_UART_IRQHandler+0x128>
 8011830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011834:	f003 0301 	and.w	r3, r3, #1
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00b      	beq.n	8011854 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2204      	movs	r2, #4
 8011842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801184a:	f043 0202 	orr.w	r2, r3, #2
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011858:	f003 0308 	and.w	r3, r3, #8
 801185c:	2b00      	cmp	r3, #0
 801185e:	d017      	beq.n	8011890 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011864:	f003 0320 	and.w	r3, r3, #32
 8011868:	2b00      	cmp	r3, #0
 801186a:	d105      	bne.n	8011878 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801186c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011870:	4b5c      	ldr	r3, [pc, #368]	; (80119e4 <HAL_UART_IRQHandler+0x2b8>)
 8011872:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00b      	beq.n	8011890 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2208      	movs	r2, #8
 801187e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011886:	f043 0208 	orr.w	r2, r3, #8
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011898:	2b00      	cmp	r3, #0
 801189a:	d012      	beq.n	80118c2 <HAL_UART_IRQHandler+0x196>
 801189c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00c      	beq.n	80118c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118b8:	f043 0220 	orr.w	r2, r3, #32
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f000 8249 	beq.w	8011d60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80118ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80118d2:	f003 0320 	and.w	r3, r3, #32
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d013      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80118da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118de:	f003 0320 	and.w	r3, r3, #32
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d105      	bne.n	80118f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80118e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d007      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d003      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011916:	2b40      	cmp	r3, #64	; 0x40
 8011918:	d005      	beq.n	8011926 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801191a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801191e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011922:	2b00      	cmp	r3, #0
 8011924:	d054      	beq.n	80119d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fe1f 	bl	801256a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011936:	2b40      	cmp	r3, #64	; 0x40
 8011938:	d146      	bne.n	80119c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3308      	adds	r3, #8
 8011940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011948:	e853 3f00 	ldrex	r3, [r3]
 801194c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3308      	adds	r3, #8
 8011962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011966:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801196a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011976:	e841 2300 	strex	r3, r2, [r1]
 801197a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801197e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1d9      	bne.n	801193a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801198c:	2b00      	cmp	r3, #0
 801198e:	d017      	beq.n	80119c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011996:	4a15      	ldr	r2, [pc, #84]	; (80119ec <HAL_UART_IRQHandler+0x2c0>)
 8011998:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fb f9d7 	bl	800cd54 <HAL_DMA_Abort_IT>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d019      	beq.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80119ba:	4610      	mov	r0, r2
 80119bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119be:	e00f      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 f9e1 	bl	8011d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119c6:	e00b      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f000 f9dd 	bl	8011d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119ce:	e007      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f9d9 	bl	8011d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80119de:	e1bf      	b.n	8011d60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119e0:	bf00      	nop
    return;
 80119e2:	e1bd      	b.n	8011d60 <HAL_UART_IRQHandler+0x634>
 80119e4:	10000001 	.word	0x10000001
 80119e8:	04000120 	.word	0x04000120
 80119ec:	08012637 	.word	0x08012637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	f040 8153 	bne.w	8011ca0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80119fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119fe:	f003 0310 	and.w	r3, r3, #16
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 814c 	beq.w	8011ca0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a0c:	f003 0310 	and.w	r3, r3, #16
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 8145 	beq.w	8011ca0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2210      	movs	r2, #16
 8011a1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a28:	2b40      	cmp	r3, #64	; 0x40
 8011a2a:	f040 80bb 	bne.w	8011ba4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f000 818f 	beq.w	8011d64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011a50:	429a      	cmp	r2, r3
 8011a52:	f080 8187 	bcs.w	8011d64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f003 0320 	and.w	r3, r3, #32
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f040 8087 	bne.w	8011b82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011a80:	e853 3f00 	ldrex	r3, [r3]
 8011a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011aa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011aae:	e841 2300 	strex	r3, r2, [r1]
 8011ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1da      	bne.n	8011a74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ac8:	e853 3f00 	ldrex	r3, [r3]
 8011acc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ad0:	f023 0301 	bic.w	r3, r3, #1
 8011ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3308      	adds	r3, #8
 8011ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011ae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011aee:	e841 2300 	strex	r3, r2, [r1]
 8011af2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1e1      	bne.n	8011abe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	3308      	adds	r3, #8
 8011b00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b04:	e853 3f00 	ldrex	r3, [r3]
 8011b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	3308      	adds	r3, #8
 8011b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011b24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b26:	e841 2300 	strex	r3, r2, [r1]
 8011b2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1e3      	bne.n	8011afa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2220      	movs	r2, #32
 8011b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b48:	e853 3f00 	ldrex	r3, [r3]
 8011b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b50:	f023 0310 	bic.w	r3, r3, #16
 8011b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b6a:	e841 2300 	strex	r3, r2, [r1]
 8011b6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d1e4      	bne.n	8011b40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fb f88a 	bl	800cc96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2202      	movs	r2, #2
 8011b86:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 f8fd 	bl	8011d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011ba2:	e0df      	b.n	8011d64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f000 80d1 	beq.w	8011d68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011bc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 80cc 	beq.w	8011d68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd8:	e853 3f00 	ldrex	r3, [r3]
 8011bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	461a      	mov	r2, r3
 8011bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8011bf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011bfa:	e841 2300 	strex	r3, r2, [r1]
 8011bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e4      	bne.n	8011bd0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c10:	e853 3f00 	ldrex	r3, [r3]
 8011c14:	623b      	str	r3, [r7, #32]
   return(result);
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c1c:	f023 0301 	bic.w	r3, r3, #1
 8011c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	3308      	adds	r3, #8
 8011c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8011c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c36:	e841 2300 	strex	r3, r2, [r1]
 8011c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d1e1      	bne.n	8011c06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2220      	movs	r2, #32
 8011c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2200      	movs	r2, #0
 8011c54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	e853 3f00 	ldrex	r3, [r3]
 8011c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f023 0310 	bic.w	r3, r3, #16
 8011c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c78:	61fb      	str	r3, [r7, #28]
 8011c7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7c:	69b9      	ldr	r1, [r7, #24]
 8011c7e:	69fa      	ldr	r2, [r7, #28]
 8011c80:	e841 2300 	strex	r3, r2, [r1]
 8011c84:	617b      	str	r3, [r7, #20]
   return(result);
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1e4      	bne.n	8011c56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2202      	movs	r2, #2
 8011c90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011c96:	4619      	mov	r1, r3
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f000 f87f 	bl	8011d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011c9e:	e063      	b.n	8011d68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00e      	beq.n	8011cca <HAL_UART_IRQHandler+0x59e>
 8011cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d008      	beq.n	8011cca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 fcf8 	bl	80126b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011cc8:	e051      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d014      	beq.n	8011d00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d105      	bne.n	8011cee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d008      	beq.n	8011d00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d03a      	beq.n	8011d6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	4798      	blx	r3
    }
    return;
 8011cfe:	e035      	b.n	8011d6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d009      	beq.n	8011d20 <HAL_UART_IRQHandler+0x5f4>
 8011d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d003      	beq.n	8011d20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 fca2 	bl	8012662 <UART_EndTransmit_IT>
    return;
 8011d1e:	e026      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d009      	beq.n	8011d40 <HAL_UART_IRQHandler+0x614>
 8011d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d003      	beq.n	8011d40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 fcd1 	bl	80126e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011d3e:	e016      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d010      	beq.n	8011d6e <HAL_UART_IRQHandler+0x642>
 8011d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	da0c      	bge.n	8011d6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f000 fcb9 	bl	80126cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011d5a:	e008      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
      return;
 8011d5c:	bf00      	nop
 8011d5e:	e006      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
    return;
 8011d60:	bf00      	nop
 8011d62:	e004      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
      return;
 8011d64:	bf00      	nop
 8011d66:	e002      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
      return;
 8011d68:	bf00      	nop
 8011d6a:	e000      	b.n	8011d6e <HAL_UART_IRQHandler+0x642>
    return;
 8011d6c:	bf00      	nop
  }
}
 8011d6e:	37e8      	adds	r7, #232	; 0xe8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011d7c:	bf00      	nop
 8011d7e:	370c      	adds	r7, #12
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr

08011d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	460b      	mov	r3, r1
 8011da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011da8:	bf00      	nop
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011db8:	b08c      	sub	sp, #48	; 0x30
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	689a      	ldr	r2, [r3, #8]
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	691b      	ldr	r3, [r3, #16]
 8011dcc:	431a      	orrs	r2, r3
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	695b      	ldr	r3, [r3, #20]
 8011dd2:	431a      	orrs	r2, r3
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	69db      	ldr	r3, [r3, #28]
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	4baf      	ldr	r3, [pc, #700]	; (80120a0 <UART_SetConfig+0x2ec>)
 8011de4:	4013      	ands	r3, r2
 8011de6:	697a      	ldr	r2, [r7, #20]
 8011de8:	6812      	ldr	r2, [r2, #0]
 8011dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dec:	430b      	orrs	r3, r1
 8011dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	68da      	ldr	r2, [r3, #12]
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	430a      	orrs	r2, r1
 8011e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4aa4      	ldr	r2, [pc, #656]	; (80120a4 <UART_SetConfig+0x2f0>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d004      	beq.n	8011e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	6a1b      	ldr	r3, [r3, #32]
 8011e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e1c:	4313      	orrs	r3, r2
 8011e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8011e2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8011e2e:	697a      	ldr	r2, [r7, #20]
 8011e30:	6812      	ldr	r2, [r2, #0]
 8011e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e34:	430b      	orrs	r3, r1
 8011e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e3e:	f023 010f 	bic.w	r1, r3, #15
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	430a      	orrs	r2, r1
 8011e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a95      	ldr	r2, [pc, #596]	; (80120a8 <UART_SetConfig+0x2f4>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d125      	bne.n	8011ea4 <UART_SetConfig+0xf0>
 8011e58:	2003      	movs	r0, #3
 8011e5a:	f7ff fb69 	bl	8011530 <LL_RCC_GetUSARTClockSource>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b03      	cmp	r3, #3
 8011e62:	d81b      	bhi.n	8011e9c <UART_SetConfig+0xe8>
 8011e64:	a201      	add	r2, pc, #4	; (adr r2, 8011e6c <UART_SetConfig+0xb8>)
 8011e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e6a:	bf00      	nop
 8011e6c:	08011e7d 	.word	0x08011e7d
 8011e70:	08011e8d 	.word	0x08011e8d
 8011e74:	08011e85 	.word	0x08011e85
 8011e78:	08011e95 	.word	0x08011e95
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e82:	e042      	b.n	8011f0a <UART_SetConfig+0x156>
 8011e84:	2302      	movs	r3, #2
 8011e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e8a:	e03e      	b.n	8011f0a <UART_SetConfig+0x156>
 8011e8c:	2304      	movs	r3, #4
 8011e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e92:	e03a      	b.n	8011f0a <UART_SetConfig+0x156>
 8011e94:	2308      	movs	r3, #8
 8011e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e9a:	e036      	b.n	8011f0a <UART_SetConfig+0x156>
 8011e9c:	2310      	movs	r3, #16
 8011e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ea2:	e032      	b.n	8011f0a <UART_SetConfig+0x156>
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a7e      	ldr	r2, [pc, #504]	; (80120a4 <UART_SetConfig+0x2f0>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d12a      	bne.n	8011f04 <UART_SetConfig+0x150>
 8011eae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011eb2:	f7ff fb4d 	bl	8011550 <LL_RCC_GetLPUARTClockSource>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011ebc:	d01a      	beq.n	8011ef4 <UART_SetConfig+0x140>
 8011ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011ec2:	d81b      	bhi.n	8011efc <UART_SetConfig+0x148>
 8011ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ec8:	d00c      	beq.n	8011ee4 <UART_SetConfig+0x130>
 8011eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ece:	d815      	bhi.n	8011efc <UART_SetConfig+0x148>
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d003      	beq.n	8011edc <UART_SetConfig+0x128>
 8011ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ed8:	d008      	beq.n	8011eec <UART_SetConfig+0x138>
 8011eda:	e00f      	b.n	8011efc <UART_SetConfig+0x148>
 8011edc:	2300      	movs	r3, #0
 8011ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ee2:	e012      	b.n	8011f0a <UART_SetConfig+0x156>
 8011ee4:	2302      	movs	r3, #2
 8011ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011eea:	e00e      	b.n	8011f0a <UART_SetConfig+0x156>
 8011eec:	2304      	movs	r3, #4
 8011eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ef2:	e00a      	b.n	8011f0a <UART_SetConfig+0x156>
 8011ef4:	2308      	movs	r3, #8
 8011ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011efa:	e006      	b.n	8011f0a <UART_SetConfig+0x156>
 8011efc:	2310      	movs	r3, #16
 8011efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f02:	e002      	b.n	8011f0a <UART_SetConfig+0x156>
 8011f04:	2310      	movs	r3, #16
 8011f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	4a65      	ldr	r2, [pc, #404]	; (80120a4 <UART_SetConfig+0x2f0>)
 8011f10:	4293      	cmp	r3, r2
 8011f12:	f040 8097 	bne.w	8012044 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011f16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011f1a:	2b08      	cmp	r3, #8
 8011f1c:	d823      	bhi.n	8011f66 <UART_SetConfig+0x1b2>
 8011f1e:	a201      	add	r2, pc, #4	; (adr r2, 8011f24 <UART_SetConfig+0x170>)
 8011f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f24:	08011f49 	.word	0x08011f49
 8011f28:	08011f67 	.word	0x08011f67
 8011f2c:	08011f51 	.word	0x08011f51
 8011f30:	08011f67 	.word	0x08011f67
 8011f34:	08011f57 	.word	0x08011f57
 8011f38:	08011f67 	.word	0x08011f67
 8011f3c:	08011f67 	.word	0x08011f67
 8011f40:	08011f67 	.word	0x08011f67
 8011f44:	08011f5f 	.word	0x08011f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f48:	f7fc fd70 	bl	800ea2c <HAL_RCC_GetPCLK1Freq>
 8011f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f4e:	e010      	b.n	8011f72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f50:	4b56      	ldr	r3, [pc, #344]	; (80120ac <UART_SetConfig+0x2f8>)
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011f54:	e00d      	b.n	8011f72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f56:	f7fc fce9 	bl	800e92c <HAL_RCC_GetSysClockFreq>
 8011f5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f5c:	e009      	b.n	8011f72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011f64:	e005      	b.n	8011f72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011f66:	2300      	movs	r3, #0
 8011f68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f000 812b 	beq.w	80121d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7e:	4a4c      	ldr	r2, [pc, #304]	; (80120b0 <UART_SetConfig+0x2fc>)
 8011f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f84:	461a      	mov	r2, r3
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	685a      	ldr	r2, [r3, #4]
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d305      	bcc.n	8011faa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fa4:	69ba      	ldr	r2, [r7, #24]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d903      	bls.n	8011fb2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011faa:	2301      	movs	r3, #1
 8011fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011fb0:	e10e      	b.n	80121d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	60bb      	str	r3, [r7, #8]
 8011fb8:	60fa      	str	r2, [r7, #12]
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fbe:	4a3c      	ldr	r2, [pc, #240]	; (80120b0 <UART_SetConfig+0x2fc>)
 8011fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	603b      	str	r3, [r7, #0]
 8011fca:	607a      	str	r2, [r7, #4]
 8011fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011fd4:	f7ee fe8a 	bl	8000cec <__aeabi_uldivmod>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4610      	mov	r0, r2
 8011fde:	4619      	mov	r1, r3
 8011fe0:	f04f 0200 	mov.w	r2, #0
 8011fe4:	f04f 0300 	mov.w	r3, #0
 8011fe8:	020b      	lsls	r3, r1, #8
 8011fea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011fee:	0202      	lsls	r2, r0, #8
 8011ff0:	6979      	ldr	r1, [r7, #20]
 8011ff2:	6849      	ldr	r1, [r1, #4]
 8011ff4:	0849      	lsrs	r1, r1, #1
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	4605      	mov	r5, r0
 8011ffc:	eb12 0804 	adds.w	r8, r2, r4
 8012000:	eb43 0905 	adc.w	r9, r3, r5
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	2200      	movs	r2, #0
 801200a:	469a      	mov	sl, r3
 801200c:	4693      	mov	fp, r2
 801200e:	4652      	mov	r2, sl
 8012010:	465b      	mov	r3, fp
 8012012:	4640      	mov	r0, r8
 8012014:	4649      	mov	r1, r9
 8012016:	f7ee fe69 	bl	8000cec <__aeabi_uldivmod>
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	4613      	mov	r3, r2
 8012020:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012028:	d308      	bcc.n	801203c <UART_SetConfig+0x288>
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012030:	d204      	bcs.n	801203c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	6a3a      	ldr	r2, [r7, #32]
 8012038:	60da      	str	r2, [r3, #12]
 801203a:	e0c9      	b.n	80121d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801203c:	2301      	movs	r3, #1
 801203e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012042:	e0c5      	b.n	80121d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	69db      	ldr	r3, [r3, #28]
 8012048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801204c:	d16d      	bne.n	801212a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801204e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012052:	3b01      	subs	r3, #1
 8012054:	2b07      	cmp	r3, #7
 8012056:	d82d      	bhi.n	80120b4 <UART_SetConfig+0x300>
 8012058:	a201      	add	r2, pc, #4	; (adr r2, 8012060 <UART_SetConfig+0x2ac>)
 801205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801205e:	bf00      	nop
 8012060:	08012081 	.word	0x08012081
 8012064:	08012089 	.word	0x08012089
 8012068:	080120b5 	.word	0x080120b5
 801206c:	0801208f 	.word	0x0801208f
 8012070:	080120b5 	.word	0x080120b5
 8012074:	080120b5 	.word	0x080120b5
 8012078:	080120b5 	.word	0x080120b5
 801207c:	08012097 	.word	0x08012097
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012080:	f7fc fcea 	bl	800ea58 <HAL_RCC_GetPCLK2Freq>
 8012084:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012086:	e01b      	b.n	80120c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012088:	4b08      	ldr	r3, [pc, #32]	; (80120ac <UART_SetConfig+0x2f8>)
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801208c:	e018      	b.n	80120c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801208e:	f7fc fc4d 	bl	800e92c <HAL_RCC_GetSysClockFreq>
 8012092:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012094:	e014      	b.n	80120c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801209a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801209c:	e010      	b.n	80120c0 <UART_SetConfig+0x30c>
 801209e:	bf00      	nop
 80120a0:	cfff69f3 	.word	0xcfff69f3
 80120a4:	40008000 	.word	0x40008000
 80120a8:	40013800 	.word	0x40013800
 80120ac:	00f42400 	.word	0x00f42400
 80120b0:	080184dc 	.word	0x080184dc
      default:
        pclk = 0U;
 80120b4:	2300      	movs	r3, #0
 80120b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80120be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f000 8084 	beq.w	80121d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120cc:	4a4b      	ldr	r2, [pc, #300]	; (80121fc <UART_SetConfig+0x448>)
 80120ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120d2:	461a      	mov	r2, r3
 80120d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80120da:	005a      	lsls	r2, r3, #1
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	085b      	lsrs	r3, r3, #1
 80120e2:	441a      	add	r2, r3
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80120ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	2b0f      	cmp	r3, #15
 80120f2:	d916      	bls.n	8012122 <UART_SetConfig+0x36e>
 80120f4:	6a3b      	ldr	r3, [r7, #32]
 80120f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120fa:	d212      	bcs.n	8012122 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	f023 030f 	bic.w	r3, r3, #15
 8012104:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	085b      	lsrs	r3, r3, #1
 801210a:	b29b      	uxth	r3, r3
 801210c:	f003 0307 	and.w	r3, r3, #7
 8012110:	b29a      	uxth	r2, r3
 8012112:	8bfb      	ldrh	r3, [r7, #30]
 8012114:	4313      	orrs	r3, r2
 8012116:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	8bfa      	ldrh	r2, [r7, #30]
 801211e:	60da      	str	r2, [r3, #12]
 8012120:	e056      	b.n	80121d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012122:	2301      	movs	r3, #1
 8012124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012128:	e052      	b.n	80121d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801212a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801212e:	3b01      	subs	r3, #1
 8012130:	2b07      	cmp	r3, #7
 8012132:	d822      	bhi.n	801217a <UART_SetConfig+0x3c6>
 8012134:	a201      	add	r2, pc, #4	; (adr r2, 801213c <UART_SetConfig+0x388>)
 8012136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801213a:	bf00      	nop
 801213c:	0801215d 	.word	0x0801215d
 8012140:	08012165 	.word	0x08012165
 8012144:	0801217b 	.word	0x0801217b
 8012148:	0801216b 	.word	0x0801216b
 801214c:	0801217b 	.word	0x0801217b
 8012150:	0801217b 	.word	0x0801217b
 8012154:	0801217b 	.word	0x0801217b
 8012158:	08012173 	.word	0x08012173
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801215c:	f7fc fc7c 	bl	800ea58 <HAL_RCC_GetPCLK2Freq>
 8012160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012162:	e010      	b.n	8012186 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012164:	4b26      	ldr	r3, [pc, #152]	; (8012200 <UART_SetConfig+0x44c>)
 8012166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012168:	e00d      	b.n	8012186 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801216a:	f7fc fbdf 	bl	800e92c <HAL_RCC_GetSysClockFreq>
 801216e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012170:	e009      	b.n	8012186 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012178:	e005      	b.n	8012186 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801217e:	2301      	movs	r3, #1
 8012180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012184:	bf00      	nop
    }

    if (pclk != 0U)
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	2b00      	cmp	r3, #0
 801218a:	d021      	beq.n	80121d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012190:	4a1a      	ldr	r2, [pc, #104]	; (80121fc <UART_SetConfig+0x448>)
 8012192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012196:	461a      	mov	r2, r3
 8012198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219a:	fbb3 f2f2 	udiv	r2, r3, r2
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	085b      	lsrs	r3, r3, #1
 80121a4:	441a      	add	r2, r3
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80121ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b0f      	cmp	r3, #15
 80121b4:	d909      	bls.n	80121ca <UART_SetConfig+0x416>
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121bc:	d205      	bcs.n	80121ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60da      	str	r2, [r3, #12]
 80121c8:	e002      	b.n	80121d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80121ca:	2301      	movs	r3, #1
 80121cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	2201      	movs	r2, #1
 80121dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	2200      	movs	r2, #0
 80121e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	2200      	movs	r2, #0
 80121ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80121ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3730      	adds	r7, #48	; 0x30
 80121f4:	46bd      	mov	sp, r7
 80121f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80121fa:	bf00      	nop
 80121fc:	080184dc 	.word	0x080184dc
 8012200:	00f42400 	.word	0x00f42400

08012204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00a      	beq.n	801222e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	430a      	orrs	r2, r1
 801222c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012232:	f003 0302 	and.w	r3, r3, #2
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00a      	beq.n	8012250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	430a      	orrs	r2, r1
 801224e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012254:	f003 0304 	and.w	r3, r3, #4
 8012258:	2b00      	cmp	r3, #0
 801225a:	d00a      	beq.n	8012272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	430a      	orrs	r2, r1
 8012270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012276:	f003 0308 	and.w	r3, r3, #8
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00a      	beq.n	8012294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	430a      	orrs	r2, r1
 8012292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012298:	f003 0310 	and.w	r3, r3, #16
 801229c:	2b00      	cmp	r3, #0
 801229e:	d00a      	beq.n	80122b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	430a      	orrs	r2, r1
 80122b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122ba:	f003 0320 	and.w	r3, r3, #32
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d00a      	beq.n	80122d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	430a      	orrs	r2, r1
 80122d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d01a      	beq.n	801231a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	430a      	orrs	r2, r1
 80122f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012302:	d10a      	bne.n	801231a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	430a      	orrs	r2, r1
 8012318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00a      	beq.n	801233c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	430a      	orrs	r2, r1
 801233a:	605a      	str	r2, [r3, #4]
  }
}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b098      	sub	sp, #96	; 0x60
 801234c:	af02      	add	r7, sp, #8
 801234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012358:	f7fa fb76 	bl	800ca48 <HAL_GetTick>
 801235c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	f003 0308 	and.w	r3, r3, #8
 8012368:	2b08      	cmp	r3, #8
 801236a:	d12f      	bne.n	80123cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801236c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012374:	2200      	movs	r2, #0
 8012376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 f88e 	bl	801249c <UART_WaitOnFlagUntilTimeout>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d022      	beq.n	80123cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238e:	e853 3f00 	ldrex	r3, [r3]
 8012392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801239a:	653b      	str	r3, [r7, #80]	; 0x50
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	461a      	mov	r2, r3
 80123a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a4:	647b      	str	r3, [r7, #68]	; 0x44
 80123a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ac:	e841 2300 	strex	r3, r2, [r1]
 80123b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d1e6      	bne.n	8012386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2220      	movs	r2, #32
 80123bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123c8:	2303      	movs	r3, #3
 80123ca:	e063      	b.n	8012494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f003 0304 	and.w	r3, r3, #4
 80123d6:	2b04      	cmp	r3, #4
 80123d8:	d149      	bne.n	801246e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80123de:	9300      	str	r3, [sp, #0]
 80123e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123e2:	2200      	movs	r2, #0
 80123e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f857 	bl	801249c <UART_WaitOnFlagUntilTimeout>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d03c      	beq.n	801246e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	e853 3f00 	ldrex	r3, [r3]
 8012400:	623b      	str	r3, [r7, #32]
   return(result);
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012408:	64fb      	str	r3, [r7, #76]	; 0x4c
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	461a      	mov	r2, r3
 8012410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012412:	633b      	str	r3, [r7, #48]	; 0x30
 8012414:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241a:	e841 2300 	strex	r3, r2, [r1]
 801241e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1e6      	bne.n	80123f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	3308      	adds	r3, #8
 801242c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	e853 3f00 	ldrex	r3, [r3]
 8012434:	60fb      	str	r3, [r7, #12]
   return(result);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f023 0301 	bic.w	r3, r3, #1
 801243c:	64bb      	str	r3, [r7, #72]	; 0x48
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	3308      	adds	r3, #8
 8012444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012446:	61fa      	str	r2, [r7, #28]
 8012448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244a:	69b9      	ldr	r1, [r7, #24]
 801244c:	69fa      	ldr	r2, [r7, #28]
 801244e:	e841 2300 	strex	r3, r2, [r1]
 8012452:	617b      	str	r3, [r7, #20]
   return(result);
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d1e5      	bne.n	8012426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2220      	movs	r2, #32
 801245e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801246a:	2303      	movs	r3, #3
 801246c:	e012      	b.n	8012494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2220      	movs	r2, #32
 8012472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2220      	movs	r2, #32
 801247a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012492:	2300      	movs	r3, #0
}
 8012494:	4618      	mov	r0, r3
 8012496:	3758      	adds	r7, #88	; 0x58
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	603b      	str	r3, [r7, #0]
 80124a8:	4613      	mov	r3, r2
 80124aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80124ac:	e049      	b.n	8012542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b4:	d045      	beq.n	8012542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124b6:	f7fa fac7 	bl	800ca48 <HAL_GetTick>
 80124ba:	4602      	mov	r2, r0
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	69ba      	ldr	r2, [r7, #24]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d302      	bcc.n	80124cc <UART_WaitOnFlagUntilTimeout+0x30>
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d101      	bne.n	80124d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80124cc:	2303      	movs	r3, #3
 80124ce:	e048      	b.n	8012562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f003 0304 	and.w	r3, r3, #4
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d031      	beq.n	8012542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	69db      	ldr	r3, [r3, #28]
 80124e4:	f003 0308 	and.w	r3, r3, #8
 80124e8:	2b08      	cmp	r3, #8
 80124ea:	d110      	bne.n	801250e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2208      	movs	r2, #8
 80124f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80124f4:	68f8      	ldr	r0, [r7, #12]
 80124f6:	f000 f838 	bl	801256a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2208      	movs	r2, #8
 80124fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	2200      	movs	r2, #0
 8012506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801250a:	2301      	movs	r3, #1
 801250c:	e029      	b.n	8012562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	69db      	ldr	r3, [r3, #28]
 8012514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801251c:	d111      	bne.n	8012542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f000 f81e 	bl	801256a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2220      	movs	r2, #32
 8012532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2200      	movs	r2, #0
 801253a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801253e:	2303      	movs	r3, #3
 8012540:	e00f      	b.n	8012562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	69da      	ldr	r2, [r3, #28]
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	4013      	ands	r3, r2
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	429a      	cmp	r2, r3
 8012550:	bf0c      	ite	eq
 8012552:	2301      	moveq	r3, #1
 8012554:	2300      	movne	r3, #0
 8012556:	b2db      	uxtb	r3, r3
 8012558:	461a      	mov	r2, r3
 801255a:	79fb      	ldrb	r3, [r7, #7]
 801255c:	429a      	cmp	r2, r3
 801255e:	d0a6      	beq.n	80124ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801256a:	b480      	push	{r7}
 801256c:	b095      	sub	sp, #84	; 0x54
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801257a:	e853 3f00 	ldrex	r3, [r3]
 801257e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	461a      	mov	r2, r3
 801258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012590:	643b      	str	r3, [r7, #64]	; 0x40
 8012592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012598:	e841 2300 	strex	r3, r2, [r1]
 801259c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d1e6      	bne.n	8012572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	3308      	adds	r3, #8
 80125aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ac:	6a3b      	ldr	r3, [r7, #32]
 80125ae:	e853 3f00 	ldrex	r3, [r3]
 80125b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80125ba:	f023 0301 	bic.w	r3, r3, #1
 80125be:	64bb      	str	r3, [r7, #72]	; 0x48
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3308      	adds	r3, #8
 80125c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80125ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80125ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125d0:	e841 2300 	strex	r3, r2, [r1]
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80125d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d1e3      	bne.n	80125a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	d118      	bne.n	8012616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	e853 3f00 	ldrex	r3, [r3]
 80125f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	f023 0310 	bic.w	r3, r3, #16
 80125f8:	647b      	str	r3, [r7, #68]	; 0x44
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	461a      	mov	r2, r3
 8012600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012602:	61bb      	str	r3, [r7, #24]
 8012604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012606:	6979      	ldr	r1, [r7, #20]
 8012608:	69ba      	ldr	r2, [r7, #24]
 801260a:	e841 2300 	strex	r3, r2, [r1]
 801260e:	613b      	str	r3, [r7, #16]
   return(result);
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1e6      	bne.n	80125e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2220      	movs	r2, #32
 801261a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	675a      	str	r2, [r3, #116]	; 0x74
}
 801262a:	bf00      	nop
 801262c:	3754      	adds	r7, #84	; 0x54
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b084      	sub	sp, #16
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2200      	movs	r2, #0
 8012648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2200      	movs	r2, #0
 8012650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f7ff fb97 	bl	8011d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801265a:	bf00      	nop
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012662:	b580      	push	{r7, lr}
 8012664:	b088      	sub	sp, #32
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	e853 3f00 	ldrex	r3, [r3]
 8012676:	60bb      	str	r3, [r7, #8]
   return(result);
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801267e:	61fb      	str	r3, [r7, #28]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	461a      	mov	r2, r3
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	61bb      	str	r3, [r7, #24]
 801268a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801268c:	6979      	ldr	r1, [r7, #20]
 801268e:	69ba      	ldr	r2, [r7, #24]
 8012690:	e841 2300 	strex	r3, r2, [r1]
 8012694:	613b      	str	r3, [r7, #16]
   return(result);
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1e6      	bne.n	801266a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2220      	movs	r2, #32
 80126a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7ff fb62 	bl	8011d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126b0:	bf00      	nop
 80126b2:	3720      	adds	r7, #32
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80126c0:	bf00      	nop
 80126c2:	370c      	adds	r7, #12
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr

080126cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80126d4:	bf00      	nop
 80126d6:	370c      	adds	r7, #12
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80126e8:	bf00      	nop
 80126ea:	370c      	adds	r7, #12
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr

080126f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b085      	sub	sp, #20
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012702:	2b01      	cmp	r3, #1
 8012704:	d101      	bne.n	801270a <HAL_UARTEx_DisableFifoMode+0x16>
 8012706:	2302      	movs	r3, #2
 8012708:	e027      	b.n	801275a <HAL_UARTEx_DisableFifoMode+0x66>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2224      	movs	r2, #36	; 0x24
 8012716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f022 0201 	bic.w	r2, r2, #1
 8012730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2220      	movs	r2, #32
 801274c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012766:	b580      	push	{r7, lr}
 8012768:	b084      	sub	sp, #16
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
 801276e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012776:	2b01      	cmp	r3, #1
 8012778:	d101      	bne.n	801277e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801277a:	2302      	movs	r3, #2
 801277c:	e02d      	b.n	80127da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2224      	movs	r2, #36	; 0x24
 801278a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f022 0201 	bic.w	r2, r2, #1
 80127a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	683a      	ldr	r2, [r7, #0]
 80127b6:	430a      	orrs	r2, r1
 80127b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 f850 	bl	8012860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2220      	movs	r2, #32
 80127cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127d8:	2300      	movs	r3, #0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b084      	sub	sp, #16
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	d101      	bne.n	80127fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80127f6:	2302      	movs	r3, #2
 80127f8:	e02d      	b.n	8012856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2224      	movs	r2, #36	; 0x24
 8012806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f022 0201 	bic.w	r2, r2, #1
 8012820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	430a      	orrs	r2, r1
 8012834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f812 	bl	8012860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2220      	movs	r2, #32
 8012848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2200      	movs	r2, #0
 8012850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012854:	2300      	movs	r3, #0
}
 8012856:	4618      	mov	r0, r3
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
	...

08012860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012860:	b480      	push	{r7}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801286c:	2b00      	cmp	r3, #0
 801286e:	d108      	bne.n	8012882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2201      	movs	r2, #1
 8012874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2201      	movs	r2, #1
 801287c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012880:	e031      	b.n	80128e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012882:	2308      	movs	r3, #8
 8012884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012886:	2308      	movs	r3, #8
 8012888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	0e5b      	lsrs	r3, r3, #25
 8012892:	b2db      	uxtb	r3, r3
 8012894:	f003 0307 	and.w	r3, r3, #7
 8012898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	689b      	ldr	r3, [r3, #8]
 80128a0:	0f5b      	lsrs	r3, r3, #29
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	f003 0307 	and.w	r3, r3, #7
 80128a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128aa:	7bbb      	ldrb	r3, [r7, #14]
 80128ac:	7b3a      	ldrb	r2, [r7, #12]
 80128ae:	4911      	ldr	r1, [pc, #68]	; (80128f4 <UARTEx_SetNbDataToProcess+0x94>)
 80128b0:	5c8a      	ldrb	r2, [r1, r2]
 80128b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80128b6:	7b3a      	ldrb	r2, [r7, #12]
 80128b8:	490f      	ldr	r1, [pc, #60]	; (80128f8 <UARTEx_SetNbDataToProcess+0x98>)
 80128ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80128c0:	b29a      	uxth	r2, r3
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	7b7a      	ldrb	r2, [r7, #13]
 80128cc:	4909      	ldr	r1, [pc, #36]	; (80128f4 <UARTEx_SetNbDataToProcess+0x94>)
 80128ce:	5c8a      	ldrb	r2, [r1, r2]
 80128d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80128d4:	7b7a      	ldrb	r2, [r7, #13]
 80128d6:	4908      	ldr	r1, [pc, #32]	; (80128f8 <UARTEx_SetNbDataToProcess+0x98>)
 80128d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80128da:	fb93 f3f2 	sdiv	r3, r3, r2
 80128de:	b29a      	uxth	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80128e6:	bf00      	nop
 80128e8:	3714      	adds	r7, #20
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	080184f4 	.word	0x080184f4
 80128f8:	080184fc 	.word	0x080184fc

080128fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012904:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012908:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012910:	b29a      	uxth	r2, r3
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	b29b      	uxth	r3, r3
 8012916:	43db      	mvns	r3, r3
 8012918:	b29b      	uxth	r3, r3
 801291a:	4013      	ands	r3, r2
 801291c:	b29a      	uxth	r2, r3
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr

08012932 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012932:	b084      	sub	sp, #16
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	f107 0014 	add.w	r0, r7, #20
 8012940:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2200      	movs	r2, #0
 8012950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2200      	movs	r2, #0
 8012958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2200      	movs	r2, #0
 8012960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012964:	2300      	movs	r3, #0
}
 8012966:	4618      	mov	r0, r3
 8012968:	370c      	adds	r7, #12
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	b004      	add	sp, #16
 8012972:	4770      	bx	lr

08012974 <__errno>:
 8012974:	4b01      	ldr	r3, [pc, #4]	; (801297c <__errno+0x8>)
 8012976:	6818      	ldr	r0, [r3, #0]
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	20000020 	.word	0x20000020

08012980 <__libc_init_array>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4d0d      	ldr	r5, [pc, #52]	; (80129b8 <__libc_init_array+0x38>)
 8012984:	4c0d      	ldr	r4, [pc, #52]	; (80129bc <__libc_init_array+0x3c>)
 8012986:	1b64      	subs	r4, r4, r5
 8012988:	10a4      	asrs	r4, r4, #2
 801298a:	2600      	movs	r6, #0
 801298c:	42a6      	cmp	r6, r4
 801298e:	d109      	bne.n	80129a4 <__libc_init_array+0x24>
 8012990:	4d0b      	ldr	r5, [pc, #44]	; (80129c0 <__libc_init_array+0x40>)
 8012992:	4c0c      	ldr	r4, [pc, #48]	; (80129c4 <__libc_init_array+0x44>)
 8012994:	f004 fb04 	bl	8016fa0 <_init>
 8012998:	1b64      	subs	r4, r4, r5
 801299a:	10a4      	asrs	r4, r4, #2
 801299c:	2600      	movs	r6, #0
 801299e:	42a6      	cmp	r6, r4
 80129a0:	d105      	bne.n	80129ae <__libc_init_array+0x2e>
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80129a8:	4798      	blx	r3
 80129aa:	3601      	adds	r6, #1
 80129ac:	e7ee      	b.n	801298c <__libc_init_array+0xc>
 80129ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80129b2:	4798      	blx	r3
 80129b4:	3601      	adds	r6, #1
 80129b6:	e7f2      	b.n	801299e <__libc_init_array+0x1e>
 80129b8:	08018ab8 	.word	0x08018ab8
 80129bc:	08018ab8 	.word	0x08018ab8
 80129c0:	08018ab8 	.word	0x08018ab8
 80129c4:	08018abc 	.word	0x08018abc

080129c8 <localtime>:
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	4b0b      	ldr	r3, [pc, #44]	; (80129f8 <localtime+0x30>)
 80129cc:	681d      	ldr	r5, [r3, #0]
 80129ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80129d0:	4604      	mov	r4, r0
 80129d2:	b953      	cbnz	r3, 80129ea <localtime+0x22>
 80129d4:	2024      	movs	r0, #36	; 0x24
 80129d6:	f000 f909 	bl	8012bec <malloc>
 80129da:	4602      	mov	r2, r0
 80129dc:	63e8      	str	r0, [r5, #60]	; 0x3c
 80129de:	b920      	cbnz	r0, 80129ea <localtime+0x22>
 80129e0:	4b06      	ldr	r3, [pc, #24]	; (80129fc <localtime+0x34>)
 80129e2:	4807      	ldr	r0, [pc, #28]	; (8012a00 <localtime+0x38>)
 80129e4:	2132      	movs	r1, #50	; 0x32
 80129e6:	f001 fb8d 	bl	8014104 <__assert_func>
 80129ea:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80129ec:	4620      	mov	r0, r4
 80129ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f2:	f000 b807 	b.w	8012a04 <localtime_r>
 80129f6:	bf00      	nop
 80129f8:	20000020 	.word	0x20000020
 80129fc:	08018508 	.word	0x08018508
 8012a00:	0801851f 	.word	0x0801851f

08012a04 <localtime_r>:
 8012a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012a08:	4680      	mov	r8, r0
 8012a0a:	9101      	str	r1, [sp, #4]
 8012a0c:	f002 fa7c 	bl	8014f08 <__gettzinfo>
 8012a10:	9901      	ldr	r1, [sp, #4]
 8012a12:	4605      	mov	r5, r0
 8012a14:	4640      	mov	r0, r8
 8012a16:	f002 fa7b 	bl	8014f10 <gmtime_r>
 8012a1a:	6943      	ldr	r3, [r0, #20]
 8012a1c:	0799      	lsls	r1, r3, #30
 8012a1e:	4604      	mov	r4, r0
 8012a20:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8012a24:	d105      	bne.n	8012a32 <localtime_r+0x2e>
 8012a26:	2264      	movs	r2, #100	; 0x64
 8012a28:	fb97 f3f2 	sdiv	r3, r7, r2
 8012a2c:	fb02 7313 	mls	r3, r2, r3, r7
 8012a30:	bb73      	cbnz	r3, 8012a90 <localtime_r+0x8c>
 8012a32:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012a36:	fb97 f6f3 	sdiv	r6, r7, r3
 8012a3a:	fb03 7616 	mls	r6, r3, r6, r7
 8012a3e:	fab6 f386 	clz	r3, r6
 8012a42:	095b      	lsrs	r3, r3, #5
 8012a44:	4e67      	ldr	r6, [pc, #412]	; (8012be4 <localtime_r+0x1e0>)
 8012a46:	2230      	movs	r2, #48	; 0x30
 8012a48:	fb02 6603 	mla	r6, r2, r3, r6
 8012a4c:	f001 f9c8 	bl	8013de0 <__tz_lock>
 8012a50:	f001 f9d2 	bl	8013df8 <_tzset_unlocked>
 8012a54:	4b64      	ldr	r3, [pc, #400]	; (8012be8 <localtime_r+0x1e4>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	b34b      	cbz	r3, 8012aae <localtime_r+0xaa>
 8012a5a:	686b      	ldr	r3, [r5, #4]
 8012a5c:	42bb      	cmp	r3, r7
 8012a5e:	d119      	bne.n	8012a94 <localtime_r+0x90>
 8012a60:	682f      	ldr	r7, [r5, #0]
 8012a62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012a66:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8012a6a:	b9df      	cbnz	r7, 8012aa4 <localtime_r+0xa0>
 8012a6c:	4282      	cmp	r2, r0
 8012a6e:	eb73 0101 	sbcs.w	r1, r3, r1
 8012a72:	da23      	bge.n	8012abc <localtime_r+0xb8>
 8012a74:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8012a78:	4282      	cmp	r2, r0
 8012a7a:	eb73 0701 	sbcs.w	r7, r3, r1
 8012a7e:	bfb4      	ite	lt
 8012a80:	2701      	movlt	r7, #1
 8012a82:	2700      	movge	r7, #0
 8012a84:	4282      	cmp	r2, r0
 8012a86:	418b      	sbcs	r3, r1
 8012a88:	6227      	str	r7, [r4, #32]
 8012a8a:	db19      	blt.n	8012ac0 <localtime_r+0xbc>
 8012a8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012a8e:	e018      	b.n	8012ac2 <localtime_r+0xbe>
 8012a90:	2301      	movs	r3, #1
 8012a92:	e7d7      	b.n	8012a44 <localtime_r+0x40>
 8012a94:	4638      	mov	r0, r7
 8012a96:	f001 f8f9 	bl	8013c8c <__tzcalc_limits>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d1e0      	bne.n	8012a60 <localtime_r+0x5c>
 8012a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa2:	e004      	b.n	8012aae <localtime_r+0xaa>
 8012aa4:	4282      	cmp	r2, r0
 8012aa6:	eb73 0101 	sbcs.w	r1, r3, r1
 8012aaa:	da02      	bge.n	8012ab2 <localtime_r+0xae>
 8012aac:	2300      	movs	r3, #0
 8012aae:	6223      	str	r3, [r4, #32]
 8012ab0:	e7ec      	b.n	8012a8c <localtime_r+0x88>
 8012ab2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8012ab6:	4282      	cmp	r2, r0
 8012ab8:	418b      	sbcs	r3, r1
 8012aba:	daf7      	bge.n	8012aac <localtime_r+0xa8>
 8012abc:	2301      	movs	r3, #1
 8012abe:	6223      	str	r3, [r4, #32]
 8012ac0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8012ac2:	6861      	ldr	r1, [r4, #4]
 8012ac4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8012ac8:	203c      	movs	r0, #60	; 0x3c
 8012aca:	fb93 f5f2 	sdiv	r5, r3, r2
 8012ace:	fb02 3315 	mls	r3, r2, r5, r3
 8012ad2:	fb93 f2f0 	sdiv	r2, r3, r0
 8012ad6:	fb00 3012 	mls	r0, r0, r2, r3
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	1a89      	subs	r1, r1, r2
 8012ade:	68a2      	ldr	r2, [r4, #8]
 8012ae0:	6061      	str	r1, [r4, #4]
 8012ae2:	1a1b      	subs	r3, r3, r0
 8012ae4:	1b52      	subs	r2, r2, r5
 8012ae6:	2b3b      	cmp	r3, #59	; 0x3b
 8012ae8:	6023      	str	r3, [r4, #0]
 8012aea:	60a2      	str	r2, [r4, #8]
 8012aec:	dd35      	ble.n	8012b5a <localtime_r+0x156>
 8012aee:	3101      	adds	r1, #1
 8012af0:	6061      	str	r1, [r4, #4]
 8012af2:	3b3c      	subs	r3, #60	; 0x3c
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	6863      	ldr	r3, [r4, #4]
 8012af8:	2b3b      	cmp	r3, #59	; 0x3b
 8012afa:	dd34      	ble.n	8012b66 <localtime_r+0x162>
 8012afc:	3201      	adds	r2, #1
 8012afe:	60a2      	str	r2, [r4, #8]
 8012b00:	3b3c      	subs	r3, #60	; 0x3c
 8012b02:	6063      	str	r3, [r4, #4]
 8012b04:	68a3      	ldr	r3, [r4, #8]
 8012b06:	2b17      	cmp	r3, #23
 8012b08:	dd33      	ble.n	8012b72 <localtime_r+0x16e>
 8012b0a:	69e2      	ldr	r2, [r4, #28]
 8012b0c:	3201      	adds	r2, #1
 8012b0e:	61e2      	str	r2, [r4, #28]
 8012b10:	69a2      	ldr	r2, [r4, #24]
 8012b12:	3201      	adds	r2, #1
 8012b14:	2a06      	cmp	r2, #6
 8012b16:	bfc8      	it	gt
 8012b18:	2200      	movgt	r2, #0
 8012b1a:	61a2      	str	r2, [r4, #24]
 8012b1c:	68e2      	ldr	r2, [r4, #12]
 8012b1e:	3b18      	subs	r3, #24
 8012b20:	3201      	adds	r2, #1
 8012b22:	60a3      	str	r3, [r4, #8]
 8012b24:	6923      	ldr	r3, [r4, #16]
 8012b26:	60e2      	str	r2, [r4, #12]
 8012b28:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012b2c:	428a      	cmp	r2, r1
 8012b2e:	dd0e      	ble.n	8012b4e <localtime_r+0x14a>
 8012b30:	2b0b      	cmp	r3, #11
 8012b32:	eba2 0201 	sub.w	r2, r2, r1
 8012b36:	60e2      	str	r2, [r4, #12]
 8012b38:	f103 0201 	add.w	r2, r3, #1
 8012b3c:	bf09      	itett	eq
 8012b3e:	6963      	ldreq	r3, [r4, #20]
 8012b40:	6122      	strne	r2, [r4, #16]
 8012b42:	2200      	moveq	r2, #0
 8012b44:	3301      	addeq	r3, #1
 8012b46:	bf02      	ittt	eq
 8012b48:	6122      	streq	r2, [r4, #16]
 8012b4a:	6163      	streq	r3, [r4, #20]
 8012b4c:	61e2      	streq	r2, [r4, #28]
 8012b4e:	f001 f94d 	bl	8013dec <__tz_unlock>
 8012b52:	4620      	mov	r0, r4
 8012b54:	b002      	add	sp, #8
 8012b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	dacb      	bge.n	8012af6 <localtime_r+0xf2>
 8012b5e:	3901      	subs	r1, #1
 8012b60:	6061      	str	r1, [r4, #4]
 8012b62:	333c      	adds	r3, #60	; 0x3c
 8012b64:	e7c6      	b.n	8012af4 <localtime_r+0xf0>
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	dacc      	bge.n	8012b04 <localtime_r+0x100>
 8012b6a:	3a01      	subs	r2, #1
 8012b6c:	60a2      	str	r2, [r4, #8]
 8012b6e:	333c      	adds	r3, #60	; 0x3c
 8012b70:	e7c7      	b.n	8012b02 <localtime_r+0xfe>
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	daeb      	bge.n	8012b4e <localtime_r+0x14a>
 8012b76:	69e2      	ldr	r2, [r4, #28]
 8012b78:	3a01      	subs	r2, #1
 8012b7a:	61e2      	str	r2, [r4, #28]
 8012b7c:	69a2      	ldr	r2, [r4, #24]
 8012b7e:	3a01      	subs	r2, #1
 8012b80:	bf48      	it	mi
 8012b82:	2206      	movmi	r2, #6
 8012b84:	61a2      	str	r2, [r4, #24]
 8012b86:	68e2      	ldr	r2, [r4, #12]
 8012b88:	3318      	adds	r3, #24
 8012b8a:	3a01      	subs	r2, #1
 8012b8c:	60e2      	str	r2, [r4, #12]
 8012b8e:	60a3      	str	r3, [r4, #8]
 8012b90:	2a00      	cmp	r2, #0
 8012b92:	d1dc      	bne.n	8012b4e <localtime_r+0x14a>
 8012b94:	6923      	ldr	r3, [r4, #16]
 8012b96:	3b01      	subs	r3, #1
 8012b98:	d405      	bmi.n	8012ba6 <localtime_r+0x1a2>
 8012b9a:	6123      	str	r3, [r4, #16]
 8012b9c:	6923      	ldr	r3, [r4, #16]
 8012b9e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012ba2:	60e3      	str	r3, [r4, #12]
 8012ba4:	e7d3      	b.n	8012b4e <localtime_r+0x14a>
 8012ba6:	230b      	movs	r3, #11
 8012ba8:	6123      	str	r3, [r4, #16]
 8012baa:	6963      	ldr	r3, [r4, #20]
 8012bac:	1e5a      	subs	r2, r3, #1
 8012bae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012bb2:	6162      	str	r2, [r4, #20]
 8012bb4:	079a      	lsls	r2, r3, #30
 8012bb6:	d105      	bne.n	8012bc4 <localtime_r+0x1c0>
 8012bb8:	2164      	movs	r1, #100	; 0x64
 8012bba:	fb93 f2f1 	sdiv	r2, r3, r1
 8012bbe:	fb01 3212 	mls	r2, r1, r2, r3
 8012bc2:	b962      	cbnz	r2, 8012bde <localtime_r+0x1da>
 8012bc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012bc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8012bcc:	fb02 3311 	mls	r3, r2, r1, r3
 8012bd0:	fab3 f383 	clz	r3, r3
 8012bd4:	095b      	lsrs	r3, r3, #5
 8012bd6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012bda:	61e3      	str	r3, [r4, #28]
 8012bdc:	e7de      	b.n	8012b9c <localtime_r+0x198>
 8012bde:	2301      	movs	r3, #1
 8012be0:	e7f9      	b.n	8012bd6 <localtime_r+0x1d2>
 8012be2:	bf00      	nop
 8012be4:	080185dc 	.word	0x080185dc
 8012be8:	2000a7a4 	.word	0x2000a7a4

08012bec <malloc>:
 8012bec:	4b02      	ldr	r3, [pc, #8]	; (8012bf8 <malloc+0xc>)
 8012bee:	4601      	mov	r1, r0
 8012bf0:	6818      	ldr	r0, [r3, #0]
 8012bf2:	f000 baff 	b.w	80131f4 <_malloc_r>
 8012bf6:	bf00      	nop
 8012bf8:	20000020 	.word	0x20000020

08012bfc <free>:
 8012bfc:	4b02      	ldr	r3, [pc, #8]	; (8012c08 <free+0xc>)
 8012bfe:	4601      	mov	r1, r0
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	f000 ba8b 	b.w	801311c <_free_r>
 8012c06:	bf00      	nop
 8012c08:	20000020 	.word	0x20000020

08012c0c <memcpy>:
 8012c0c:	440a      	add	r2, r1
 8012c0e:	4291      	cmp	r1, r2
 8012c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c14:	d100      	bne.n	8012c18 <memcpy+0xc>
 8012c16:	4770      	bx	lr
 8012c18:	b510      	push	{r4, lr}
 8012c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c22:	4291      	cmp	r1, r2
 8012c24:	d1f9      	bne.n	8012c1a <memcpy+0xe>
 8012c26:	bd10      	pop	{r4, pc}

08012c28 <memset>:
 8012c28:	4402      	add	r2, r0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d100      	bne.n	8012c32 <memset+0xa>
 8012c30:	4770      	bx	lr
 8012c32:	f803 1b01 	strb.w	r1, [r3], #1
 8012c36:	e7f9      	b.n	8012c2c <memset+0x4>

08012c38 <validate_structure>:
 8012c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c3a:	6801      	ldr	r1, [r0, #0]
 8012c3c:	293b      	cmp	r1, #59	; 0x3b
 8012c3e:	4604      	mov	r4, r0
 8012c40:	d911      	bls.n	8012c66 <validate_structure+0x2e>
 8012c42:	223c      	movs	r2, #60	; 0x3c
 8012c44:	4668      	mov	r0, sp
 8012c46:	f001 fa7b 	bl	8014140 <div>
 8012c4a:	9a01      	ldr	r2, [sp, #4]
 8012c4c:	6863      	ldr	r3, [r4, #4]
 8012c4e:	9900      	ldr	r1, [sp, #0]
 8012c50:	2a00      	cmp	r2, #0
 8012c52:	440b      	add	r3, r1
 8012c54:	6063      	str	r3, [r4, #4]
 8012c56:	bfbb      	ittet	lt
 8012c58:	323c      	addlt	r2, #60	; 0x3c
 8012c5a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012c5e:	6022      	strge	r2, [r4, #0]
 8012c60:	6022      	strlt	r2, [r4, #0]
 8012c62:	bfb8      	it	lt
 8012c64:	6063      	strlt	r3, [r4, #4]
 8012c66:	6861      	ldr	r1, [r4, #4]
 8012c68:	293b      	cmp	r1, #59	; 0x3b
 8012c6a:	d911      	bls.n	8012c90 <validate_structure+0x58>
 8012c6c:	223c      	movs	r2, #60	; 0x3c
 8012c6e:	4668      	mov	r0, sp
 8012c70:	f001 fa66 	bl	8014140 <div>
 8012c74:	9a01      	ldr	r2, [sp, #4]
 8012c76:	68a3      	ldr	r3, [r4, #8]
 8012c78:	9900      	ldr	r1, [sp, #0]
 8012c7a:	2a00      	cmp	r2, #0
 8012c7c:	440b      	add	r3, r1
 8012c7e:	60a3      	str	r3, [r4, #8]
 8012c80:	bfbb      	ittet	lt
 8012c82:	323c      	addlt	r2, #60	; 0x3c
 8012c84:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012c88:	6062      	strge	r2, [r4, #4]
 8012c8a:	6062      	strlt	r2, [r4, #4]
 8012c8c:	bfb8      	it	lt
 8012c8e:	60a3      	strlt	r3, [r4, #8]
 8012c90:	68a1      	ldr	r1, [r4, #8]
 8012c92:	2917      	cmp	r1, #23
 8012c94:	d911      	bls.n	8012cba <validate_structure+0x82>
 8012c96:	2218      	movs	r2, #24
 8012c98:	4668      	mov	r0, sp
 8012c9a:	f001 fa51 	bl	8014140 <div>
 8012c9e:	9a01      	ldr	r2, [sp, #4]
 8012ca0:	68e3      	ldr	r3, [r4, #12]
 8012ca2:	9900      	ldr	r1, [sp, #0]
 8012ca4:	2a00      	cmp	r2, #0
 8012ca6:	440b      	add	r3, r1
 8012ca8:	60e3      	str	r3, [r4, #12]
 8012caa:	bfbb      	ittet	lt
 8012cac:	3218      	addlt	r2, #24
 8012cae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012cb2:	60a2      	strge	r2, [r4, #8]
 8012cb4:	60a2      	strlt	r2, [r4, #8]
 8012cb6:	bfb8      	it	lt
 8012cb8:	60e3      	strlt	r3, [r4, #12]
 8012cba:	6921      	ldr	r1, [r4, #16]
 8012cbc:	290b      	cmp	r1, #11
 8012cbe:	d911      	bls.n	8012ce4 <validate_structure+0xac>
 8012cc0:	220c      	movs	r2, #12
 8012cc2:	4668      	mov	r0, sp
 8012cc4:	f001 fa3c 	bl	8014140 <div>
 8012cc8:	9a01      	ldr	r2, [sp, #4]
 8012cca:	6963      	ldr	r3, [r4, #20]
 8012ccc:	9900      	ldr	r1, [sp, #0]
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	440b      	add	r3, r1
 8012cd2:	6163      	str	r3, [r4, #20]
 8012cd4:	bfbb      	ittet	lt
 8012cd6:	320c      	addlt	r2, #12
 8012cd8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012cdc:	6122      	strge	r2, [r4, #16]
 8012cde:	6122      	strlt	r2, [r4, #16]
 8012ce0:	bfb8      	it	lt
 8012ce2:	6163      	strlt	r3, [r4, #20]
 8012ce4:	6963      	ldr	r3, [r4, #20]
 8012ce6:	0798      	lsls	r0, r3, #30
 8012ce8:	d120      	bne.n	8012d2c <validate_structure+0xf4>
 8012cea:	2164      	movs	r1, #100	; 0x64
 8012cec:	fb93 f2f1 	sdiv	r2, r3, r1
 8012cf0:	fb01 3212 	mls	r2, r1, r2, r3
 8012cf4:	b9e2      	cbnz	r2, 8012d30 <validate_structure+0xf8>
 8012cf6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8012cfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012cfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8012d02:	fb02 3311 	mls	r3, r2, r1, r3
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	bf14      	ite	ne
 8012d0a:	231c      	movne	r3, #28
 8012d0c:	231d      	moveq	r3, #29
 8012d0e:	68e2      	ldr	r2, [r4, #12]
 8012d10:	2a00      	cmp	r2, #0
 8012d12:	dc0f      	bgt.n	8012d34 <validate_structure+0xfc>
 8012d14:	4f33      	ldr	r7, [pc, #204]	; (8012de4 <validate_structure+0x1ac>)
 8012d16:	260b      	movs	r6, #11
 8012d18:	2064      	movs	r0, #100	; 0x64
 8012d1a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012d1e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012d22:	f1bc 0f00 	cmp.w	ip, #0
 8012d26:	dd31      	ble.n	8012d8c <validate_structure+0x154>
 8012d28:	b003      	add	sp, #12
 8012d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d2c:	231c      	movs	r3, #28
 8012d2e:	e7ee      	b.n	8012d0e <validate_structure+0xd6>
 8012d30:	231d      	movs	r3, #29
 8012d32:	e7ec      	b.n	8012d0e <validate_structure+0xd6>
 8012d34:	4e2b      	ldr	r6, [pc, #172]	; (8012de4 <validate_structure+0x1ac>)
 8012d36:	2700      	movs	r7, #0
 8012d38:	2064      	movs	r0, #100	; 0x64
 8012d3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012d3e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8012d42:	2a01      	cmp	r2, #1
 8012d44:	bf14      	ite	ne
 8012d46:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8012d4a:	469c      	moveq	ip, r3
 8012d4c:	4561      	cmp	r1, ip
 8012d4e:	ddeb      	ble.n	8012d28 <validate_structure+0xf0>
 8012d50:	3201      	adds	r2, #1
 8012d52:	eba1 010c 	sub.w	r1, r1, ip
 8012d56:	2a0c      	cmp	r2, #12
 8012d58:	60e1      	str	r1, [r4, #12]
 8012d5a:	6122      	str	r2, [r4, #16]
 8012d5c:	d1ef      	bne.n	8012d3e <validate_structure+0x106>
 8012d5e:	6963      	ldr	r3, [r4, #20]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	0791      	lsls	r1, r2, #30
 8012d64:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8012d68:	d137      	bne.n	8012dda <validate_structure+0x1a2>
 8012d6a:	fb92 f1f0 	sdiv	r1, r2, r0
 8012d6e:	fb00 2211 	mls	r2, r0, r1, r2
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	d133      	bne.n	8012dde <validate_structure+0x1a6>
 8012d76:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012d7a:	fb93 f2f5 	sdiv	r2, r3, r5
 8012d7e:	fb05 3312 	mls	r3, r5, r2, r3
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	bf14      	ite	ne
 8012d86:	231c      	movne	r3, #28
 8012d88:	231d      	moveq	r3, #29
 8012d8a:	e7d8      	b.n	8012d3e <validate_structure+0x106>
 8012d8c:	6921      	ldr	r1, [r4, #16]
 8012d8e:	3901      	subs	r1, #1
 8012d90:	6121      	str	r1, [r4, #16]
 8012d92:	3101      	adds	r1, #1
 8012d94:	d114      	bne.n	8012dc0 <validate_structure+0x188>
 8012d96:	6963      	ldr	r3, [r4, #20]
 8012d98:	1e5a      	subs	r2, r3, #1
 8012d9a:	0791      	lsls	r1, r2, #30
 8012d9c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8012da0:	d117      	bne.n	8012dd2 <validate_structure+0x19a>
 8012da2:	fb92 f1f0 	sdiv	r1, r2, r0
 8012da6:	fb00 2211 	mls	r2, r0, r1, r2
 8012daa:	b9a2      	cbnz	r2, 8012dd6 <validate_structure+0x19e>
 8012dac:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012db0:	fb93 f2f5 	sdiv	r2, r3, r5
 8012db4:	fb05 3312 	mls	r3, r5, r2, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	bf14      	ite	ne
 8012dbc:	231c      	movne	r3, #28
 8012dbe:	231d      	moveq	r3, #29
 8012dc0:	6922      	ldr	r2, [r4, #16]
 8012dc2:	2a01      	cmp	r2, #1
 8012dc4:	bf14      	ite	ne
 8012dc6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8012dca:	461a      	moveq	r2, r3
 8012dcc:	4462      	add	r2, ip
 8012dce:	60e2      	str	r2, [r4, #12]
 8012dd0:	e7a5      	b.n	8012d1e <validate_structure+0xe6>
 8012dd2:	231c      	movs	r3, #28
 8012dd4:	e7f4      	b.n	8012dc0 <validate_structure+0x188>
 8012dd6:	231d      	movs	r3, #29
 8012dd8:	e7f2      	b.n	8012dc0 <validate_structure+0x188>
 8012dda:	231c      	movs	r3, #28
 8012ddc:	e7af      	b.n	8012d3e <validate_structure+0x106>
 8012dde:	231d      	movs	r3, #29
 8012de0:	e7ad      	b.n	8012d3e <validate_structure+0x106>
 8012de2:	bf00      	nop
 8012de4:	0801857c 	.word	0x0801857c

08012de8 <mktime>:
 8012de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dec:	b085      	sub	sp, #20
 8012dee:	4607      	mov	r7, r0
 8012df0:	f002 f88a 	bl	8014f08 <__gettzinfo>
 8012df4:	4681      	mov	r9, r0
 8012df6:	4638      	mov	r0, r7
 8012df8:	f7ff ff1e 	bl	8012c38 <validate_structure>
 8012dfc:	e9d7 4000 	ldrd	r4, r0, [r7]
 8012e00:	233c      	movs	r3, #60	; 0x3c
 8012e02:	fb03 4400 	mla	r4, r3, r0, r4
 8012e06:	68b8      	ldr	r0, [r7, #8]
 8012e08:	4abc      	ldr	r2, [pc, #752]	; (80130fc <mktime+0x314>)
 8012e0a:	697e      	ldr	r6, [r7, #20]
 8012e0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012e10:	fb03 4400 	mla	r4, r3, r0, r4
 8012e14:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8012e18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012e1c:	3d01      	subs	r5, #1
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	4415      	add	r5, r2
 8012e22:	dd11      	ble.n	8012e48 <mktime+0x60>
 8012e24:	07b1      	lsls	r1, r6, #30
 8012e26:	d10f      	bne.n	8012e48 <mktime+0x60>
 8012e28:	2264      	movs	r2, #100	; 0x64
 8012e2a:	fb96 f3f2 	sdiv	r3, r6, r2
 8012e2e:	fb02 6313 	mls	r3, r2, r3, r6
 8012e32:	b943      	cbnz	r3, 8012e46 <mktime+0x5e>
 8012e34:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012e38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012e3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012e40:	fb02 3311 	mls	r3, r2, r1, r3
 8012e44:	b903      	cbnz	r3, 8012e48 <mktime+0x60>
 8012e46:	3501      	adds	r5, #1
 8012e48:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012e4c:	3310      	adds	r3, #16
 8012e4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012e52:	4293      	cmp	r3, r2
 8012e54:	61fd      	str	r5, [r7, #28]
 8012e56:	f200 815d 	bhi.w	8013114 <mktime+0x32c>
 8012e5a:	2e46      	cmp	r6, #70	; 0x46
 8012e5c:	dd71      	ble.n	8012f42 <mktime+0x15a>
 8012e5e:	2346      	movs	r3, #70	; 0x46
 8012e60:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012e64:	2164      	movs	r1, #100	; 0x64
 8012e66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012e6a:	079a      	lsls	r2, r3, #30
 8012e6c:	d163      	bne.n	8012f36 <mktime+0x14e>
 8012e6e:	fb93 f2f1 	sdiv	r2, r3, r1
 8012e72:	fb01 3212 	mls	r2, r1, r2, r3
 8012e76:	2a00      	cmp	r2, #0
 8012e78:	d160      	bne.n	8012f3c <mktime+0x154>
 8012e7a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012e7e:	fb92 fef0 	sdiv	lr, r2, r0
 8012e82:	fb00 221e 	mls	r2, r0, lr, r2
 8012e86:	2a00      	cmp	r2, #0
 8012e88:	bf14      	ite	ne
 8012e8a:	4662      	movne	r2, ip
 8012e8c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012e90:	3301      	adds	r3, #1
 8012e92:	429e      	cmp	r6, r3
 8012e94:	4415      	add	r5, r2
 8012e96:	d1e8      	bne.n	8012e6a <mktime+0x82>
 8012e98:	4b99      	ldr	r3, [pc, #612]	; (8013100 <mktime+0x318>)
 8012e9a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8012e9e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8012ea2:	f000 ff9d 	bl	8013de0 <__tz_lock>
 8012ea6:	f000 ffa7 	bl	8013df8 <_tzset_unlocked>
 8012eaa:	4b96      	ldr	r3, [pc, #600]	; (8013104 <mktime+0x31c>)
 8012eac:	f8d3 b000 	ldr.w	fp, [r3]
 8012eb0:	f1bb 0f00 	cmp.w	fp, #0
 8012eb4:	d039      	beq.n	8012f2a <mktime+0x142>
 8012eb6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8012eba:	6978      	ldr	r0, [r7, #20]
 8012ebc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012ec0:	f1bb 0f01 	cmp.w	fp, #1
 8012ec4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012ec8:	46da      	mov	sl, fp
 8012eca:	bfa8      	it	ge
 8012ecc:	f04f 0a01 	movge.w	sl, #1
 8012ed0:	4283      	cmp	r3, r0
 8012ed2:	d178      	bne.n	8012fc6 <mktime+0x1de>
 8012ed4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8012ed8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012edc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8012ee0:	1a5b      	subs	r3, r3, r1
 8012ee2:	9302      	str	r3, [sp, #8]
 8012ee4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8012ee8:	9303      	str	r3, [sp, #12]
 8012eea:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8012eee:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8012ef2:	9301      	str	r3, [sp, #4]
 8012ef4:	ebb3 0c02 	subs.w	ip, r3, r2
 8012ef8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8012efc:	4564      	cmp	r4, ip
 8012efe:	eb78 0300 	sbcs.w	r3, r8, r0
 8012f02:	da66      	bge.n	8012fd2 <mktime+0x1ea>
 8012f04:	f8d9 3000 	ldr.w	r3, [r9]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d06f      	beq.n	8012fec <mktime+0x204>
 8012f0c:	9b02      	ldr	r3, [sp, #8]
 8012f0e:	429c      	cmp	r4, r3
 8012f10:	9b03      	ldr	r3, [sp, #12]
 8012f12:	eb78 0303 	sbcs.w	r3, r8, r3
 8012f16:	db03      	blt.n	8012f20 <mktime+0x138>
 8012f18:	4564      	cmp	r4, ip
 8012f1a:	eb78 0300 	sbcs.w	r3, r8, r0
 8012f1e:	db6b      	blt.n	8012ff8 <mktime+0x210>
 8012f20:	f1bb 0f00 	cmp.w	fp, #0
 8012f24:	f04f 0b00 	mov.w	fp, #0
 8012f28:	da6b      	bge.n	8013002 <mktime+0x21a>
 8012f2a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8012f2e:	190c      	adds	r4, r1, r4
 8012f30:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8012f34:	e0a9      	b.n	801308a <mktime+0x2a2>
 8012f36:	f240 126d 	movw	r2, #365	; 0x16d
 8012f3a:	e7a9      	b.n	8012e90 <mktime+0xa8>
 8012f3c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012f40:	e7a6      	b.n	8012e90 <mktime+0xa8>
 8012f42:	d0a9      	beq.n	8012e98 <mktime+0xb0>
 8012f44:	2345      	movs	r3, #69	; 0x45
 8012f46:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012f4a:	2164      	movs	r1, #100	; 0x64
 8012f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012f50:	e012      	b.n	8012f78 <mktime+0x190>
 8012f52:	bb62      	cbnz	r2, 8012fae <mktime+0x1c6>
 8012f54:	fb93 f2f1 	sdiv	r2, r3, r1
 8012f58:	fb01 3212 	mls	r2, r1, r2, r3
 8012f5c:	bb52      	cbnz	r2, 8012fb4 <mktime+0x1cc>
 8012f5e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012f62:	fb92 fef0 	sdiv	lr, r2, r0
 8012f66:	fb00 221e 	mls	r2, r0, lr, r2
 8012f6a:	2a00      	cmp	r2, #0
 8012f6c:	bf14      	ite	ne
 8012f6e:	4662      	movne	r2, ip
 8012f70:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012f74:	1aad      	subs	r5, r5, r2
 8012f76:	3b01      	subs	r3, #1
 8012f78:	429e      	cmp	r6, r3
 8012f7a:	f003 0203 	and.w	r2, r3, #3
 8012f7e:	dbe8      	blt.n	8012f52 <mktime+0x16a>
 8012f80:	b9da      	cbnz	r2, 8012fba <mktime+0x1d2>
 8012f82:	2264      	movs	r2, #100	; 0x64
 8012f84:	fb96 f3f2 	sdiv	r3, r6, r2
 8012f88:	fb02 6313 	mls	r3, r2, r3, r6
 8012f8c:	b9c3      	cbnz	r3, 8012fc0 <mktime+0x1d8>
 8012f8e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012f92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012f96:	fb93 f1f2 	sdiv	r1, r3, r2
 8012f9a:	fb02 3311 	mls	r3, r2, r1, r3
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f240 136d 	movw	r3, #365	; 0x16d
 8012fa4:	bf08      	it	eq
 8012fa6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012faa:	1aed      	subs	r5, r5, r3
 8012fac:	e774      	b.n	8012e98 <mktime+0xb0>
 8012fae:	f240 126d 	movw	r2, #365	; 0x16d
 8012fb2:	e7df      	b.n	8012f74 <mktime+0x18c>
 8012fb4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012fb8:	e7dc      	b.n	8012f74 <mktime+0x18c>
 8012fba:	f240 136d 	movw	r3, #365	; 0x16d
 8012fbe:	e7f4      	b.n	8012faa <mktime+0x1c2>
 8012fc0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8012fc4:	e7f1      	b.n	8012faa <mktime+0x1c2>
 8012fc6:	f000 fe61 	bl	8013c8c <__tzcalc_limits>
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d182      	bne.n	8012ed4 <mktime+0xec>
 8012fce:	46d3      	mov	fp, sl
 8012fd0:	e050      	b.n	8013074 <mktime+0x28c>
 8012fd2:	9b01      	ldr	r3, [sp, #4]
 8012fd4:	1a5b      	subs	r3, r3, r1
 8012fd6:	9301      	str	r3, [sp, #4]
 8012fd8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012fdc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	429c      	cmp	r4, r3
 8012fe4:	eb78 030e 	sbcs.w	r3, r8, lr
 8012fe8:	dbf1      	blt.n	8012fce <mktime+0x1e6>
 8012fea:	e78b      	b.n	8012f04 <mktime+0x11c>
 8012fec:	9b02      	ldr	r3, [sp, #8]
 8012fee:	429c      	cmp	r4, r3
 8012ff0:	9b03      	ldr	r3, [sp, #12]
 8012ff2:	eb78 0303 	sbcs.w	r3, r8, r3
 8012ff6:	db8f      	blt.n	8012f18 <mktime+0x130>
 8012ff8:	f1bb 0f00 	cmp.w	fp, #0
 8012ffc:	db3e      	blt.n	801307c <mktime+0x294>
 8012ffe:	f04f 0b01 	mov.w	fp, #1
 8013002:	ea8a 0a0b 	eor.w	sl, sl, fp
 8013006:	f1ba 0f01 	cmp.w	sl, #1
 801300a:	d133      	bne.n	8013074 <mktime+0x28c>
 801300c:	f1bb 0f00 	cmp.w	fp, #0
 8013010:	d04e      	beq.n	80130b0 <mktime+0x2c8>
 8013012:	1a52      	subs	r2, r2, r1
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801301a:	4413      	add	r3, r2
 801301c:	1914      	adds	r4, r2, r4
 801301e:	603b      	str	r3, [r7, #0]
 8013020:	4638      	mov	r0, r7
 8013022:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8013026:	f7ff fe07 	bl	8012c38 <validate_structure>
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	ebb2 020a 	subs.w	r2, r2, sl
 8013030:	d020      	beq.n	8013074 <mktime+0x28c>
 8013032:	2a01      	cmp	r2, #1
 8013034:	dc3e      	bgt.n	80130b4 <mktime+0x2cc>
 8013036:	1c90      	adds	r0, r2, #2
 8013038:	bfd8      	it	le
 801303a:	2201      	movle	r2, #1
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	18d3      	adds	r3, r2, r3
 8013040:	4415      	add	r5, r2
 8013042:	d540      	bpl.n	80130c6 <mktime+0x2de>
 8013044:	1e73      	subs	r3, r6, #1
 8013046:	0799      	lsls	r1, r3, #30
 8013048:	d137      	bne.n	80130ba <mktime+0x2d2>
 801304a:	2264      	movs	r2, #100	; 0x64
 801304c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013050:	fb02 3311 	mls	r3, r2, r1, r3
 8013054:	bba3      	cbnz	r3, 80130c0 <mktime+0x2d8>
 8013056:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801305a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801305e:	fb96 f2f3 	sdiv	r2, r6, r3
 8013062:	fb03 6612 	mls	r6, r3, r2, r6
 8013066:	2e00      	cmp	r6, #0
 8013068:	f240 136d 	movw	r3, #365	; 0x16d
 801306c:	bf18      	it	ne
 801306e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8013072:	61fb      	str	r3, [r7, #28]
 8013074:	f1bb 0f01 	cmp.w	fp, #1
 8013078:	f47f af57 	bne.w	8012f2a <mktime+0x142>
 801307c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8013080:	190c      	adds	r4, r1, r4
 8013082:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8013086:	f04f 0b01 	mov.w	fp, #1
 801308a:	f000 feaf 	bl	8013dec <__tz_unlock>
 801308e:	3504      	adds	r5, #4
 8013090:	2307      	movs	r3, #7
 8013092:	fb95 f3f3 	sdiv	r3, r5, r3
 8013096:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801309a:	1aed      	subs	r5, r5, r3
 801309c:	bf48      	it	mi
 801309e:	3507      	addmi	r5, #7
 80130a0:	f8c7 b020 	str.w	fp, [r7, #32]
 80130a4:	61bd      	str	r5, [r7, #24]
 80130a6:	4620      	mov	r0, r4
 80130a8:	4641      	mov	r1, r8
 80130aa:	b005      	add	sp, #20
 80130ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b0:	1a8a      	subs	r2, r1, r2
 80130b2:	e7af      	b.n	8013014 <mktime+0x22c>
 80130b4:	f04f 32ff 	mov.w	r2, #4294967295
 80130b8:	e7c0      	b.n	801303c <mktime+0x254>
 80130ba:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80130be:	e7d8      	b.n	8013072 <mktime+0x28a>
 80130c0:	f240 136d 	movw	r3, #365	; 0x16d
 80130c4:	e7d5      	b.n	8013072 <mktime+0x28a>
 80130c6:	07b2      	lsls	r2, r6, #30
 80130c8:	d11e      	bne.n	8013108 <mktime+0x320>
 80130ca:	2164      	movs	r1, #100	; 0x64
 80130cc:	fb96 f2f1 	sdiv	r2, r6, r1
 80130d0:	fb01 6212 	mls	r2, r1, r2, r6
 80130d4:	b9da      	cbnz	r2, 801310e <mktime+0x326>
 80130d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80130da:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80130de:	fb96 f1f2 	sdiv	r1, r6, r2
 80130e2:	fb02 6611 	mls	r6, r2, r1, r6
 80130e6:	2e00      	cmp	r6, #0
 80130e8:	f240 126d 	movw	r2, #365	; 0x16d
 80130ec:	bf08      	it	eq
 80130ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80130f2:	4293      	cmp	r3, r2
 80130f4:	bfa8      	it	ge
 80130f6:	1a9b      	subge	r3, r3, r2
 80130f8:	e7bb      	b.n	8013072 <mktime+0x28a>
 80130fa:	bf00      	nop
 80130fc:	080185ac 	.word	0x080185ac
 8013100:	00015180 	.word	0x00015180
 8013104:	2000a7a4 	.word	0x2000a7a4
 8013108:	f240 126d 	movw	r2, #365	; 0x16d
 801310c:	e7f1      	b.n	80130f2 <mktime+0x30a>
 801310e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013112:	e7ee      	b.n	80130f2 <mktime+0x30a>
 8013114:	f04f 34ff 	mov.w	r4, #4294967295
 8013118:	46a0      	mov	r8, r4
 801311a:	e7c4      	b.n	80130a6 <mktime+0x2be>

0801311c <_free_r>:
 801311c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801311e:	2900      	cmp	r1, #0
 8013120:	d044      	beq.n	80131ac <_free_r+0x90>
 8013122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013126:	9001      	str	r0, [sp, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	f1a1 0404 	sub.w	r4, r1, #4
 801312e:	bfb8      	it	lt
 8013130:	18e4      	addlt	r4, r4, r3
 8013132:	f001 ffa3 	bl	801507c <__malloc_lock>
 8013136:	4a1e      	ldr	r2, [pc, #120]	; (80131b0 <_free_r+0x94>)
 8013138:	9801      	ldr	r0, [sp, #4]
 801313a:	6813      	ldr	r3, [r2, #0]
 801313c:	b933      	cbnz	r3, 801314c <_free_r+0x30>
 801313e:	6063      	str	r3, [r4, #4]
 8013140:	6014      	str	r4, [r2, #0]
 8013142:	b003      	add	sp, #12
 8013144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013148:	f001 bf9e 	b.w	8015088 <__malloc_unlock>
 801314c:	42a3      	cmp	r3, r4
 801314e:	d908      	bls.n	8013162 <_free_r+0x46>
 8013150:	6825      	ldr	r5, [r4, #0]
 8013152:	1961      	adds	r1, r4, r5
 8013154:	428b      	cmp	r3, r1
 8013156:	bf01      	itttt	eq
 8013158:	6819      	ldreq	r1, [r3, #0]
 801315a:	685b      	ldreq	r3, [r3, #4]
 801315c:	1949      	addeq	r1, r1, r5
 801315e:	6021      	streq	r1, [r4, #0]
 8013160:	e7ed      	b.n	801313e <_free_r+0x22>
 8013162:	461a      	mov	r2, r3
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	b10b      	cbz	r3, 801316c <_free_r+0x50>
 8013168:	42a3      	cmp	r3, r4
 801316a:	d9fa      	bls.n	8013162 <_free_r+0x46>
 801316c:	6811      	ldr	r1, [r2, #0]
 801316e:	1855      	adds	r5, r2, r1
 8013170:	42a5      	cmp	r5, r4
 8013172:	d10b      	bne.n	801318c <_free_r+0x70>
 8013174:	6824      	ldr	r4, [r4, #0]
 8013176:	4421      	add	r1, r4
 8013178:	1854      	adds	r4, r2, r1
 801317a:	42a3      	cmp	r3, r4
 801317c:	6011      	str	r1, [r2, #0]
 801317e:	d1e0      	bne.n	8013142 <_free_r+0x26>
 8013180:	681c      	ldr	r4, [r3, #0]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	6053      	str	r3, [r2, #4]
 8013186:	4421      	add	r1, r4
 8013188:	6011      	str	r1, [r2, #0]
 801318a:	e7da      	b.n	8013142 <_free_r+0x26>
 801318c:	d902      	bls.n	8013194 <_free_r+0x78>
 801318e:	230c      	movs	r3, #12
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	e7d6      	b.n	8013142 <_free_r+0x26>
 8013194:	6825      	ldr	r5, [r4, #0]
 8013196:	1961      	adds	r1, r4, r5
 8013198:	428b      	cmp	r3, r1
 801319a:	bf04      	itt	eq
 801319c:	6819      	ldreq	r1, [r3, #0]
 801319e:	685b      	ldreq	r3, [r3, #4]
 80131a0:	6063      	str	r3, [r4, #4]
 80131a2:	bf04      	itt	eq
 80131a4:	1949      	addeq	r1, r1, r5
 80131a6:	6021      	streq	r1, [r4, #0]
 80131a8:	6054      	str	r4, [r2, #4]
 80131aa:	e7ca      	b.n	8013142 <_free_r+0x26>
 80131ac:	b003      	add	sp, #12
 80131ae:	bd30      	pop	{r4, r5, pc}
 80131b0:	2000a780 	.word	0x2000a780

080131b4 <sbrk_aligned>:
 80131b4:	b570      	push	{r4, r5, r6, lr}
 80131b6:	4e0e      	ldr	r6, [pc, #56]	; (80131f0 <sbrk_aligned+0x3c>)
 80131b8:	460c      	mov	r4, r1
 80131ba:	6831      	ldr	r1, [r6, #0]
 80131bc:	4605      	mov	r5, r0
 80131be:	b911      	cbnz	r1, 80131c6 <sbrk_aligned+0x12>
 80131c0:	f000 fd34 	bl	8013c2c <_sbrk_r>
 80131c4:	6030      	str	r0, [r6, #0]
 80131c6:	4621      	mov	r1, r4
 80131c8:	4628      	mov	r0, r5
 80131ca:	f000 fd2f 	bl	8013c2c <_sbrk_r>
 80131ce:	1c43      	adds	r3, r0, #1
 80131d0:	d00a      	beq.n	80131e8 <sbrk_aligned+0x34>
 80131d2:	1cc4      	adds	r4, r0, #3
 80131d4:	f024 0403 	bic.w	r4, r4, #3
 80131d8:	42a0      	cmp	r0, r4
 80131da:	d007      	beq.n	80131ec <sbrk_aligned+0x38>
 80131dc:	1a21      	subs	r1, r4, r0
 80131de:	4628      	mov	r0, r5
 80131e0:	f000 fd24 	bl	8013c2c <_sbrk_r>
 80131e4:	3001      	adds	r0, #1
 80131e6:	d101      	bne.n	80131ec <sbrk_aligned+0x38>
 80131e8:	f04f 34ff 	mov.w	r4, #4294967295
 80131ec:	4620      	mov	r0, r4
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
 80131f0:	2000a784 	.word	0x2000a784

080131f4 <_malloc_r>:
 80131f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f8:	1ccd      	adds	r5, r1, #3
 80131fa:	f025 0503 	bic.w	r5, r5, #3
 80131fe:	3508      	adds	r5, #8
 8013200:	2d0c      	cmp	r5, #12
 8013202:	bf38      	it	cc
 8013204:	250c      	movcc	r5, #12
 8013206:	2d00      	cmp	r5, #0
 8013208:	4607      	mov	r7, r0
 801320a:	db01      	blt.n	8013210 <_malloc_r+0x1c>
 801320c:	42a9      	cmp	r1, r5
 801320e:	d905      	bls.n	801321c <_malloc_r+0x28>
 8013210:	230c      	movs	r3, #12
 8013212:	603b      	str	r3, [r7, #0]
 8013214:	2600      	movs	r6, #0
 8013216:	4630      	mov	r0, r6
 8013218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321c:	4e2e      	ldr	r6, [pc, #184]	; (80132d8 <_malloc_r+0xe4>)
 801321e:	f001 ff2d 	bl	801507c <__malloc_lock>
 8013222:	6833      	ldr	r3, [r6, #0]
 8013224:	461c      	mov	r4, r3
 8013226:	bb34      	cbnz	r4, 8013276 <_malloc_r+0x82>
 8013228:	4629      	mov	r1, r5
 801322a:	4638      	mov	r0, r7
 801322c:	f7ff ffc2 	bl	80131b4 <sbrk_aligned>
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	4604      	mov	r4, r0
 8013234:	d14d      	bne.n	80132d2 <_malloc_r+0xde>
 8013236:	6834      	ldr	r4, [r6, #0]
 8013238:	4626      	mov	r6, r4
 801323a:	2e00      	cmp	r6, #0
 801323c:	d140      	bne.n	80132c0 <_malloc_r+0xcc>
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	4631      	mov	r1, r6
 8013242:	4638      	mov	r0, r7
 8013244:	eb04 0803 	add.w	r8, r4, r3
 8013248:	f000 fcf0 	bl	8013c2c <_sbrk_r>
 801324c:	4580      	cmp	r8, r0
 801324e:	d13a      	bne.n	80132c6 <_malloc_r+0xd2>
 8013250:	6821      	ldr	r1, [r4, #0]
 8013252:	3503      	adds	r5, #3
 8013254:	1a6d      	subs	r5, r5, r1
 8013256:	f025 0503 	bic.w	r5, r5, #3
 801325a:	3508      	adds	r5, #8
 801325c:	2d0c      	cmp	r5, #12
 801325e:	bf38      	it	cc
 8013260:	250c      	movcc	r5, #12
 8013262:	4629      	mov	r1, r5
 8013264:	4638      	mov	r0, r7
 8013266:	f7ff ffa5 	bl	80131b4 <sbrk_aligned>
 801326a:	3001      	adds	r0, #1
 801326c:	d02b      	beq.n	80132c6 <_malloc_r+0xd2>
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	442b      	add	r3, r5
 8013272:	6023      	str	r3, [r4, #0]
 8013274:	e00e      	b.n	8013294 <_malloc_r+0xa0>
 8013276:	6822      	ldr	r2, [r4, #0]
 8013278:	1b52      	subs	r2, r2, r5
 801327a:	d41e      	bmi.n	80132ba <_malloc_r+0xc6>
 801327c:	2a0b      	cmp	r2, #11
 801327e:	d916      	bls.n	80132ae <_malloc_r+0xba>
 8013280:	1961      	adds	r1, r4, r5
 8013282:	42a3      	cmp	r3, r4
 8013284:	6025      	str	r5, [r4, #0]
 8013286:	bf18      	it	ne
 8013288:	6059      	strne	r1, [r3, #4]
 801328a:	6863      	ldr	r3, [r4, #4]
 801328c:	bf08      	it	eq
 801328e:	6031      	streq	r1, [r6, #0]
 8013290:	5162      	str	r2, [r4, r5]
 8013292:	604b      	str	r3, [r1, #4]
 8013294:	4638      	mov	r0, r7
 8013296:	f104 060b 	add.w	r6, r4, #11
 801329a:	f001 fef5 	bl	8015088 <__malloc_unlock>
 801329e:	f026 0607 	bic.w	r6, r6, #7
 80132a2:	1d23      	adds	r3, r4, #4
 80132a4:	1af2      	subs	r2, r6, r3
 80132a6:	d0b6      	beq.n	8013216 <_malloc_r+0x22>
 80132a8:	1b9b      	subs	r3, r3, r6
 80132aa:	50a3      	str	r3, [r4, r2]
 80132ac:	e7b3      	b.n	8013216 <_malloc_r+0x22>
 80132ae:	6862      	ldr	r2, [r4, #4]
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	bf0c      	ite	eq
 80132b4:	6032      	streq	r2, [r6, #0]
 80132b6:	605a      	strne	r2, [r3, #4]
 80132b8:	e7ec      	b.n	8013294 <_malloc_r+0xa0>
 80132ba:	4623      	mov	r3, r4
 80132bc:	6864      	ldr	r4, [r4, #4]
 80132be:	e7b2      	b.n	8013226 <_malloc_r+0x32>
 80132c0:	4634      	mov	r4, r6
 80132c2:	6876      	ldr	r6, [r6, #4]
 80132c4:	e7b9      	b.n	801323a <_malloc_r+0x46>
 80132c6:	230c      	movs	r3, #12
 80132c8:	603b      	str	r3, [r7, #0]
 80132ca:	4638      	mov	r0, r7
 80132cc:	f001 fedc 	bl	8015088 <__malloc_unlock>
 80132d0:	e7a1      	b.n	8013216 <_malloc_r+0x22>
 80132d2:	6025      	str	r5, [r4, #0]
 80132d4:	e7de      	b.n	8013294 <_malloc_r+0xa0>
 80132d6:	bf00      	nop
 80132d8:	2000a780 	.word	0x2000a780

080132dc <__cvt>:
 80132dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80132e0:	ec55 4b10 	vmov	r4, r5, d0
 80132e4:	2d00      	cmp	r5, #0
 80132e6:	460e      	mov	r6, r1
 80132e8:	4619      	mov	r1, r3
 80132ea:	462b      	mov	r3, r5
 80132ec:	bfbb      	ittet	lt
 80132ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80132f2:	461d      	movlt	r5, r3
 80132f4:	2300      	movge	r3, #0
 80132f6:	232d      	movlt	r3, #45	; 0x2d
 80132f8:	700b      	strb	r3, [r1, #0]
 80132fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013300:	4691      	mov	r9, r2
 8013302:	f023 0820 	bic.w	r8, r3, #32
 8013306:	bfbc      	itt	lt
 8013308:	4622      	movlt	r2, r4
 801330a:	4614      	movlt	r4, r2
 801330c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013310:	d005      	beq.n	801331e <__cvt+0x42>
 8013312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013316:	d100      	bne.n	801331a <__cvt+0x3e>
 8013318:	3601      	adds	r6, #1
 801331a:	2102      	movs	r1, #2
 801331c:	e000      	b.n	8013320 <__cvt+0x44>
 801331e:	2103      	movs	r1, #3
 8013320:	ab03      	add	r3, sp, #12
 8013322:	9301      	str	r3, [sp, #4]
 8013324:	ab02      	add	r3, sp, #8
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	ec45 4b10 	vmov	d0, r4, r5
 801332c:	4653      	mov	r3, sl
 801332e:	4632      	mov	r2, r6
 8013330:	f000 ffa6 	bl	8014280 <_dtoa_r>
 8013334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013338:	4607      	mov	r7, r0
 801333a:	d102      	bne.n	8013342 <__cvt+0x66>
 801333c:	f019 0f01 	tst.w	r9, #1
 8013340:	d022      	beq.n	8013388 <__cvt+0xac>
 8013342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013346:	eb07 0906 	add.w	r9, r7, r6
 801334a:	d110      	bne.n	801336e <__cvt+0x92>
 801334c:	783b      	ldrb	r3, [r7, #0]
 801334e:	2b30      	cmp	r3, #48	; 0x30
 8013350:	d10a      	bne.n	8013368 <__cvt+0x8c>
 8013352:	2200      	movs	r2, #0
 8013354:	2300      	movs	r3, #0
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f7ed fb97 	bl	8000a8c <__aeabi_dcmpeq>
 801335e:	b918      	cbnz	r0, 8013368 <__cvt+0x8c>
 8013360:	f1c6 0601 	rsb	r6, r6, #1
 8013364:	f8ca 6000 	str.w	r6, [sl]
 8013368:	f8da 3000 	ldr.w	r3, [sl]
 801336c:	4499      	add	r9, r3
 801336e:	2200      	movs	r2, #0
 8013370:	2300      	movs	r3, #0
 8013372:	4620      	mov	r0, r4
 8013374:	4629      	mov	r1, r5
 8013376:	f7ed fb89 	bl	8000a8c <__aeabi_dcmpeq>
 801337a:	b108      	cbz	r0, 8013380 <__cvt+0xa4>
 801337c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013380:	2230      	movs	r2, #48	; 0x30
 8013382:	9b03      	ldr	r3, [sp, #12]
 8013384:	454b      	cmp	r3, r9
 8013386:	d307      	bcc.n	8013398 <__cvt+0xbc>
 8013388:	9b03      	ldr	r3, [sp, #12]
 801338a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801338c:	1bdb      	subs	r3, r3, r7
 801338e:	4638      	mov	r0, r7
 8013390:	6013      	str	r3, [r2, #0]
 8013392:	b004      	add	sp, #16
 8013394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013398:	1c59      	adds	r1, r3, #1
 801339a:	9103      	str	r1, [sp, #12]
 801339c:	701a      	strb	r2, [r3, #0]
 801339e:	e7f0      	b.n	8013382 <__cvt+0xa6>

080133a0 <__exponent>:
 80133a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133a2:	4603      	mov	r3, r0
 80133a4:	2900      	cmp	r1, #0
 80133a6:	bfb8      	it	lt
 80133a8:	4249      	neglt	r1, r1
 80133aa:	f803 2b02 	strb.w	r2, [r3], #2
 80133ae:	bfb4      	ite	lt
 80133b0:	222d      	movlt	r2, #45	; 0x2d
 80133b2:	222b      	movge	r2, #43	; 0x2b
 80133b4:	2909      	cmp	r1, #9
 80133b6:	7042      	strb	r2, [r0, #1]
 80133b8:	dd2a      	ble.n	8013410 <__exponent+0x70>
 80133ba:	f10d 0407 	add.w	r4, sp, #7
 80133be:	46a4      	mov	ip, r4
 80133c0:	270a      	movs	r7, #10
 80133c2:	46a6      	mov	lr, r4
 80133c4:	460a      	mov	r2, r1
 80133c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80133ca:	fb07 1516 	mls	r5, r7, r6, r1
 80133ce:	3530      	adds	r5, #48	; 0x30
 80133d0:	2a63      	cmp	r2, #99	; 0x63
 80133d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80133d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80133da:	4631      	mov	r1, r6
 80133dc:	dcf1      	bgt.n	80133c2 <__exponent+0x22>
 80133de:	3130      	adds	r1, #48	; 0x30
 80133e0:	f1ae 0502 	sub.w	r5, lr, #2
 80133e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80133e8:	1c44      	adds	r4, r0, #1
 80133ea:	4629      	mov	r1, r5
 80133ec:	4561      	cmp	r1, ip
 80133ee:	d30a      	bcc.n	8013406 <__exponent+0x66>
 80133f0:	f10d 0209 	add.w	r2, sp, #9
 80133f4:	eba2 020e 	sub.w	r2, r2, lr
 80133f8:	4565      	cmp	r5, ip
 80133fa:	bf88      	it	hi
 80133fc:	2200      	movhi	r2, #0
 80133fe:	4413      	add	r3, r2
 8013400:	1a18      	subs	r0, r3, r0
 8013402:	b003      	add	sp, #12
 8013404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801340a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801340e:	e7ed      	b.n	80133ec <__exponent+0x4c>
 8013410:	2330      	movs	r3, #48	; 0x30
 8013412:	3130      	adds	r1, #48	; 0x30
 8013414:	7083      	strb	r3, [r0, #2]
 8013416:	70c1      	strb	r1, [r0, #3]
 8013418:	1d03      	adds	r3, r0, #4
 801341a:	e7f1      	b.n	8013400 <__exponent+0x60>

0801341c <_printf_float>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	ed2d 8b02 	vpush	{d8}
 8013424:	b08d      	sub	sp, #52	; 0x34
 8013426:	460c      	mov	r4, r1
 8013428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801342c:	4616      	mov	r6, r2
 801342e:	461f      	mov	r7, r3
 8013430:	4605      	mov	r5, r0
 8013432:	f001 fe19 	bl	8015068 <_localeconv_r>
 8013436:	f8d0 a000 	ldr.w	sl, [r0]
 801343a:	4650      	mov	r0, sl
 801343c:	f7ec fea0 	bl	8000180 <strlen>
 8013440:	2300      	movs	r3, #0
 8013442:	930a      	str	r3, [sp, #40]	; 0x28
 8013444:	6823      	ldr	r3, [r4, #0]
 8013446:	9305      	str	r3, [sp, #20]
 8013448:	f8d8 3000 	ldr.w	r3, [r8]
 801344c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013450:	3307      	adds	r3, #7
 8013452:	f023 0307 	bic.w	r3, r3, #7
 8013456:	f103 0208 	add.w	r2, r3, #8
 801345a:	f8c8 2000 	str.w	r2, [r8]
 801345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801346a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801346e:	9307      	str	r3, [sp, #28]
 8013470:	f8cd 8018 	str.w	r8, [sp, #24]
 8013474:	ee08 0a10 	vmov	s16, r0
 8013478:	4b9f      	ldr	r3, [pc, #636]	; (80136f8 <_printf_float+0x2dc>)
 801347a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801347e:	f04f 32ff 	mov.w	r2, #4294967295
 8013482:	f7ed fb35 	bl	8000af0 <__aeabi_dcmpun>
 8013486:	bb88      	cbnz	r0, 80134ec <_printf_float+0xd0>
 8013488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801348c:	4b9a      	ldr	r3, [pc, #616]	; (80136f8 <_printf_float+0x2dc>)
 801348e:	f04f 32ff 	mov.w	r2, #4294967295
 8013492:	f7ed fb0f 	bl	8000ab4 <__aeabi_dcmple>
 8013496:	bb48      	cbnz	r0, 80134ec <_printf_float+0xd0>
 8013498:	2200      	movs	r2, #0
 801349a:	2300      	movs	r3, #0
 801349c:	4640      	mov	r0, r8
 801349e:	4649      	mov	r1, r9
 80134a0:	f7ed fafe 	bl	8000aa0 <__aeabi_dcmplt>
 80134a4:	b110      	cbz	r0, 80134ac <_printf_float+0x90>
 80134a6:	232d      	movs	r3, #45	; 0x2d
 80134a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134ac:	4b93      	ldr	r3, [pc, #588]	; (80136fc <_printf_float+0x2e0>)
 80134ae:	4894      	ldr	r0, [pc, #592]	; (8013700 <_printf_float+0x2e4>)
 80134b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80134b4:	bf94      	ite	ls
 80134b6:	4698      	movls	r8, r3
 80134b8:	4680      	movhi	r8, r0
 80134ba:	2303      	movs	r3, #3
 80134bc:	6123      	str	r3, [r4, #16]
 80134be:	9b05      	ldr	r3, [sp, #20]
 80134c0:	f023 0204 	bic.w	r2, r3, #4
 80134c4:	6022      	str	r2, [r4, #0]
 80134c6:	f04f 0900 	mov.w	r9, #0
 80134ca:	9700      	str	r7, [sp, #0]
 80134cc:	4633      	mov	r3, r6
 80134ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80134d0:	4621      	mov	r1, r4
 80134d2:	4628      	mov	r0, r5
 80134d4:	f000 f9d8 	bl	8013888 <_printf_common>
 80134d8:	3001      	adds	r0, #1
 80134da:	f040 8090 	bne.w	80135fe <_printf_float+0x1e2>
 80134de:	f04f 30ff 	mov.w	r0, #4294967295
 80134e2:	b00d      	add	sp, #52	; 0x34
 80134e4:	ecbd 8b02 	vpop	{d8}
 80134e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ec:	4642      	mov	r2, r8
 80134ee:	464b      	mov	r3, r9
 80134f0:	4640      	mov	r0, r8
 80134f2:	4649      	mov	r1, r9
 80134f4:	f7ed fafc 	bl	8000af0 <__aeabi_dcmpun>
 80134f8:	b140      	cbz	r0, 801350c <_printf_float+0xf0>
 80134fa:	464b      	mov	r3, r9
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	bfbc      	itt	lt
 8013500:	232d      	movlt	r3, #45	; 0x2d
 8013502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013506:	487f      	ldr	r0, [pc, #508]	; (8013704 <_printf_float+0x2e8>)
 8013508:	4b7f      	ldr	r3, [pc, #508]	; (8013708 <_printf_float+0x2ec>)
 801350a:	e7d1      	b.n	80134b0 <_printf_float+0x94>
 801350c:	6863      	ldr	r3, [r4, #4]
 801350e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013512:	9206      	str	r2, [sp, #24]
 8013514:	1c5a      	adds	r2, r3, #1
 8013516:	d13f      	bne.n	8013598 <_printf_float+0x17c>
 8013518:	2306      	movs	r3, #6
 801351a:	6063      	str	r3, [r4, #4]
 801351c:	9b05      	ldr	r3, [sp, #20]
 801351e:	6861      	ldr	r1, [r4, #4]
 8013520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013524:	2300      	movs	r3, #0
 8013526:	9303      	str	r3, [sp, #12]
 8013528:	ab0a      	add	r3, sp, #40	; 0x28
 801352a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801352e:	ab09      	add	r3, sp, #36	; 0x24
 8013530:	ec49 8b10 	vmov	d0, r8, r9
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	6022      	str	r2, [r4, #0]
 8013538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801353c:	4628      	mov	r0, r5
 801353e:	f7ff fecd 	bl	80132dc <__cvt>
 8013542:	9b06      	ldr	r3, [sp, #24]
 8013544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013546:	2b47      	cmp	r3, #71	; 0x47
 8013548:	4680      	mov	r8, r0
 801354a:	d108      	bne.n	801355e <_printf_float+0x142>
 801354c:	1cc8      	adds	r0, r1, #3
 801354e:	db02      	blt.n	8013556 <_printf_float+0x13a>
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	4299      	cmp	r1, r3
 8013554:	dd41      	ble.n	80135da <_printf_float+0x1be>
 8013556:	f1ab 0b02 	sub.w	fp, fp, #2
 801355a:	fa5f fb8b 	uxtb.w	fp, fp
 801355e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013562:	d820      	bhi.n	80135a6 <_printf_float+0x18a>
 8013564:	3901      	subs	r1, #1
 8013566:	465a      	mov	r2, fp
 8013568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801356c:	9109      	str	r1, [sp, #36]	; 0x24
 801356e:	f7ff ff17 	bl	80133a0 <__exponent>
 8013572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013574:	1813      	adds	r3, r2, r0
 8013576:	2a01      	cmp	r2, #1
 8013578:	4681      	mov	r9, r0
 801357a:	6123      	str	r3, [r4, #16]
 801357c:	dc02      	bgt.n	8013584 <_printf_float+0x168>
 801357e:	6822      	ldr	r2, [r4, #0]
 8013580:	07d2      	lsls	r2, r2, #31
 8013582:	d501      	bpl.n	8013588 <_printf_float+0x16c>
 8013584:	3301      	adds	r3, #1
 8013586:	6123      	str	r3, [r4, #16]
 8013588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801358c:	2b00      	cmp	r3, #0
 801358e:	d09c      	beq.n	80134ca <_printf_float+0xae>
 8013590:	232d      	movs	r3, #45	; 0x2d
 8013592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013596:	e798      	b.n	80134ca <_printf_float+0xae>
 8013598:	9a06      	ldr	r2, [sp, #24]
 801359a:	2a47      	cmp	r2, #71	; 0x47
 801359c:	d1be      	bne.n	801351c <_printf_float+0x100>
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1bc      	bne.n	801351c <_printf_float+0x100>
 80135a2:	2301      	movs	r3, #1
 80135a4:	e7b9      	b.n	801351a <_printf_float+0xfe>
 80135a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80135aa:	d118      	bne.n	80135de <_printf_float+0x1c2>
 80135ac:	2900      	cmp	r1, #0
 80135ae:	6863      	ldr	r3, [r4, #4]
 80135b0:	dd0b      	ble.n	80135ca <_printf_float+0x1ae>
 80135b2:	6121      	str	r1, [r4, #16]
 80135b4:	b913      	cbnz	r3, 80135bc <_printf_float+0x1a0>
 80135b6:	6822      	ldr	r2, [r4, #0]
 80135b8:	07d0      	lsls	r0, r2, #31
 80135ba:	d502      	bpl.n	80135c2 <_printf_float+0x1a6>
 80135bc:	3301      	adds	r3, #1
 80135be:	440b      	add	r3, r1
 80135c0:	6123      	str	r3, [r4, #16]
 80135c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80135c4:	f04f 0900 	mov.w	r9, #0
 80135c8:	e7de      	b.n	8013588 <_printf_float+0x16c>
 80135ca:	b913      	cbnz	r3, 80135d2 <_printf_float+0x1b6>
 80135cc:	6822      	ldr	r2, [r4, #0]
 80135ce:	07d2      	lsls	r2, r2, #31
 80135d0:	d501      	bpl.n	80135d6 <_printf_float+0x1ba>
 80135d2:	3302      	adds	r3, #2
 80135d4:	e7f4      	b.n	80135c0 <_printf_float+0x1a4>
 80135d6:	2301      	movs	r3, #1
 80135d8:	e7f2      	b.n	80135c0 <_printf_float+0x1a4>
 80135da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80135de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135e0:	4299      	cmp	r1, r3
 80135e2:	db05      	blt.n	80135f0 <_printf_float+0x1d4>
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	6121      	str	r1, [r4, #16]
 80135e8:	07d8      	lsls	r0, r3, #31
 80135ea:	d5ea      	bpl.n	80135c2 <_printf_float+0x1a6>
 80135ec:	1c4b      	adds	r3, r1, #1
 80135ee:	e7e7      	b.n	80135c0 <_printf_float+0x1a4>
 80135f0:	2900      	cmp	r1, #0
 80135f2:	bfd4      	ite	le
 80135f4:	f1c1 0202 	rsble	r2, r1, #2
 80135f8:	2201      	movgt	r2, #1
 80135fa:	4413      	add	r3, r2
 80135fc:	e7e0      	b.n	80135c0 <_printf_float+0x1a4>
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	055a      	lsls	r2, r3, #21
 8013602:	d407      	bmi.n	8013614 <_printf_float+0x1f8>
 8013604:	6923      	ldr	r3, [r4, #16]
 8013606:	4642      	mov	r2, r8
 8013608:	4631      	mov	r1, r6
 801360a:	4628      	mov	r0, r5
 801360c:	47b8      	blx	r7
 801360e:	3001      	adds	r0, #1
 8013610:	d12c      	bne.n	801366c <_printf_float+0x250>
 8013612:	e764      	b.n	80134de <_printf_float+0xc2>
 8013614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013618:	f240 80e0 	bls.w	80137dc <_printf_float+0x3c0>
 801361c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013620:	2200      	movs	r2, #0
 8013622:	2300      	movs	r3, #0
 8013624:	f7ed fa32 	bl	8000a8c <__aeabi_dcmpeq>
 8013628:	2800      	cmp	r0, #0
 801362a:	d034      	beq.n	8013696 <_printf_float+0x27a>
 801362c:	4a37      	ldr	r2, [pc, #220]	; (801370c <_printf_float+0x2f0>)
 801362e:	2301      	movs	r3, #1
 8013630:	4631      	mov	r1, r6
 8013632:	4628      	mov	r0, r5
 8013634:	47b8      	blx	r7
 8013636:	3001      	adds	r0, #1
 8013638:	f43f af51 	beq.w	80134de <_printf_float+0xc2>
 801363c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013640:	429a      	cmp	r2, r3
 8013642:	db02      	blt.n	801364a <_printf_float+0x22e>
 8013644:	6823      	ldr	r3, [r4, #0]
 8013646:	07d8      	lsls	r0, r3, #31
 8013648:	d510      	bpl.n	801366c <_printf_float+0x250>
 801364a:	ee18 3a10 	vmov	r3, s16
 801364e:	4652      	mov	r2, sl
 8013650:	4631      	mov	r1, r6
 8013652:	4628      	mov	r0, r5
 8013654:	47b8      	blx	r7
 8013656:	3001      	adds	r0, #1
 8013658:	f43f af41 	beq.w	80134de <_printf_float+0xc2>
 801365c:	f04f 0800 	mov.w	r8, #0
 8013660:	f104 091a 	add.w	r9, r4, #26
 8013664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013666:	3b01      	subs	r3, #1
 8013668:	4543      	cmp	r3, r8
 801366a:	dc09      	bgt.n	8013680 <_printf_float+0x264>
 801366c:	6823      	ldr	r3, [r4, #0]
 801366e:	079b      	lsls	r3, r3, #30
 8013670:	f100 8105 	bmi.w	801387e <_printf_float+0x462>
 8013674:	68e0      	ldr	r0, [r4, #12]
 8013676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013678:	4298      	cmp	r0, r3
 801367a:	bfb8      	it	lt
 801367c:	4618      	movlt	r0, r3
 801367e:	e730      	b.n	80134e2 <_printf_float+0xc6>
 8013680:	2301      	movs	r3, #1
 8013682:	464a      	mov	r2, r9
 8013684:	4631      	mov	r1, r6
 8013686:	4628      	mov	r0, r5
 8013688:	47b8      	blx	r7
 801368a:	3001      	adds	r0, #1
 801368c:	f43f af27 	beq.w	80134de <_printf_float+0xc2>
 8013690:	f108 0801 	add.w	r8, r8, #1
 8013694:	e7e6      	b.n	8013664 <_printf_float+0x248>
 8013696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013698:	2b00      	cmp	r3, #0
 801369a:	dc39      	bgt.n	8013710 <_printf_float+0x2f4>
 801369c:	4a1b      	ldr	r2, [pc, #108]	; (801370c <_printf_float+0x2f0>)
 801369e:	2301      	movs	r3, #1
 80136a0:	4631      	mov	r1, r6
 80136a2:	4628      	mov	r0, r5
 80136a4:	47b8      	blx	r7
 80136a6:	3001      	adds	r0, #1
 80136a8:	f43f af19 	beq.w	80134de <_printf_float+0xc2>
 80136ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136b0:	4313      	orrs	r3, r2
 80136b2:	d102      	bne.n	80136ba <_printf_float+0x29e>
 80136b4:	6823      	ldr	r3, [r4, #0]
 80136b6:	07d9      	lsls	r1, r3, #31
 80136b8:	d5d8      	bpl.n	801366c <_printf_float+0x250>
 80136ba:	ee18 3a10 	vmov	r3, s16
 80136be:	4652      	mov	r2, sl
 80136c0:	4631      	mov	r1, r6
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b8      	blx	r7
 80136c6:	3001      	adds	r0, #1
 80136c8:	f43f af09 	beq.w	80134de <_printf_float+0xc2>
 80136cc:	f04f 0900 	mov.w	r9, #0
 80136d0:	f104 0a1a 	add.w	sl, r4, #26
 80136d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d6:	425b      	negs	r3, r3
 80136d8:	454b      	cmp	r3, r9
 80136da:	dc01      	bgt.n	80136e0 <_printf_float+0x2c4>
 80136dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136de:	e792      	b.n	8013606 <_printf_float+0x1ea>
 80136e0:	2301      	movs	r3, #1
 80136e2:	4652      	mov	r2, sl
 80136e4:	4631      	mov	r1, r6
 80136e6:	4628      	mov	r0, r5
 80136e8:	47b8      	blx	r7
 80136ea:	3001      	adds	r0, #1
 80136ec:	f43f aef7 	beq.w	80134de <_printf_float+0xc2>
 80136f0:	f109 0901 	add.w	r9, r9, #1
 80136f4:	e7ee      	b.n	80136d4 <_printf_float+0x2b8>
 80136f6:	bf00      	nop
 80136f8:	7fefffff 	.word	0x7fefffff
 80136fc:	0801863c 	.word	0x0801863c
 8013700:	08018640 	.word	0x08018640
 8013704:	08018648 	.word	0x08018648
 8013708:	08018644 	.word	0x08018644
 801370c:	08018a96 	.word	0x08018a96
 8013710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013714:	429a      	cmp	r2, r3
 8013716:	bfa8      	it	ge
 8013718:	461a      	movge	r2, r3
 801371a:	2a00      	cmp	r2, #0
 801371c:	4691      	mov	r9, r2
 801371e:	dc37      	bgt.n	8013790 <_printf_float+0x374>
 8013720:	f04f 0b00 	mov.w	fp, #0
 8013724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013728:	f104 021a 	add.w	r2, r4, #26
 801372c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801372e:	9305      	str	r3, [sp, #20]
 8013730:	eba3 0309 	sub.w	r3, r3, r9
 8013734:	455b      	cmp	r3, fp
 8013736:	dc33      	bgt.n	80137a0 <_printf_float+0x384>
 8013738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801373c:	429a      	cmp	r2, r3
 801373e:	db3b      	blt.n	80137b8 <_printf_float+0x39c>
 8013740:	6823      	ldr	r3, [r4, #0]
 8013742:	07da      	lsls	r2, r3, #31
 8013744:	d438      	bmi.n	80137b8 <_printf_float+0x39c>
 8013746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013748:	9a05      	ldr	r2, [sp, #20]
 801374a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801374c:	1a9a      	subs	r2, r3, r2
 801374e:	eba3 0901 	sub.w	r9, r3, r1
 8013752:	4591      	cmp	r9, r2
 8013754:	bfa8      	it	ge
 8013756:	4691      	movge	r9, r2
 8013758:	f1b9 0f00 	cmp.w	r9, #0
 801375c:	dc35      	bgt.n	80137ca <_printf_float+0x3ae>
 801375e:	f04f 0800 	mov.w	r8, #0
 8013762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013766:	f104 0a1a 	add.w	sl, r4, #26
 801376a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801376e:	1a9b      	subs	r3, r3, r2
 8013770:	eba3 0309 	sub.w	r3, r3, r9
 8013774:	4543      	cmp	r3, r8
 8013776:	f77f af79 	ble.w	801366c <_printf_float+0x250>
 801377a:	2301      	movs	r3, #1
 801377c:	4652      	mov	r2, sl
 801377e:	4631      	mov	r1, r6
 8013780:	4628      	mov	r0, r5
 8013782:	47b8      	blx	r7
 8013784:	3001      	adds	r0, #1
 8013786:	f43f aeaa 	beq.w	80134de <_printf_float+0xc2>
 801378a:	f108 0801 	add.w	r8, r8, #1
 801378e:	e7ec      	b.n	801376a <_printf_float+0x34e>
 8013790:	4613      	mov	r3, r2
 8013792:	4631      	mov	r1, r6
 8013794:	4642      	mov	r2, r8
 8013796:	4628      	mov	r0, r5
 8013798:	47b8      	blx	r7
 801379a:	3001      	adds	r0, #1
 801379c:	d1c0      	bne.n	8013720 <_printf_float+0x304>
 801379e:	e69e      	b.n	80134de <_printf_float+0xc2>
 80137a0:	2301      	movs	r3, #1
 80137a2:	4631      	mov	r1, r6
 80137a4:	4628      	mov	r0, r5
 80137a6:	9205      	str	r2, [sp, #20]
 80137a8:	47b8      	blx	r7
 80137aa:	3001      	adds	r0, #1
 80137ac:	f43f ae97 	beq.w	80134de <_printf_float+0xc2>
 80137b0:	9a05      	ldr	r2, [sp, #20]
 80137b2:	f10b 0b01 	add.w	fp, fp, #1
 80137b6:	e7b9      	b.n	801372c <_printf_float+0x310>
 80137b8:	ee18 3a10 	vmov	r3, s16
 80137bc:	4652      	mov	r2, sl
 80137be:	4631      	mov	r1, r6
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b8      	blx	r7
 80137c4:	3001      	adds	r0, #1
 80137c6:	d1be      	bne.n	8013746 <_printf_float+0x32a>
 80137c8:	e689      	b.n	80134de <_printf_float+0xc2>
 80137ca:	9a05      	ldr	r2, [sp, #20]
 80137cc:	464b      	mov	r3, r9
 80137ce:	4442      	add	r2, r8
 80137d0:	4631      	mov	r1, r6
 80137d2:	4628      	mov	r0, r5
 80137d4:	47b8      	blx	r7
 80137d6:	3001      	adds	r0, #1
 80137d8:	d1c1      	bne.n	801375e <_printf_float+0x342>
 80137da:	e680      	b.n	80134de <_printf_float+0xc2>
 80137dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137de:	2a01      	cmp	r2, #1
 80137e0:	dc01      	bgt.n	80137e6 <_printf_float+0x3ca>
 80137e2:	07db      	lsls	r3, r3, #31
 80137e4:	d538      	bpl.n	8013858 <_printf_float+0x43c>
 80137e6:	2301      	movs	r3, #1
 80137e8:	4642      	mov	r2, r8
 80137ea:	4631      	mov	r1, r6
 80137ec:	4628      	mov	r0, r5
 80137ee:	47b8      	blx	r7
 80137f0:	3001      	adds	r0, #1
 80137f2:	f43f ae74 	beq.w	80134de <_printf_float+0xc2>
 80137f6:	ee18 3a10 	vmov	r3, s16
 80137fa:	4652      	mov	r2, sl
 80137fc:	4631      	mov	r1, r6
 80137fe:	4628      	mov	r0, r5
 8013800:	47b8      	blx	r7
 8013802:	3001      	adds	r0, #1
 8013804:	f43f ae6b 	beq.w	80134de <_printf_float+0xc2>
 8013808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801380c:	2200      	movs	r2, #0
 801380e:	2300      	movs	r3, #0
 8013810:	f7ed f93c 	bl	8000a8c <__aeabi_dcmpeq>
 8013814:	b9d8      	cbnz	r0, 801384e <_printf_float+0x432>
 8013816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013818:	f108 0201 	add.w	r2, r8, #1
 801381c:	3b01      	subs	r3, #1
 801381e:	4631      	mov	r1, r6
 8013820:	4628      	mov	r0, r5
 8013822:	47b8      	blx	r7
 8013824:	3001      	adds	r0, #1
 8013826:	d10e      	bne.n	8013846 <_printf_float+0x42a>
 8013828:	e659      	b.n	80134de <_printf_float+0xc2>
 801382a:	2301      	movs	r3, #1
 801382c:	4652      	mov	r2, sl
 801382e:	4631      	mov	r1, r6
 8013830:	4628      	mov	r0, r5
 8013832:	47b8      	blx	r7
 8013834:	3001      	adds	r0, #1
 8013836:	f43f ae52 	beq.w	80134de <_printf_float+0xc2>
 801383a:	f108 0801 	add.w	r8, r8, #1
 801383e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013840:	3b01      	subs	r3, #1
 8013842:	4543      	cmp	r3, r8
 8013844:	dcf1      	bgt.n	801382a <_printf_float+0x40e>
 8013846:	464b      	mov	r3, r9
 8013848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801384c:	e6dc      	b.n	8013608 <_printf_float+0x1ec>
 801384e:	f04f 0800 	mov.w	r8, #0
 8013852:	f104 0a1a 	add.w	sl, r4, #26
 8013856:	e7f2      	b.n	801383e <_printf_float+0x422>
 8013858:	2301      	movs	r3, #1
 801385a:	4642      	mov	r2, r8
 801385c:	e7df      	b.n	801381e <_printf_float+0x402>
 801385e:	2301      	movs	r3, #1
 8013860:	464a      	mov	r2, r9
 8013862:	4631      	mov	r1, r6
 8013864:	4628      	mov	r0, r5
 8013866:	47b8      	blx	r7
 8013868:	3001      	adds	r0, #1
 801386a:	f43f ae38 	beq.w	80134de <_printf_float+0xc2>
 801386e:	f108 0801 	add.w	r8, r8, #1
 8013872:	68e3      	ldr	r3, [r4, #12]
 8013874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013876:	1a5b      	subs	r3, r3, r1
 8013878:	4543      	cmp	r3, r8
 801387a:	dcf0      	bgt.n	801385e <_printf_float+0x442>
 801387c:	e6fa      	b.n	8013674 <_printf_float+0x258>
 801387e:	f04f 0800 	mov.w	r8, #0
 8013882:	f104 0919 	add.w	r9, r4, #25
 8013886:	e7f4      	b.n	8013872 <_printf_float+0x456>

08013888 <_printf_common>:
 8013888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801388c:	4616      	mov	r6, r2
 801388e:	4699      	mov	r9, r3
 8013890:	688a      	ldr	r2, [r1, #8]
 8013892:	690b      	ldr	r3, [r1, #16]
 8013894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013898:	4293      	cmp	r3, r2
 801389a:	bfb8      	it	lt
 801389c:	4613      	movlt	r3, r2
 801389e:	6033      	str	r3, [r6, #0]
 80138a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80138a4:	4607      	mov	r7, r0
 80138a6:	460c      	mov	r4, r1
 80138a8:	b10a      	cbz	r2, 80138ae <_printf_common+0x26>
 80138aa:	3301      	adds	r3, #1
 80138ac:	6033      	str	r3, [r6, #0]
 80138ae:	6823      	ldr	r3, [r4, #0]
 80138b0:	0699      	lsls	r1, r3, #26
 80138b2:	bf42      	ittt	mi
 80138b4:	6833      	ldrmi	r3, [r6, #0]
 80138b6:	3302      	addmi	r3, #2
 80138b8:	6033      	strmi	r3, [r6, #0]
 80138ba:	6825      	ldr	r5, [r4, #0]
 80138bc:	f015 0506 	ands.w	r5, r5, #6
 80138c0:	d106      	bne.n	80138d0 <_printf_common+0x48>
 80138c2:	f104 0a19 	add.w	sl, r4, #25
 80138c6:	68e3      	ldr	r3, [r4, #12]
 80138c8:	6832      	ldr	r2, [r6, #0]
 80138ca:	1a9b      	subs	r3, r3, r2
 80138cc:	42ab      	cmp	r3, r5
 80138ce:	dc26      	bgt.n	801391e <_printf_common+0x96>
 80138d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80138d4:	1e13      	subs	r3, r2, #0
 80138d6:	6822      	ldr	r2, [r4, #0]
 80138d8:	bf18      	it	ne
 80138da:	2301      	movne	r3, #1
 80138dc:	0692      	lsls	r2, r2, #26
 80138de:	d42b      	bmi.n	8013938 <_printf_common+0xb0>
 80138e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138e4:	4649      	mov	r1, r9
 80138e6:	4638      	mov	r0, r7
 80138e8:	47c0      	blx	r8
 80138ea:	3001      	adds	r0, #1
 80138ec:	d01e      	beq.n	801392c <_printf_common+0xa4>
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	68e5      	ldr	r5, [r4, #12]
 80138f2:	6832      	ldr	r2, [r6, #0]
 80138f4:	f003 0306 	and.w	r3, r3, #6
 80138f8:	2b04      	cmp	r3, #4
 80138fa:	bf08      	it	eq
 80138fc:	1aad      	subeq	r5, r5, r2
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	6922      	ldr	r2, [r4, #16]
 8013902:	bf0c      	ite	eq
 8013904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013908:	2500      	movne	r5, #0
 801390a:	4293      	cmp	r3, r2
 801390c:	bfc4      	itt	gt
 801390e:	1a9b      	subgt	r3, r3, r2
 8013910:	18ed      	addgt	r5, r5, r3
 8013912:	2600      	movs	r6, #0
 8013914:	341a      	adds	r4, #26
 8013916:	42b5      	cmp	r5, r6
 8013918:	d11a      	bne.n	8013950 <_printf_common+0xc8>
 801391a:	2000      	movs	r0, #0
 801391c:	e008      	b.n	8013930 <_printf_common+0xa8>
 801391e:	2301      	movs	r3, #1
 8013920:	4652      	mov	r2, sl
 8013922:	4649      	mov	r1, r9
 8013924:	4638      	mov	r0, r7
 8013926:	47c0      	blx	r8
 8013928:	3001      	adds	r0, #1
 801392a:	d103      	bne.n	8013934 <_printf_common+0xac>
 801392c:	f04f 30ff 	mov.w	r0, #4294967295
 8013930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013934:	3501      	adds	r5, #1
 8013936:	e7c6      	b.n	80138c6 <_printf_common+0x3e>
 8013938:	18e1      	adds	r1, r4, r3
 801393a:	1c5a      	adds	r2, r3, #1
 801393c:	2030      	movs	r0, #48	; 0x30
 801393e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013942:	4422      	add	r2, r4
 8013944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801394c:	3302      	adds	r3, #2
 801394e:	e7c7      	b.n	80138e0 <_printf_common+0x58>
 8013950:	2301      	movs	r3, #1
 8013952:	4622      	mov	r2, r4
 8013954:	4649      	mov	r1, r9
 8013956:	4638      	mov	r0, r7
 8013958:	47c0      	blx	r8
 801395a:	3001      	adds	r0, #1
 801395c:	d0e6      	beq.n	801392c <_printf_common+0xa4>
 801395e:	3601      	adds	r6, #1
 8013960:	e7d9      	b.n	8013916 <_printf_common+0x8e>
	...

08013964 <_printf_i>:
 8013964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013968:	7e0f      	ldrb	r7, [r1, #24]
 801396a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801396c:	2f78      	cmp	r7, #120	; 0x78
 801396e:	4691      	mov	r9, r2
 8013970:	4680      	mov	r8, r0
 8013972:	460c      	mov	r4, r1
 8013974:	469a      	mov	sl, r3
 8013976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801397a:	d807      	bhi.n	801398c <_printf_i+0x28>
 801397c:	2f62      	cmp	r7, #98	; 0x62
 801397e:	d80a      	bhi.n	8013996 <_printf_i+0x32>
 8013980:	2f00      	cmp	r7, #0
 8013982:	f000 80d8 	beq.w	8013b36 <_printf_i+0x1d2>
 8013986:	2f58      	cmp	r7, #88	; 0x58
 8013988:	f000 80a3 	beq.w	8013ad2 <_printf_i+0x16e>
 801398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013994:	e03a      	b.n	8013a0c <_printf_i+0xa8>
 8013996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801399a:	2b15      	cmp	r3, #21
 801399c:	d8f6      	bhi.n	801398c <_printf_i+0x28>
 801399e:	a101      	add	r1, pc, #4	; (adr r1, 80139a4 <_printf_i+0x40>)
 80139a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80139a4:	080139fd 	.word	0x080139fd
 80139a8:	08013a11 	.word	0x08013a11
 80139ac:	0801398d 	.word	0x0801398d
 80139b0:	0801398d 	.word	0x0801398d
 80139b4:	0801398d 	.word	0x0801398d
 80139b8:	0801398d 	.word	0x0801398d
 80139bc:	08013a11 	.word	0x08013a11
 80139c0:	0801398d 	.word	0x0801398d
 80139c4:	0801398d 	.word	0x0801398d
 80139c8:	0801398d 	.word	0x0801398d
 80139cc:	0801398d 	.word	0x0801398d
 80139d0:	08013b1d 	.word	0x08013b1d
 80139d4:	08013a41 	.word	0x08013a41
 80139d8:	08013aff 	.word	0x08013aff
 80139dc:	0801398d 	.word	0x0801398d
 80139e0:	0801398d 	.word	0x0801398d
 80139e4:	08013b3f 	.word	0x08013b3f
 80139e8:	0801398d 	.word	0x0801398d
 80139ec:	08013a41 	.word	0x08013a41
 80139f0:	0801398d 	.word	0x0801398d
 80139f4:	0801398d 	.word	0x0801398d
 80139f8:	08013b07 	.word	0x08013b07
 80139fc:	682b      	ldr	r3, [r5, #0]
 80139fe:	1d1a      	adds	r2, r3, #4
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	602a      	str	r2, [r5, #0]
 8013a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e0a3      	b.n	8013b58 <_printf_i+0x1f4>
 8013a10:	6820      	ldr	r0, [r4, #0]
 8013a12:	6829      	ldr	r1, [r5, #0]
 8013a14:	0606      	lsls	r6, r0, #24
 8013a16:	f101 0304 	add.w	r3, r1, #4
 8013a1a:	d50a      	bpl.n	8013a32 <_printf_i+0xce>
 8013a1c:	680e      	ldr	r6, [r1, #0]
 8013a1e:	602b      	str	r3, [r5, #0]
 8013a20:	2e00      	cmp	r6, #0
 8013a22:	da03      	bge.n	8013a2c <_printf_i+0xc8>
 8013a24:	232d      	movs	r3, #45	; 0x2d
 8013a26:	4276      	negs	r6, r6
 8013a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a2c:	485e      	ldr	r0, [pc, #376]	; (8013ba8 <_printf_i+0x244>)
 8013a2e:	230a      	movs	r3, #10
 8013a30:	e019      	b.n	8013a66 <_printf_i+0x102>
 8013a32:	680e      	ldr	r6, [r1, #0]
 8013a34:	602b      	str	r3, [r5, #0]
 8013a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a3a:	bf18      	it	ne
 8013a3c:	b236      	sxthne	r6, r6
 8013a3e:	e7ef      	b.n	8013a20 <_printf_i+0xbc>
 8013a40:	682b      	ldr	r3, [r5, #0]
 8013a42:	6820      	ldr	r0, [r4, #0]
 8013a44:	1d19      	adds	r1, r3, #4
 8013a46:	6029      	str	r1, [r5, #0]
 8013a48:	0601      	lsls	r1, r0, #24
 8013a4a:	d501      	bpl.n	8013a50 <_printf_i+0xec>
 8013a4c:	681e      	ldr	r6, [r3, #0]
 8013a4e:	e002      	b.n	8013a56 <_printf_i+0xf2>
 8013a50:	0646      	lsls	r6, r0, #25
 8013a52:	d5fb      	bpl.n	8013a4c <_printf_i+0xe8>
 8013a54:	881e      	ldrh	r6, [r3, #0]
 8013a56:	4854      	ldr	r0, [pc, #336]	; (8013ba8 <_printf_i+0x244>)
 8013a58:	2f6f      	cmp	r7, #111	; 0x6f
 8013a5a:	bf0c      	ite	eq
 8013a5c:	2308      	moveq	r3, #8
 8013a5e:	230a      	movne	r3, #10
 8013a60:	2100      	movs	r1, #0
 8013a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a66:	6865      	ldr	r5, [r4, #4]
 8013a68:	60a5      	str	r5, [r4, #8]
 8013a6a:	2d00      	cmp	r5, #0
 8013a6c:	bfa2      	ittt	ge
 8013a6e:	6821      	ldrge	r1, [r4, #0]
 8013a70:	f021 0104 	bicge.w	r1, r1, #4
 8013a74:	6021      	strge	r1, [r4, #0]
 8013a76:	b90e      	cbnz	r6, 8013a7c <_printf_i+0x118>
 8013a78:	2d00      	cmp	r5, #0
 8013a7a:	d04d      	beq.n	8013b18 <_printf_i+0x1b4>
 8013a7c:	4615      	mov	r5, r2
 8013a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013a82:	fb03 6711 	mls	r7, r3, r1, r6
 8013a86:	5dc7      	ldrb	r7, [r0, r7]
 8013a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a8c:	4637      	mov	r7, r6
 8013a8e:	42bb      	cmp	r3, r7
 8013a90:	460e      	mov	r6, r1
 8013a92:	d9f4      	bls.n	8013a7e <_printf_i+0x11a>
 8013a94:	2b08      	cmp	r3, #8
 8013a96:	d10b      	bne.n	8013ab0 <_printf_i+0x14c>
 8013a98:	6823      	ldr	r3, [r4, #0]
 8013a9a:	07de      	lsls	r6, r3, #31
 8013a9c:	d508      	bpl.n	8013ab0 <_printf_i+0x14c>
 8013a9e:	6923      	ldr	r3, [r4, #16]
 8013aa0:	6861      	ldr	r1, [r4, #4]
 8013aa2:	4299      	cmp	r1, r3
 8013aa4:	bfde      	ittt	le
 8013aa6:	2330      	movle	r3, #48	; 0x30
 8013aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013ab0:	1b52      	subs	r2, r2, r5
 8013ab2:	6122      	str	r2, [r4, #16]
 8013ab4:	f8cd a000 	str.w	sl, [sp]
 8013ab8:	464b      	mov	r3, r9
 8013aba:	aa03      	add	r2, sp, #12
 8013abc:	4621      	mov	r1, r4
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7ff fee2 	bl	8013888 <_printf_common>
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d14c      	bne.n	8013b62 <_printf_i+0x1fe>
 8013ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8013acc:	b004      	add	sp, #16
 8013ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad2:	4835      	ldr	r0, [pc, #212]	; (8013ba8 <_printf_i+0x244>)
 8013ad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013ad8:	6829      	ldr	r1, [r5, #0]
 8013ada:	6823      	ldr	r3, [r4, #0]
 8013adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ae0:	6029      	str	r1, [r5, #0]
 8013ae2:	061d      	lsls	r5, r3, #24
 8013ae4:	d514      	bpl.n	8013b10 <_printf_i+0x1ac>
 8013ae6:	07df      	lsls	r7, r3, #31
 8013ae8:	bf44      	itt	mi
 8013aea:	f043 0320 	orrmi.w	r3, r3, #32
 8013aee:	6023      	strmi	r3, [r4, #0]
 8013af0:	b91e      	cbnz	r6, 8013afa <_printf_i+0x196>
 8013af2:	6823      	ldr	r3, [r4, #0]
 8013af4:	f023 0320 	bic.w	r3, r3, #32
 8013af8:	6023      	str	r3, [r4, #0]
 8013afa:	2310      	movs	r3, #16
 8013afc:	e7b0      	b.n	8013a60 <_printf_i+0xfc>
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	f043 0320 	orr.w	r3, r3, #32
 8013b04:	6023      	str	r3, [r4, #0]
 8013b06:	2378      	movs	r3, #120	; 0x78
 8013b08:	4828      	ldr	r0, [pc, #160]	; (8013bac <_printf_i+0x248>)
 8013b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b0e:	e7e3      	b.n	8013ad8 <_printf_i+0x174>
 8013b10:	0659      	lsls	r1, r3, #25
 8013b12:	bf48      	it	mi
 8013b14:	b2b6      	uxthmi	r6, r6
 8013b16:	e7e6      	b.n	8013ae6 <_printf_i+0x182>
 8013b18:	4615      	mov	r5, r2
 8013b1a:	e7bb      	b.n	8013a94 <_printf_i+0x130>
 8013b1c:	682b      	ldr	r3, [r5, #0]
 8013b1e:	6826      	ldr	r6, [r4, #0]
 8013b20:	6961      	ldr	r1, [r4, #20]
 8013b22:	1d18      	adds	r0, r3, #4
 8013b24:	6028      	str	r0, [r5, #0]
 8013b26:	0635      	lsls	r5, r6, #24
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	d501      	bpl.n	8013b30 <_printf_i+0x1cc>
 8013b2c:	6019      	str	r1, [r3, #0]
 8013b2e:	e002      	b.n	8013b36 <_printf_i+0x1d2>
 8013b30:	0670      	lsls	r0, r6, #25
 8013b32:	d5fb      	bpl.n	8013b2c <_printf_i+0x1c8>
 8013b34:	8019      	strh	r1, [r3, #0]
 8013b36:	2300      	movs	r3, #0
 8013b38:	6123      	str	r3, [r4, #16]
 8013b3a:	4615      	mov	r5, r2
 8013b3c:	e7ba      	b.n	8013ab4 <_printf_i+0x150>
 8013b3e:	682b      	ldr	r3, [r5, #0]
 8013b40:	1d1a      	adds	r2, r3, #4
 8013b42:	602a      	str	r2, [r5, #0]
 8013b44:	681d      	ldr	r5, [r3, #0]
 8013b46:	6862      	ldr	r2, [r4, #4]
 8013b48:	2100      	movs	r1, #0
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f7ec fb20 	bl	8000190 <memchr>
 8013b50:	b108      	cbz	r0, 8013b56 <_printf_i+0x1f2>
 8013b52:	1b40      	subs	r0, r0, r5
 8013b54:	6060      	str	r0, [r4, #4]
 8013b56:	6863      	ldr	r3, [r4, #4]
 8013b58:	6123      	str	r3, [r4, #16]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b60:	e7a8      	b.n	8013ab4 <_printf_i+0x150>
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	462a      	mov	r2, r5
 8013b66:	4649      	mov	r1, r9
 8013b68:	4640      	mov	r0, r8
 8013b6a:	47d0      	blx	sl
 8013b6c:	3001      	adds	r0, #1
 8013b6e:	d0ab      	beq.n	8013ac8 <_printf_i+0x164>
 8013b70:	6823      	ldr	r3, [r4, #0]
 8013b72:	079b      	lsls	r3, r3, #30
 8013b74:	d413      	bmi.n	8013b9e <_printf_i+0x23a>
 8013b76:	68e0      	ldr	r0, [r4, #12]
 8013b78:	9b03      	ldr	r3, [sp, #12]
 8013b7a:	4298      	cmp	r0, r3
 8013b7c:	bfb8      	it	lt
 8013b7e:	4618      	movlt	r0, r3
 8013b80:	e7a4      	b.n	8013acc <_printf_i+0x168>
 8013b82:	2301      	movs	r3, #1
 8013b84:	4632      	mov	r2, r6
 8013b86:	4649      	mov	r1, r9
 8013b88:	4640      	mov	r0, r8
 8013b8a:	47d0      	blx	sl
 8013b8c:	3001      	adds	r0, #1
 8013b8e:	d09b      	beq.n	8013ac8 <_printf_i+0x164>
 8013b90:	3501      	adds	r5, #1
 8013b92:	68e3      	ldr	r3, [r4, #12]
 8013b94:	9903      	ldr	r1, [sp, #12]
 8013b96:	1a5b      	subs	r3, r3, r1
 8013b98:	42ab      	cmp	r3, r5
 8013b9a:	dcf2      	bgt.n	8013b82 <_printf_i+0x21e>
 8013b9c:	e7eb      	b.n	8013b76 <_printf_i+0x212>
 8013b9e:	2500      	movs	r5, #0
 8013ba0:	f104 0619 	add.w	r6, r4, #25
 8013ba4:	e7f5      	b.n	8013b92 <_printf_i+0x22e>
 8013ba6:	bf00      	nop
 8013ba8:	0801864c 	.word	0x0801864c
 8013bac:	0801865d 	.word	0x0801865d

08013bb0 <rand>:
 8013bb0:	4b16      	ldr	r3, [pc, #88]	; (8013c0c <rand+0x5c>)
 8013bb2:	b510      	push	{r4, lr}
 8013bb4:	681c      	ldr	r4, [r3, #0]
 8013bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bb8:	b9b3      	cbnz	r3, 8013be8 <rand+0x38>
 8013bba:	2018      	movs	r0, #24
 8013bbc:	f7ff f816 	bl	8012bec <malloc>
 8013bc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8013bc2:	b928      	cbnz	r0, 8013bd0 <rand+0x20>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	4b12      	ldr	r3, [pc, #72]	; (8013c10 <rand+0x60>)
 8013bc8:	4812      	ldr	r0, [pc, #72]	; (8013c14 <rand+0x64>)
 8013bca:	214e      	movs	r1, #78	; 0x4e
 8013bcc:	f000 fa9a 	bl	8014104 <__assert_func>
 8013bd0:	4a11      	ldr	r2, [pc, #68]	; (8013c18 <rand+0x68>)
 8013bd2:	4b12      	ldr	r3, [pc, #72]	; (8013c1c <rand+0x6c>)
 8013bd4:	e9c0 2300 	strd	r2, r3, [r0]
 8013bd8:	4b11      	ldr	r3, [pc, #68]	; (8013c20 <rand+0x70>)
 8013bda:	6083      	str	r3, [r0, #8]
 8013bdc:	230b      	movs	r3, #11
 8013bde:	8183      	strh	r3, [r0, #12]
 8013be0:	2201      	movs	r2, #1
 8013be2:	2300      	movs	r3, #0
 8013be4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013be8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013bea:	4a0e      	ldr	r2, [pc, #56]	; (8013c24 <rand+0x74>)
 8013bec:	6920      	ldr	r0, [r4, #16]
 8013bee:	6963      	ldr	r3, [r4, #20]
 8013bf0:	490d      	ldr	r1, [pc, #52]	; (8013c28 <rand+0x78>)
 8013bf2:	4342      	muls	r2, r0
 8013bf4:	fb01 2203 	mla	r2, r1, r3, r2
 8013bf8:	fba0 0101 	umull	r0, r1, r0, r1
 8013bfc:	1c43      	adds	r3, r0, #1
 8013bfe:	eb42 0001 	adc.w	r0, r2, r1
 8013c02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013c06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	20000020 	.word	0x20000020
 8013c10:	08018508 	.word	0x08018508
 8013c14:	0801866e 	.word	0x0801866e
 8013c18:	abcd330e 	.word	0xabcd330e
 8013c1c:	e66d1234 	.word	0xe66d1234
 8013c20:	0005deec 	.word	0x0005deec
 8013c24:	5851f42d 	.word	0x5851f42d
 8013c28:	4c957f2d 	.word	0x4c957f2d

08013c2c <_sbrk_r>:
 8013c2c:	b538      	push	{r3, r4, r5, lr}
 8013c2e:	4d06      	ldr	r5, [pc, #24]	; (8013c48 <_sbrk_r+0x1c>)
 8013c30:	2300      	movs	r3, #0
 8013c32:	4604      	mov	r4, r0
 8013c34:	4608      	mov	r0, r1
 8013c36:	602b      	str	r3, [r5, #0]
 8013c38:	f7f6 febe 	bl	800a9b8 <_sbrk>
 8013c3c:	1c43      	adds	r3, r0, #1
 8013c3e:	d102      	bne.n	8013c46 <_sbrk_r+0x1a>
 8013c40:	682b      	ldr	r3, [r5, #0]
 8013c42:	b103      	cbz	r3, 8013c46 <_sbrk_r+0x1a>
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	bd38      	pop	{r3, r4, r5, pc}
 8013c48:	2000a7b4 	.word	0x2000a7b4

08013c4c <siprintf>:
 8013c4c:	b40e      	push	{r1, r2, r3}
 8013c4e:	b500      	push	{lr}
 8013c50:	b09c      	sub	sp, #112	; 0x70
 8013c52:	ab1d      	add	r3, sp, #116	; 0x74
 8013c54:	9002      	str	r0, [sp, #8]
 8013c56:	9006      	str	r0, [sp, #24]
 8013c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c5c:	4809      	ldr	r0, [pc, #36]	; (8013c84 <siprintf+0x38>)
 8013c5e:	9107      	str	r1, [sp, #28]
 8013c60:	9104      	str	r1, [sp, #16]
 8013c62:	4909      	ldr	r1, [pc, #36]	; (8013c88 <siprintf+0x3c>)
 8013c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c68:	9105      	str	r1, [sp, #20]
 8013c6a:	6800      	ldr	r0, [r0, #0]
 8013c6c:	9301      	str	r3, [sp, #4]
 8013c6e:	a902      	add	r1, sp, #8
 8013c70:	f001 fe06 	bl	8015880 <_svfiprintf_r>
 8013c74:	9b02      	ldr	r3, [sp, #8]
 8013c76:	2200      	movs	r2, #0
 8013c78:	701a      	strb	r2, [r3, #0]
 8013c7a:	b01c      	add	sp, #112	; 0x70
 8013c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c80:	b003      	add	sp, #12
 8013c82:	4770      	bx	lr
 8013c84:	20000020 	.word	0x20000020
 8013c88:	ffff0208 	.word	0xffff0208

08013c8c <__tzcalc_limits>:
 8013c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c90:	4605      	mov	r5, r0
 8013c92:	f001 f939 	bl	8014f08 <__gettzinfo>
 8013c96:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013c9a:	429d      	cmp	r5, r3
 8013c9c:	f340 8099 	ble.w	8013dd2 <__tzcalc_limits+0x146>
 8013ca0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8013ca4:	18ac      	adds	r4, r5, r2
 8013ca6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8013caa:	f240 126d 	movw	r2, #365	; 0x16d
 8013cae:	10a4      	asrs	r4, r4, #2
 8013cb0:	fb02 4403 	mla	r4, r2, r3, r4
 8013cb4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013cb8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8013cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cc0:	441c      	add	r4, r3
 8013cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013cc6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8013cca:	fb95 fcf3 	sdiv	ip, r5, r3
 8013cce:	fb03 5c1c 	mls	ip, r3, ip, r5
 8013cd2:	186a      	adds	r2, r5, r1
 8013cd4:	fabc f68c 	clz	r6, ip
 8013cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8013cdc:	f005 0303 	and.w	r3, r5, #3
 8013ce0:	4414      	add	r4, r2
 8013ce2:	2264      	movs	r2, #100	; 0x64
 8013ce4:	6045      	str	r5, [r0, #4]
 8013ce6:	fb95 f7f2 	sdiv	r7, r5, r2
 8013cea:	0976      	lsrs	r6, r6, #5
 8013cec:	fb02 5717 	mls	r7, r2, r7, r5
 8013cf0:	4601      	mov	r1, r0
 8013cf2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	f04f 0a07 	mov.w	sl, #7
 8013cfc:	7a0d      	ldrb	r5, [r1, #8]
 8013cfe:	694b      	ldr	r3, [r1, #20]
 8013d00:	2d4a      	cmp	r5, #74	; 0x4a
 8013d02:	d12d      	bne.n	8013d60 <__tzcalc_limits+0xd4>
 8013d04:	9a00      	ldr	r2, [sp, #0]
 8013d06:	eb04 0e03 	add.w	lr, r4, r3
 8013d0a:	b902      	cbnz	r2, 8013d0e <__tzcalc_limits+0x82>
 8013d0c:	b917      	cbnz	r7, 8013d14 <__tzcalc_limits+0x88>
 8013d0e:	f1bc 0f00 	cmp.w	ip, #0
 8013d12:	d123      	bne.n	8013d5c <__tzcalc_limits+0xd0>
 8013d14:	2b3b      	cmp	r3, #59	; 0x3b
 8013d16:	bfd4      	ite	le
 8013d18:	2300      	movle	r3, #0
 8013d1a:	2301      	movgt	r3, #1
 8013d1c:	4473      	add	r3, lr
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	698d      	ldr	r5, [r1, #24]
 8013d22:	4a2d      	ldr	r2, [pc, #180]	; (8013dd8 <__tzcalc_limits+0x14c>)
 8013d24:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8013d28:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8013d2c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8013d2e:	18ed      	adds	r5, r5, r3
 8013d30:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8013d34:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8013d38:	3128      	adds	r1, #40	; 0x28
 8013d3a:	458b      	cmp	fp, r1
 8013d3c:	d1de      	bne.n	8013cfc <__tzcalc_limits+0x70>
 8013d3e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8013d42:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8013d46:	428c      	cmp	r4, r1
 8013d48:	eb72 0303 	sbcs.w	r3, r2, r3
 8013d4c:	bfb4      	ite	lt
 8013d4e:	2301      	movlt	r3, #1
 8013d50:	2300      	movge	r3, #0
 8013d52:	6003      	str	r3, [r0, #0]
 8013d54:	2001      	movs	r0, #1
 8013d56:	b003      	add	sp, #12
 8013d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e7dd      	b.n	8013d1c <__tzcalc_limits+0x90>
 8013d60:	2d44      	cmp	r5, #68	; 0x44
 8013d62:	d101      	bne.n	8013d68 <__tzcalc_limits+0xdc>
 8013d64:	4423      	add	r3, r4
 8013d66:	e7db      	b.n	8013d20 <__tzcalc_limits+0x94>
 8013d68:	9a00      	ldr	r2, [sp, #0]
 8013d6a:	bb62      	cbnz	r2, 8013dc6 <__tzcalc_limits+0x13a>
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	bf0c      	ite	eq
 8013d70:	4635      	moveq	r5, r6
 8013d72:	2501      	movne	r5, #1
 8013d74:	68ca      	ldr	r2, [r1, #12]
 8013d76:	9201      	str	r2, [sp, #4]
 8013d78:	4a18      	ldr	r2, [pc, #96]	; (8013ddc <__tzcalc_limits+0x150>)
 8013d7a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8013d7e:	fb09 2505 	mla	r5, r9, r5, r2
 8013d82:	46a6      	mov	lr, r4
 8013d84:	f04f 0800 	mov.w	r8, #0
 8013d88:	3d04      	subs	r5, #4
 8013d8a:	9a01      	ldr	r2, [sp, #4]
 8013d8c:	f108 0801 	add.w	r8, r8, #1
 8013d90:	4542      	cmp	r2, r8
 8013d92:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8013d96:	dc18      	bgt.n	8013dca <__tzcalc_limits+0x13e>
 8013d98:	f10e 0504 	add.w	r5, lr, #4
 8013d9c:	fb95 f8fa 	sdiv	r8, r5, sl
 8013da0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8013da4:	eba5 0808 	sub.w	r8, r5, r8
 8013da8:	ebb3 0808 	subs.w	r8, r3, r8
 8013dac:	690b      	ldr	r3, [r1, #16]
 8013dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8013db2:	bf48      	it	mi
 8013db4:	f108 0807 	addmi.w	r8, r8, #7
 8013db8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013dbc:	4443      	add	r3, r8
 8013dbe:	454b      	cmp	r3, r9
 8013dc0:	da05      	bge.n	8013dce <__tzcalc_limits+0x142>
 8013dc2:	4473      	add	r3, lr
 8013dc4:	e7ac      	b.n	8013d20 <__tzcalc_limits+0x94>
 8013dc6:	4635      	mov	r5, r6
 8013dc8:	e7d4      	b.n	8013d74 <__tzcalc_limits+0xe8>
 8013dca:	44ce      	add	lr, r9
 8013dcc:	e7dd      	b.n	8013d8a <__tzcalc_limits+0xfe>
 8013dce:	3b07      	subs	r3, #7
 8013dd0:	e7f5      	b.n	8013dbe <__tzcalc_limits+0x132>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	e7bf      	b.n	8013d56 <__tzcalc_limits+0xca>
 8013dd6:	bf00      	nop
 8013dd8:	00015180 	.word	0x00015180
 8013ddc:	080185dc 	.word	0x080185dc

08013de0 <__tz_lock>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__tz_lock+0x8>)
 8013de2:	f001 b946 	b.w	8015072 <__retarget_lock_acquire>
 8013de6:	bf00      	nop
 8013de8:	2000a7b0 	.word	0x2000a7b0

08013dec <__tz_unlock>:
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <__tz_unlock+0x8>)
 8013dee:	f001 b942 	b.w	8015076 <__retarget_lock_release>
 8013df2:	bf00      	nop
 8013df4:	2000a7b0 	.word	0x2000a7b0

08013df8 <_tzset_unlocked>:
 8013df8:	4b01      	ldr	r3, [pc, #4]	; (8013e00 <_tzset_unlocked+0x8>)
 8013dfa:	6818      	ldr	r0, [r3, #0]
 8013dfc:	f000 b802 	b.w	8013e04 <_tzset_unlocked_r>
 8013e00:	20000020 	.word	0x20000020

08013e04 <_tzset_unlocked_r>:
 8013e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	b08d      	sub	sp, #52	; 0x34
 8013e0a:	4607      	mov	r7, r0
 8013e0c:	f001 f87c 	bl	8014f08 <__gettzinfo>
 8013e10:	49b0      	ldr	r1, [pc, #704]	; (80140d4 <_tzset_unlocked_r+0x2d0>)
 8013e12:	4eb1      	ldr	r6, [pc, #708]	; (80140d8 <_tzset_unlocked_r+0x2d4>)
 8013e14:	4605      	mov	r5, r0
 8013e16:	4638      	mov	r0, r7
 8013e18:	f001 f86e 	bl	8014ef8 <_getenv_r>
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	b970      	cbnz	r0, 8013e3e <_tzset_unlocked_r+0x3a>
 8013e20:	4bae      	ldr	r3, [pc, #696]	; (80140dc <_tzset_unlocked_r+0x2d8>)
 8013e22:	4aaf      	ldr	r2, [pc, #700]	; (80140e0 <_tzset_unlocked_r+0x2dc>)
 8013e24:	6018      	str	r0, [r3, #0]
 8013e26:	4baf      	ldr	r3, [pc, #700]	; (80140e4 <_tzset_unlocked_r+0x2e0>)
 8013e28:	6018      	str	r0, [r3, #0]
 8013e2a:	4baf      	ldr	r3, [pc, #700]	; (80140e8 <_tzset_unlocked_r+0x2e4>)
 8013e2c:	6830      	ldr	r0, [r6, #0]
 8013e2e:	e9c3 2200 	strd	r2, r2, [r3]
 8013e32:	f7fe fee3 	bl	8012bfc <free>
 8013e36:	6034      	str	r4, [r6, #0]
 8013e38:	b00d      	add	sp, #52	; 0x34
 8013e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3e:	6831      	ldr	r1, [r6, #0]
 8013e40:	2900      	cmp	r1, #0
 8013e42:	d162      	bne.n	8013f0a <_tzset_unlocked_r+0x106>
 8013e44:	6830      	ldr	r0, [r6, #0]
 8013e46:	f7fe fed9 	bl	8012bfc <free>
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f7ec f998 	bl	8000180 <strlen>
 8013e50:	1c41      	adds	r1, r0, #1
 8013e52:	4638      	mov	r0, r7
 8013e54:	f7ff f9ce 	bl	80131f4 <_malloc_r>
 8013e58:	6030      	str	r0, [r6, #0]
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d15a      	bne.n	8013f14 <_tzset_unlocked_r+0x110>
 8013e5e:	7823      	ldrb	r3, [r4, #0]
 8013e60:	4aa2      	ldr	r2, [pc, #648]	; (80140ec <_tzset_unlocked_r+0x2e8>)
 8013e62:	49a3      	ldr	r1, [pc, #652]	; (80140f0 <_tzset_unlocked_r+0x2ec>)
 8013e64:	2b3a      	cmp	r3, #58	; 0x3a
 8013e66:	bf08      	it	eq
 8013e68:	3401      	addeq	r4, #1
 8013e6a:	ae0a      	add	r6, sp, #40	; 0x28
 8013e6c:	4633      	mov	r3, r6
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f001 ff60 	bl	8015d34 <siscanf>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	dddf      	ble.n	8013e38 <_tzset_unlocked_r+0x34>
 8013e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e7a:	18e7      	adds	r7, r4, r3
 8013e7c:	5ce3      	ldrb	r3, [r4, r3]
 8013e7e:	2b2d      	cmp	r3, #45	; 0x2d
 8013e80:	d14c      	bne.n	8013f1c <_tzset_unlocked_r+0x118>
 8013e82:	3701      	adds	r7, #1
 8013e84:	f04f 38ff 	mov.w	r8, #4294967295
 8013e88:	f10d 0a20 	add.w	sl, sp, #32
 8013e8c:	f10d 0b1e 	add.w	fp, sp, #30
 8013e90:	2400      	movs	r4, #0
 8013e92:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8013e96:	4997      	ldr	r1, [pc, #604]	; (80140f4 <_tzset_unlocked_r+0x2f0>)
 8013e98:	9603      	str	r6, [sp, #12]
 8013e9a:	f8cd b000 	str.w	fp, [sp]
 8013e9e:	4633      	mov	r3, r6
 8013ea0:	aa07      	add	r2, sp, #28
 8013ea2:	4638      	mov	r0, r7
 8013ea4:	f8ad 401e 	strh.w	r4, [sp, #30]
 8013ea8:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013eac:	f001 ff42 	bl	8015d34 <siscanf>
 8013eb0:	42a0      	cmp	r0, r4
 8013eb2:	ddc1      	ble.n	8013e38 <_tzset_unlocked_r+0x34>
 8013eb4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013eb8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013ebc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014100 <_tzset_unlocked_r+0x2fc>
 8013ec0:	213c      	movs	r1, #60	; 0x3c
 8013ec2:	fb01 3302 	mla	r3, r1, r2, r3
 8013ec6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8013eca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013ece:	fb01 3302 	mla	r3, r1, r2, r3
 8013ed2:	fb08 f303 	mul.w	r3, r8, r3
 8013ed6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80140e8 <_tzset_unlocked_r+0x2e4>
 8013eda:	62ab      	str	r3, [r5, #40]	; 0x28
 8013edc:	4b83      	ldr	r3, [pc, #524]	; (80140ec <_tzset_unlocked_r+0x2e8>)
 8013ede:	f8c8 3000 	str.w	r3, [r8]
 8013ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ee4:	4982      	ldr	r1, [pc, #520]	; (80140f0 <_tzset_unlocked_r+0x2ec>)
 8013ee6:	441f      	add	r7, r3
 8013ee8:	464a      	mov	r2, r9
 8013eea:	4633      	mov	r3, r6
 8013eec:	4638      	mov	r0, r7
 8013eee:	f001 ff21 	bl	8015d34 <siscanf>
 8013ef2:	42a0      	cmp	r0, r4
 8013ef4:	dc18      	bgt.n	8013f28 <_tzset_unlocked_r+0x124>
 8013ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8013efa:	f8c8 3004 	str.w	r3, [r8, #4]
 8013efe:	4b77      	ldr	r3, [pc, #476]	; (80140dc <_tzset_unlocked_r+0x2d8>)
 8013f00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	4b77      	ldr	r3, [pc, #476]	; (80140e4 <_tzset_unlocked_r+0x2e0>)
 8013f06:	601c      	str	r4, [r3, #0]
 8013f08:	e796      	b.n	8013e38 <_tzset_unlocked_r+0x34>
 8013f0a:	f7ec f991 	bl	8000230 <strcmp>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d198      	bne.n	8013e44 <_tzset_unlocked_r+0x40>
 8013f12:	e791      	b.n	8013e38 <_tzset_unlocked_r+0x34>
 8013f14:	4621      	mov	r1, r4
 8013f16:	f001 ff7e 	bl	8015e16 <strcpy>
 8013f1a:	e7a0      	b.n	8013e5e <_tzset_unlocked_r+0x5a>
 8013f1c:	2b2b      	cmp	r3, #43	; 0x2b
 8013f1e:	bf08      	it	eq
 8013f20:	3701      	addeq	r7, #1
 8013f22:	f04f 0801 	mov.w	r8, #1
 8013f26:	e7af      	b.n	8013e88 <_tzset_unlocked_r+0x84>
 8013f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f2a:	f8c8 9004 	str.w	r9, [r8, #4]
 8013f2e:	18fc      	adds	r4, r7, r3
 8013f30:	5cfb      	ldrb	r3, [r7, r3]
 8013f32:	2b2d      	cmp	r3, #45	; 0x2d
 8013f34:	f040 808b 	bne.w	801404e <_tzset_unlocked_r+0x24a>
 8013f38:	3401      	adds	r4, #1
 8013f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8013f3e:	2300      	movs	r3, #0
 8013f40:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f4e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013f52:	e9cd b600 	strd	fp, r6, [sp]
 8013f56:	4967      	ldr	r1, [pc, #412]	; (80140f4 <_tzset_unlocked_r+0x2f0>)
 8013f58:	4633      	mov	r3, r6
 8013f5a:	aa07      	add	r2, sp, #28
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f001 fee9 	bl	8015d34 <siscanf>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	dc78      	bgt.n	8014058 <_tzset_unlocked_r+0x254>
 8013f66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013f68:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013f6c:	652b      	str	r3, [r5, #80]	; 0x50
 8013f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f70:	462f      	mov	r7, r5
 8013f72:	441c      	add	r4, r3
 8013f74:	f04f 0900 	mov.w	r9, #0
 8013f78:	7823      	ldrb	r3, [r4, #0]
 8013f7a:	2b2c      	cmp	r3, #44	; 0x2c
 8013f7c:	bf08      	it	eq
 8013f7e:	3401      	addeq	r4, #1
 8013f80:	f894 8000 	ldrb.w	r8, [r4]
 8013f84:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013f88:	d178      	bne.n	801407c <_tzset_unlocked_r+0x278>
 8013f8a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013f8e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013f92:	ab09      	add	r3, sp, #36	; 0x24
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	4958      	ldr	r1, [pc, #352]	; (80140f8 <_tzset_unlocked_r+0x2f4>)
 8013f98:	9603      	str	r6, [sp, #12]
 8013f9a:	4633      	mov	r3, r6
 8013f9c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f001 fec7 	bl	8015d34 <siscanf>
 8013fa6:	2803      	cmp	r0, #3
 8013fa8:	f47f af46 	bne.w	8013e38 <_tzset_unlocked_r+0x34>
 8013fac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013fb0:	1e4b      	subs	r3, r1, #1
 8013fb2:	2b0b      	cmp	r3, #11
 8013fb4:	f63f af40 	bhi.w	8013e38 <_tzset_unlocked_r+0x34>
 8013fb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013fbc:	1e53      	subs	r3, r2, #1
 8013fbe:	2b04      	cmp	r3, #4
 8013fc0:	f63f af3a 	bhi.w	8013e38 <_tzset_unlocked_r+0x34>
 8013fc4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013fc8:	2b06      	cmp	r3, #6
 8013fca:	f63f af35 	bhi.w	8013e38 <_tzset_unlocked_r+0x34>
 8013fce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8013fd2:	f887 8008 	strb.w	r8, [r7, #8]
 8013fd6:	617b      	str	r3, [r7, #20]
 8013fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fda:	eb04 0803 	add.w	r8, r4, r3
 8013fde:	2302      	movs	r3, #2
 8013fe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013fea:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013fee:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff0:	f898 3000 	ldrb.w	r3, [r8]
 8013ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ff6:	d109      	bne.n	801400c <_tzset_unlocked_r+0x208>
 8013ff8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013ffc:	e9cd b600 	strd	fp, r6, [sp]
 8014000:	493e      	ldr	r1, [pc, #248]	; (80140fc <_tzset_unlocked_r+0x2f8>)
 8014002:	4633      	mov	r3, r6
 8014004:	aa07      	add	r2, sp, #28
 8014006:	4640      	mov	r0, r8
 8014008:	f001 fe94 	bl	8015d34 <siscanf>
 801400c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014010:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014014:	213c      	movs	r1, #60	; 0x3c
 8014016:	fb01 3302 	mla	r3, r1, r2, r3
 801401a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801401e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014022:	fb01 3302 	mla	r3, r1, r2, r3
 8014026:	61bb      	str	r3, [r7, #24]
 8014028:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801402a:	3728      	adds	r7, #40	; 0x28
 801402c:	4444      	add	r4, r8
 801402e:	f1b9 0f00 	cmp.w	r9, #0
 8014032:	d020      	beq.n	8014076 <_tzset_unlocked_r+0x272>
 8014034:	6868      	ldr	r0, [r5, #4]
 8014036:	f7ff fe29 	bl	8013c8c <__tzcalc_limits>
 801403a:	4b28      	ldr	r3, [pc, #160]	; (80140dc <_tzset_unlocked_r+0x2d8>)
 801403c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801403e:	601a      	str	r2, [r3, #0]
 8014040:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014042:	1a9b      	subs	r3, r3, r2
 8014044:	4a27      	ldr	r2, [pc, #156]	; (80140e4 <_tzset_unlocked_r+0x2e0>)
 8014046:	bf18      	it	ne
 8014048:	2301      	movne	r3, #1
 801404a:	6013      	str	r3, [r2, #0]
 801404c:	e6f4      	b.n	8013e38 <_tzset_unlocked_r+0x34>
 801404e:	2b2b      	cmp	r3, #43	; 0x2b
 8014050:	bf08      	it	eq
 8014052:	3401      	addeq	r4, #1
 8014054:	2701      	movs	r7, #1
 8014056:	e772      	b.n	8013f3e <_tzset_unlocked_r+0x13a>
 8014058:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801405c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014060:	213c      	movs	r1, #60	; 0x3c
 8014062:	fb01 3302 	mla	r3, r1, r2, r3
 8014066:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801406a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801406e:	fb01 3302 	mla	r3, r1, r2, r3
 8014072:	437b      	muls	r3, r7
 8014074:	e77a      	b.n	8013f6c <_tzset_unlocked_r+0x168>
 8014076:	f04f 0901 	mov.w	r9, #1
 801407a:	e77d      	b.n	8013f78 <_tzset_unlocked_r+0x174>
 801407c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014080:	bf06      	itte	eq
 8014082:	3401      	addeq	r4, #1
 8014084:	4643      	moveq	r3, r8
 8014086:	2344      	movne	r3, #68	; 0x44
 8014088:	220a      	movs	r2, #10
 801408a:	a90b      	add	r1, sp, #44	; 0x2c
 801408c:	4620      	mov	r0, r4
 801408e:	9305      	str	r3, [sp, #20]
 8014090:	f001 ff52 	bl	8015f38 <strtoul>
 8014094:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014098:	9b05      	ldr	r3, [sp, #20]
 801409a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801409e:	45a0      	cmp	r8, r4
 80140a0:	d114      	bne.n	80140cc <_tzset_unlocked_r+0x2c8>
 80140a2:	234d      	movs	r3, #77	; 0x4d
 80140a4:	f1b9 0f00 	cmp.w	r9, #0
 80140a8:	d107      	bne.n	80140ba <_tzset_unlocked_r+0x2b6>
 80140aa:	722b      	strb	r3, [r5, #8]
 80140ac:	2103      	movs	r1, #3
 80140ae:	2302      	movs	r3, #2
 80140b0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80140b4:	f8c5 9014 	str.w	r9, [r5, #20]
 80140b8:	e791      	b.n	8013fde <_tzset_unlocked_r+0x1da>
 80140ba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80140be:	220b      	movs	r2, #11
 80140c0:	2301      	movs	r3, #1
 80140c2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80140c6:	2300      	movs	r3, #0
 80140c8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80140ca:	e788      	b.n	8013fde <_tzset_unlocked_r+0x1da>
 80140cc:	b280      	uxth	r0, r0
 80140ce:	723b      	strb	r3, [r7, #8]
 80140d0:	6178      	str	r0, [r7, #20]
 80140d2:	e784      	b.n	8013fde <_tzset_unlocked_r+0x1da>
 80140d4:	080186c9 	.word	0x080186c9
 80140d8:	2000a7a0 	.word	0x2000a7a0
 80140dc:	2000a7a8 	.word	0x2000a7a8
 80140e0:	080186cc 	.word	0x080186cc
 80140e4:	2000a7a4 	.word	0x2000a7a4
 80140e8:	20000084 	.word	0x20000084
 80140ec:	2000a793 	.word	0x2000a793
 80140f0:	080186d0 	.word	0x080186d0
 80140f4:	080186f3 	.word	0x080186f3
 80140f8:	080186df 	.word	0x080186df
 80140fc:	080186f2 	.word	0x080186f2
 8014100:	2000a788 	.word	0x2000a788

08014104 <__assert_func>:
 8014104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014106:	4614      	mov	r4, r2
 8014108:	461a      	mov	r2, r3
 801410a:	4b09      	ldr	r3, [pc, #36]	; (8014130 <__assert_func+0x2c>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	4605      	mov	r5, r0
 8014110:	68d8      	ldr	r0, [r3, #12]
 8014112:	b14c      	cbz	r4, 8014128 <__assert_func+0x24>
 8014114:	4b07      	ldr	r3, [pc, #28]	; (8014134 <__assert_func+0x30>)
 8014116:	9100      	str	r1, [sp, #0]
 8014118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801411c:	4906      	ldr	r1, [pc, #24]	; (8014138 <__assert_func+0x34>)
 801411e:	462b      	mov	r3, r5
 8014120:	f000 fe9c 	bl	8014e5c <fiprintf>
 8014124:	f001 ffe4 	bl	80160f0 <abort>
 8014128:	4b04      	ldr	r3, [pc, #16]	; (801413c <__assert_func+0x38>)
 801412a:	461c      	mov	r4, r3
 801412c:	e7f3      	b.n	8014116 <__assert_func+0x12>
 801412e:	bf00      	nop
 8014130:	20000020 	.word	0x20000020
 8014134:	08018705 	.word	0x08018705
 8014138:	08018712 	.word	0x08018712
 801413c:	08018740 	.word	0x08018740

08014140 <div>:
 8014140:	2900      	cmp	r1, #0
 8014142:	b510      	push	{r4, lr}
 8014144:	fb91 f4f2 	sdiv	r4, r1, r2
 8014148:	fb02 1314 	mls	r3, r2, r4, r1
 801414c:	db06      	blt.n	801415c <div+0x1c>
 801414e:	2b00      	cmp	r3, #0
 8014150:	da01      	bge.n	8014156 <div+0x16>
 8014152:	3401      	adds	r4, #1
 8014154:	1a9b      	subs	r3, r3, r2
 8014156:	e9c0 4300 	strd	r4, r3, [r0]
 801415a:	bd10      	pop	{r4, pc}
 801415c:	2b00      	cmp	r3, #0
 801415e:	bfc4      	itt	gt
 8014160:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8014164:	189b      	addgt	r3, r3, r2
 8014166:	e7f6      	b.n	8014156 <div+0x16>

08014168 <quorem>:
 8014168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	6903      	ldr	r3, [r0, #16]
 801416e:	690c      	ldr	r4, [r1, #16]
 8014170:	42a3      	cmp	r3, r4
 8014172:	4607      	mov	r7, r0
 8014174:	f2c0 8081 	blt.w	801427a <quorem+0x112>
 8014178:	3c01      	subs	r4, #1
 801417a:	f101 0814 	add.w	r8, r1, #20
 801417e:	f100 0514 	add.w	r5, r0, #20
 8014182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801418c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014190:	3301      	adds	r3, #1
 8014192:	429a      	cmp	r2, r3
 8014194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801419c:	fbb2 f6f3 	udiv	r6, r2, r3
 80141a0:	d331      	bcc.n	8014206 <quorem+0x9e>
 80141a2:	f04f 0e00 	mov.w	lr, #0
 80141a6:	4640      	mov	r0, r8
 80141a8:	46ac      	mov	ip, r5
 80141aa:	46f2      	mov	sl, lr
 80141ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80141b0:	b293      	uxth	r3, r2
 80141b2:	fb06 e303 	mla	r3, r6, r3, lr
 80141b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	ebaa 0303 	sub.w	r3, sl, r3
 80141c0:	f8dc a000 	ldr.w	sl, [ip]
 80141c4:	0c12      	lsrs	r2, r2, #16
 80141c6:	fa13 f38a 	uxtah	r3, r3, sl
 80141ca:	fb06 e202 	mla	r2, r6, r2, lr
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	9b00      	ldr	r3, [sp, #0]
 80141d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80141d6:	b292      	uxth	r2, r2
 80141d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80141dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80141e4:	4581      	cmp	r9, r0
 80141e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141ea:	f84c 3b04 	str.w	r3, [ip], #4
 80141ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141f2:	d2db      	bcs.n	80141ac <quorem+0x44>
 80141f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80141f8:	b92b      	cbnz	r3, 8014206 <quorem+0x9e>
 80141fa:	9b01      	ldr	r3, [sp, #4]
 80141fc:	3b04      	subs	r3, #4
 80141fe:	429d      	cmp	r5, r3
 8014200:	461a      	mov	r2, r3
 8014202:	d32e      	bcc.n	8014262 <quorem+0xfa>
 8014204:	613c      	str	r4, [r7, #16]
 8014206:	4638      	mov	r0, r7
 8014208:	f001 f9c6 	bl	8015598 <__mcmp>
 801420c:	2800      	cmp	r0, #0
 801420e:	db24      	blt.n	801425a <quorem+0xf2>
 8014210:	3601      	adds	r6, #1
 8014212:	4628      	mov	r0, r5
 8014214:	f04f 0c00 	mov.w	ip, #0
 8014218:	f858 2b04 	ldr.w	r2, [r8], #4
 801421c:	f8d0 e000 	ldr.w	lr, [r0]
 8014220:	b293      	uxth	r3, r2
 8014222:	ebac 0303 	sub.w	r3, ip, r3
 8014226:	0c12      	lsrs	r2, r2, #16
 8014228:	fa13 f38e 	uxtah	r3, r3, lr
 801422c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014234:	b29b      	uxth	r3, r3
 8014236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801423a:	45c1      	cmp	r9, r8
 801423c:	f840 3b04 	str.w	r3, [r0], #4
 8014240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014244:	d2e8      	bcs.n	8014218 <quorem+0xb0>
 8014246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801424a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801424e:	b922      	cbnz	r2, 801425a <quorem+0xf2>
 8014250:	3b04      	subs	r3, #4
 8014252:	429d      	cmp	r5, r3
 8014254:	461a      	mov	r2, r3
 8014256:	d30a      	bcc.n	801426e <quorem+0x106>
 8014258:	613c      	str	r4, [r7, #16]
 801425a:	4630      	mov	r0, r6
 801425c:	b003      	add	sp, #12
 801425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014262:	6812      	ldr	r2, [r2, #0]
 8014264:	3b04      	subs	r3, #4
 8014266:	2a00      	cmp	r2, #0
 8014268:	d1cc      	bne.n	8014204 <quorem+0x9c>
 801426a:	3c01      	subs	r4, #1
 801426c:	e7c7      	b.n	80141fe <quorem+0x96>
 801426e:	6812      	ldr	r2, [r2, #0]
 8014270:	3b04      	subs	r3, #4
 8014272:	2a00      	cmp	r2, #0
 8014274:	d1f0      	bne.n	8014258 <quorem+0xf0>
 8014276:	3c01      	subs	r4, #1
 8014278:	e7eb      	b.n	8014252 <quorem+0xea>
 801427a:	2000      	movs	r0, #0
 801427c:	e7ee      	b.n	801425c <quorem+0xf4>
	...

08014280 <_dtoa_r>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	ed2d 8b04 	vpush	{d8-d9}
 8014288:	ec57 6b10 	vmov	r6, r7, d0
 801428c:	b093      	sub	sp, #76	; 0x4c
 801428e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014294:	9106      	str	r1, [sp, #24]
 8014296:	ee10 aa10 	vmov	sl, s0
 801429a:	4604      	mov	r4, r0
 801429c:	9209      	str	r2, [sp, #36]	; 0x24
 801429e:	930c      	str	r3, [sp, #48]	; 0x30
 80142a0:	46bb      	mov	fp, r7
 80142a2:	b975      	cbnz	r5, 80142c2 <_dtoa_r+0x42>
 80142a4:	2010      	movs	r0, #16
 80142a6:	f7fe fca1 	bl	8012bec <malloc>
 80142aa:	4602      	mov	r2, r0
 80142ac:	6260      	str	r0, [r4, #36]	; 0x24
 80142ae:	b920      	cbnz	r0, 80142ba <_dtoa_r+0x3a>
 80142b0:	4ba7      	ldr	r3, [pc, #668]	; (8014550 <_dtoa_r+0x2d0>)
 80142b2:	21ea      	movs	r1, #234	; 0xea
 80142b4:	48a7      	ldr	r0, [pc, #668]	; (8014554 <_dtoa_r+0x2d4>)
 80142b6:	f7ff ff25 	bl	8014104 <__assert_func>
 80142ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142be:	6005      	str	r5, [r0, #0]
 80142c0:	60c5      	str	r5, [r0, #12]
 80142c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142c4:	6819      	ldr	r1, [r3, #0]
 80142c6:	b151      	cbz	r1, 80142de <_dtoa_r+0x5e>
 80142c8:	685a      	ldr	r2, [r3, #4]
 80142ca:	604a      	str	r2, [r1, #4]
 80142cc:	2301      	movs	r3, #1
 80142ce:	4093      	lsls	r3, r2
 80142d0:	608b      	str	r3, [r1, #8]
 80142d2:	4620      	mov	r0, r4
 80142d4:	f000 ff1e 	bl	8015114 <_Bfree>
 80142d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142da:	2200      	movs	r2, #0
 80142dc:	601a      	str	r2, [r3, #0]
 80142de:	1e3b      	subs	r3, r7, #0
 80142e0:	bfaa      	itet	ge
 80142e2:	2300      	movge	r3, #0
 80142e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80142e8:	f8c8 3000 	strge.w	r3, [r8]
 80142ec:	4b9a      	ldr	r3, [pc, #616]	; (8014558 <_dtoa_r+0x2d8>)
 80142ee:	bfbc      	itt	lt
 80142f0:	2201      	movlt	r2, #1
 80142f2:	f8c8 2000 	strlt.w	r2, [r8]
 80142f6:	ea33 030b 	bics.w	r3, r3, fp
 80142fa:	d11b      	bne.n	8014334 <_dtoa_r+0xb4>
 80142fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8014302:	6013      	str	r3, [r2, #0]
 8014304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014308:	4333      	orrs	r3, r6
 801430a:	f000 8592 	beq.w	8014e32 <_dtoa_r+0xbb2>
 801430e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014310:	b963      	cbnz	r3, 801432c <_dtoa_r+0xac>
 8014312:	4b92      	ldr	r3, [pc, #584]	; (801455c <_dtoa_r+0x2dc>)
 8014314:	e022      	b.n	801435c <_dtoa_r+0xdc>
 8014316:	4b92      	ldr	r3, [pc, #584]	; (8014560 <_dtoa_r+0x2e0>)
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	3308      	adds	r3, #8
 801431c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	9801      	ldr	r0, [sp, #4]
 8014322:	b013      	add	sp, #76	; 0x4c
 8014324:	ecbd 8b04 	vpop	{d8-d9}
 8014328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432c:	4b8b      	ldr	r3, [pc, #556]	; (801455c <_dtoa_r+0x2dc>)
 801432e:	9301      	str	r3, [sp, #4]
 8014330:	3303      	adds	r3, #3
 8014332:	e7f3      	b.n	801431c <_dtoa_r+0x9c>
 8014334:	2200      	movs	r2, #0
 8014336:	2300      	movs	r3, #0
 8014338:	4650      	mov	r0, sl
 801433a:	4659      	mov	r1, fp
 801433c:	f7ec fba6 	bl	8000a8c <__aeabi_dcmpeq>
 8014340:	ec4b ab19 	vmov	d9, sl, fp
 8014344:	4680      	mov	r8, r0
 8014346:	b158      	cbz	r0, 8014360 <_dtoa_r+0xe0>
 8014348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801434a:	2301      	movs	r3, #1
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014350:	2b00      	cmp	r3, #0
 8014352:	f000 856b 	beq.w	8014e2c <_dtoa_r+0xbac>
 8014356:	4883      	ldr	r0, [pc, #524]	; (8014564 <_dtoa_r+0x2e4>)
 8014358:	6018      	str	r0, [r3, #0]
 801435a:	1e43      	subs	r3, r0, #1
 801435c:	9301      	str	r3, [sp, #4]
 801435e:	e7df      	b.n	8014320 <_dtoa_r+0xa0>
 8014360:	ec4b ab10 	vmov	d0, sl, fp
 8014364:	aa10      	add	r2, sp, #64	; 0x40
 8014366:	a911      	add	r1, sp, #68	; 0x44
 8014368:	4620      	mov	r0, r4
 801436a:	f001 f9bb 	bl	80156e4 <__d2b>
 801436e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014372:	ee08 0a10 	vmov	s16, r0
 8014376:	2d00      	cmp	r5, #0
 8014378:	f000 8084 	beq.w	8014484 <_dtoa_r+0x204>
 801437c:	ee19 3a90 	vmov	r3, s19
 8014380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014388:	4656      	mov	r6, sl
 801438a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801438e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014396:	4b74      	ldr	r3, [pc, #464]	; (8014568 <_dtoa_r+0x2e8>)
 8014398:	2200      	movs	r2, #0
 801439a:	4630      	mov	r0, r6
 801439c:	4639      	mov	r1, r7
 801439e:	f7eb ff55 	bl	800024c <__aeabi_dsub>
 80143a2:	a365      	add	r3, pc, #404	; (adr r3, 8014538 <_dtoa_r+0x2b8>)
 80143a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a8:	f7ec f908 	bl	80005bc <__aeabi_dmul>
 80143ac:	a364      	add	r3, pc, #400	; (adr r3, 8014540 <_dtoa_r+0x2c0>)
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f7eb ff4d 	bl	8000250 <__adddf3>
 80143b6:	4606      	mov	r6, r0
 80143b8:	4628      	mov	r0, r5
 80143ba:	460f      	mov	r7, r1
 80143bc:	f7ec f894 	bl	80004e8 <__aeabi_i2d>
 80143c0:	a361      	add	r3, pc, #388	; (adr r3, 8014548 <_dtoa_r+0x2c8>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7ec f8f9 	bl	80005bc <__aeabi_dmul>
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	4630      	mov	r0, r6
 80143d0:	4639      	mov	r1, r7
 80143d2:	f7eb ff3d 	bl	8000250 <__adddf3>
 80143d6:	4606      	mov	r6, r0
 80143d8:	460f      	mov	r7, r1
 80143da:	f7ec fb9f 	bl	8000b1c <__aeabi_d2iz>
 80143de:	2200      	movs	r2, #0
 80143e0:	9000      	str	r0, [sp, #0]
 80143e2:	2300      	movs	r3, #0
 80143e4:	4630      	mov	r0, r6
 80143e6:	4639      	mov	r1, r7
 80143e8:	f7ec fb5a 	bl	8000aa0 <__aeabi_dcmplt>
 80143ec:	b150      	cbz	r0, 8014404 <_dtoa_r+0x184>
 80143ee:	9800      	ldr	r0, [sp, #0]
 80143f0:	f7ec f87a 	bl	80004e8 <__aeabi_i2d>
 80143f4:	4632      	mov	r2, r6
 80143f6:	463b      	mov	r3, r7
 80143f8:	f7ec fb48 	bl	8000a8c <__aeabi_dcmpeq>
 80143fc:	b910      	cbnz	r0, 8014404 <_dtoa_r+0x184>
 80143fe:	9b00      	ldr	r3, [sp, #0]
 8014400:	3b01      	subs	r3, #1
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	9b00      	ldr	r3, [sp, #0]
 8014406:	2b16      	cmp	r3, #22
 8014408:	d85a      	bhi.n	80144c0 <_dtoa_r+0x240>
 801440a:	9a00      	ldr	r2, [sp, #0]
 801440c:	4b57      	ldr	r3, [pc, #348]	; (801456c <_dtoa_r+0x2ec>)
 801440e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	ec51 0b19 	vmov	r0, r1, d9
 801441a:	f7ec fb41 	bl	8000aa0 <__aeabi_dcmplt>
 801441e:	2800      	cmp	r0, #0
 8014420:	d050      	beq.n	80144c4 <_dtoa_r+0x244>
 8014422:	9b00      	ldr	r3, [sp, #0]
 8014424:	3b01      	subs	r3, #1
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	2300      	movs	r3, #0
 801442a:	930b      	str	r3, [sp, #44]	; 0x2c
 801442c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801442e:	1b5d      	subs	r5, r3, r5
 8014430:	1e6b      	subs	r3, r5, #1
 8014432:	9305      	str	r3, [sp, #20]
 8014434:	bf45      	ittet	mi
 8014436:	f1c5 0301 	rsbmi	r3, r5, #1
 801443a:	9304      	strmi	r3, [sp, #16]
 801443c:	2300      	movpl	r3, #0
 801443e:	2300      	movmi	r3, #0
 8014440:	bf4c      	ite	mi
 8014442:	9305      	strmi	r3, [sp, #20]
 8014444:	9304      	strpl	r3, [sp, #16]
 8014446:	9b00      	ldr	r3, [sp, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	db3d      	blt.n	80144c8 <_dtoa_r+0x248>
 801444c:	9b05      	ldr	r3, [sp, #20]
 801444e:	9a00      	ldr	r2, [sp, #0]
 8014450:	920a      	str	r2, [sp, #40]	; 0x28
 8014452:	4413      	add	r3, r2
 8014454:	9305      	str	r3, [sp, #20]
 8014456:	2300      	movs	r3, #0
 8014458:	9307      	str	r3, [sp, #28]
 801445a:	9b06      	ldr	r3, [sp, #24]
 801445c:	2b09      	cmp	r3, #9
 801445e:	f200 8089 	bhi.w	8014574 <_dtoa_r+0x2f4>
 8014462:	2b05      	cmp	r3, #5
 8014464:	bfc4      	itt	gt
 8014466:	3b04      	subgt	r3, #4
 8014468:	9306      	strgt	r3, [sp, #24]
 801446a:	9b06      	ldr	r3, [sp, #24]
 801446c:	f1a3 0302 	sub.w	r3, r3, #2
 8014470:	bfcc      	ite	gt
 8014472:	2500      	movgt	r5, #0
 8014474:	2501      	movle	r5, #1
 8014476:	2b03      	cmp	r3, #3
 8014478:	f200 8087 	bhi.w	801458a <_dtoa_r+0x30a>
 801447c:	e8df f003 	tbb	[pc, r3]
 8014480:	59383a2d 	.word	0x59383a2d
 8014484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014488:	441d      	add	r5, r3
 801448a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801448e:	2b20      	cmp	r3, #32
 8014490:	bfc1      	itttt	gt
 8014492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801449a:	fa0b f303 	lslgt.w	r3, fp, r3
 801449e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80144a2:	bfda      	itte	le
 80144a4:	f1c3 0320 	rsble	r3, r3, #32
 80144a8:	fa06 f003 	lslle.w	r0, r6, r3
 80144ac:	4318      	orrgt	r0, r3
 80144ae:	f7ec f80b 	bl	80004c8 <__aeabi_ui2d>
 80144b2:	2301      	movs	r3, #1
 80144b4:	4606      	mov	r6, r0
 80144b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80144ba:	3d01      	subs	r5, #1
 80144bc:	930e      	str	r3, [sp, #56]	; 0x38
 80144be:	e76a      	b.n	8014396 <_dtoa_r+0x116>
 80144c0:	2301      	movs	r3, #1
 80144c2:	e7b2      	b.n	801442a <_dtoa_r+0x1aa>
 80144c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80144c6:	e7b1      	b.n	801442c <_dtoa_r+0x1ac>
 80144c8:	9b04      	ldr	r3, [sp, #16]
 80144ca:	9a00      	ldr	r2, [sp, #0]
 80144cc:	1a9b      	subs	r3, r3, r2
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	4253      	negs	r3, r2
 80144d2:	9307      	str	r3, [sp, #28]
 80144d4:	2300      	movs	r3, #0
 80144d6:	930a      	str	r3, [sp, #40]	; 0x28
 80144d8:	e7bf      	b.n	801445a <_dtoa_r+0x1da>
 80144da:	2300      	movs	r3, #0
 80144dc:	9308      	str	r3, [sp, #32]
 80144de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	dc55      	bgt.n	8014590 <_dtoa_r+0x310>
 80144e4:	2301      	movs	r3, #1
 80144e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80144ea:	461a      	mov	r2, r3
 80144ec:	9209      	str	r2, [sp, #36]	; 0x24
 80144ee:	e00c      	b.n	801450a <_dtoa_r+0x28a>
 80144f0:	2301      	movs	r3, #1
 80144f2:	e7f3      	b.n	80144dc <_dtoa_r+0x25c>
 80144f4:	2300      	movs	r3, #0
 80144f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144f8:	9308      	str	r3, [sp, #32]
 80144fa:	9b00      	ldr	r3, [sp, #0]
 80144fc:	4413      	add	r3, r2
 80144fe:	9302      	str	r3, [sp, #8]
 8014500:	3301      	adds	r3, #1
 8014502:	2b01      	cmp	r3, #1
 8014504:	9303      	str	r3, [sp, #12]
 8014506:	bfb8      	it	lt
 8014508:	2301      	movlt	r3, #1
 801450a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801450c:	2200      	movs	r2, #0
 801450e:	6042      	str	r2, [r0, #4]
 8014510:	2204      	movs	r2, #4
 8014512:	f102 0614 	add.w	r6, r2, #20
 8014516:	429e      	cmp	r6, r3
 8014518:	6841      	ldr	r1, [r0, #4]
 801451a:	d93d      	bls.n	8014598 <_dtoa_r+0x318>
 801451c:	4620      	mov	r0, r4
 801451e:	f000 fdb9 	bl	8015094 <_Balloc>
 8014522:	9001      	str	r0, [sp, #4]
 8014524:	2800      	cmp	r0, #0
 8014526:	d13b      	bne.n	80145a0 <_dtoa_r+0x320>
 8014528:	4b11      	ldr	r3, [pc, #68]	; (8014570 <_dtoa_r+0x2f0>)
 801452a:	4602      	mov	r2, r0
 801452c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014530:	e6c0      	b.n	80142b4 <_dtoa_r+0x34>
 8014532:	2301      	movs	r3, #1
 8014534:	e7df      	b.n	80144f6 <_dtoa_r+0x276>
 8014536:	bf00      	nop
 8014538:	636f4361 	.word	0x636f4361
 801453c:	3fd287a7 	.word	0x3fd287a7
 8014540:	8b60c8b3 	.word	0x8b60c8b3
 8014544:	3fc68a28 	.word	0x3fc68a28
 8014548:	509f79fb 	.word	0x509f79fb
 801454c:	3fd34413 	.word	0x3fd34413
 8014550:	08018508 	.word	0x08018508
 8014554:	0801874e 	.word	0x0801874e
 8014558:	7ff00000 	.word	0x7ff00000
 801455c:	0801874a 	.word	0x0801874a
 8014560:	08018741 	.word	0x08018741
 8014564:	08018a97 	.word	0x08018a97
 8014568:	3ff80000 	.word	0x3ff80000
 801456c:	08018840 	.word	0x08018840
 8014570:	080187a9 	.word	0x080187a9
 8014574:	2501      	movs	r5, #1
 8014576:	2300      	movs	r3, #0
 8014578:	9306      	str	r3, [sp, #24]
 801457a:	9508      	str	r5, [sp, #32]
 801457c:	f04f 33ff 	mov.w	r3, #4294967295
 8014580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014584:	2200      	movs	r2, #0
 8014586:	2312      	movs	r3, #18
 8014588:	e7b0      	b.n	80144ec <_dtoa_r+0x26c>
 801458a:	2301      	movs	r3, #1
 801458c:	9308      	str	r3, [sp, #32]
 801458e:	e7f5      	b.n	801457c <_dtoa_r+0x2fc>
 8014590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014596:	e7b8      	b.n	801450a <_dtoa_r+0x28a>
 8014598:	3101      	adds	r1, #1
 801459a:	6041      	str	r1, [r0, #4]
 801459c:	0052      	lsls	r2, r2, #1
 801459e:	e7b8      	b.n	8014512 <_dtoa_r+0x292>
 80145a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145a2:	9a01      	ldr	r2, [sp, #4]
 80145a4:	601a      	str	r2, [r3, #0]
 80145a6:	9b03      	ldr	r3, [sp, #12]
 80145a8:	2b0e      	cmp	r3, #14
 80145aa:	f200 809d 	bhi.w	80146e8 <_dtoa_r+0x468>
 80145ae:	2d00      	cmp	r5, #0
 80145b0:	f000 809a 	beq.w	80146e8 <_dtoa_r+0x468>
 80145b4:	9b00      	ldr	r3, [sp, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	dd32      	ble.n	8014620 <_dtoa_r+0x3a0>
 80145ba:	4ab7      	ldr	r2, [pc, #732]	; (8014898 <_dtoa_r+0x618>)
 80145bc:	f003 030f 	and.w	r3, r3, #15
 80145c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80145c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145c8:	9b00      	ldr	r3, [sp, #0]
 80145ca:	05d8      	lsls	r0, r3, #23
 80145cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80145d0:	d516      	bpl.n	8014600 <_dtoa_r+0x380>
 80145d2:	4bb2      	ldr	r3, [pc, #712]	; (801489c <_dtoa_r+0x61c>)
 80145d4:	ec51 0b19 	vmov	r0, r1, d9
 80145d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145dc:	f7ec f918 	bl	8000810 <__aeabi_ddiv>
 80145e0:	f007 070f 	and.w	r7, r7, #15
 80145e4:	4682      	mov	sl, r0
 80145e6:	468b      	mov	fp, r1
 80145e8:	2503      	movs	r5, #3
 80145ea:	4eac      	ldr	r6, [pc, #688]	; (801489c <_dtoa_r+0x61c>)
 80145ec:	b957      	cbnz	r7, 8014604 <_dtoa_r+0x384>
 80145ee:	4642      	mov	r2, r8
 80145f0:	464b      	mov	r3, r9
 80145f2:	4650      	mov	r0, sl
 80145f4:	4659      	mov	r1, fp
 80145f6:	f7ec f90b 	bl	8000810 <__aeabi_ddiv>
 80145fa:	4682      	mov	sl, r0
 80145fc:	468b      	mov	fp, r1
 80145fe:	e028      	b.n	8014652 <_dtoa_r+0x3d2>
 8014600:	2502      	movs	r5, #2
 8014602:	e7f2      	b.n	80145ea <_dtoa_r+0x36a>
 8014604:	07f9      	lsls	r1, r7, #31
 8014606:	d508      	bpl.n	801461a <_dtoa_r+0x39a>
 8014608:	4640      	mov	r0, r8
 801460a:	4649      	mov	r1, r9
 801460c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014610:	f7eb ffd4 	bl	80005bc <__aeabi_dmul>
 8014614:	3501      	adds	r5, #1
 8014616:	4680      	mov	r8, r0
 8014618:	4689      	mov	r9, r1
 801461a:	107f      	asrs	r7, r7, #1
 801461c:	3608      	adds	r6, #8
 801461e:	e7e5      	b.n	80145ec <_dtoa_r+0x36c>
 8014620:	f000 809b 	beq.w	801475a <_dtoa_r+0x4da>
 8014624:	9b00      	ldr	r3, [sp, #0]
 8014626:	4f9d      	ldr	r7, [pc, #628]	; (801489c <_dtoa_r+0x61c>)
 8014628:	425e      	negs	r6, r3
 801462a:	4b9b      	ldr	r3, [pc, #620]	; (8014898 <_dtoa_r+0x618>)
 801462c:	f006 020f 	and.w	r2, r6, #15
 8014630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014638:	ec51 0b19 	vmov	r0, r1, d9
 801463c:	f7eb ffbe 	bl	80005bc <__aeabi_dmul>
 8014640:	1136      	asrs	r6, r6, #4
 8014642:	4682      	mov	sl, r0
 8014644:	468b      	mov	fp, r1
 8014646:	2300      	movs	r3, #0
 8014648:	2502      	movs	r5, #2
 801464a:	2e00      	cmp	r6, #0
 801464c:	d17a      	bne.n	8014744 <_dtoa_r+0x4c4>
 801464e:	2b00      	cmp	r3, #0
 8014650:	d1d3      	bne.n	80145fa <_dtoa_r+0x37a>
 8014652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014654:	2b00      	cmp	r3, #0
 8014656:	f000 8082 	beq.w	801475e <_dtoa_r+0x4de>
 801465a:	4b91      	ldr	r3, [pc, #580]	; (80148a0 <_dtoa_r+0x620>)
 801465c:	2200      	movs	r2, #0
 801465e:	4650      	mov	r0, sl
 8014660:	4659      	mov	r1, fp
 8014662:	f7ec fa1d 	bl	8000aa0 <__aeabi_dcmplt>
 8014666:	2800      	cmp	r0, #0
 8014668:	d079      	beq.n	801475e <_dtoa_r+0x4de>
 801466a:	9b03      	ldr	r3, [sp, #12]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d076      	beq.n	801475e <_dtoa_r+0x4de>
 8014670:	9b02      	ldr	r3, [sp, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	dd36      	ble.n	80146e4 <_dtoa_r+0x464>
 8014676:	9b00      	ldr	r3, [sp, #0]
 8014678:	4650      	mov	r0, sl
 801467a:	4659      	mov	r1, fp
 801467c:	1e5f      	subs	r7, r3, #1
 801467e:	2200      	movs	r2, #0
 8014680:	4b88      	ldr	r3, [pc, #544]	; (80148a4 <_dtoa_r+0x624>)
 8014682:	f7eb ff9b 	bl	80005bc <__aeabi_dmul>
 8014686:	9e02      	ldr	r6, [sp, #8]
 8014688:	4682      	mov	sl, r0
 801468a:	468b      	mov	fp, r1
 801468c:	3501      	adds	r5, #1
 801468e:	4628      	mov	r0, r5
 8014690:	f7eb ff2a 	bl	80004e8 <__aeabi_i2d>
 8014694:	4652      	mov	r2, sl
 8014696:	465b      	mov	r3, fp
 8014698:	f7eb ff90 	bl	80005bc <__aeabi_dmul>
 801469c:	4b82      	ldr	r3, [pc, #520]	; (80148a8 <_dtoa_r+0x628>)
 801469e:	2200      	movs	r2, #0
 80146a0:	f7eb fdd6 	bl	8000250 <__adddf3>
 80146a4:	46d0      	mov	r8, sl
 80146a6:	46d9      	mov	r9, fp
 80146a8:	4682      	mov	sl, r0
 80146aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80146ae:	2e00      	cmp	r6, #0
 80146b0:	d158      	bne.n	8014764 <_dtoa_r+0x4e4>
 80146b2:	4b7e      	ldr	r3, [pc, #504]	; (80148ac <_dtoa_r+0x62c>)
 80146b4:	2200      	movs	r2, #0
 80146b6:	4640      	mov	r0, r8
 80146b8:	4649      	mov	r1, r9
 80146ba:	f7eb fdc7 	bl	800024c <__aeabi_dsub>
 80146be:	4652      	mov	r2, sl
 80146c0:	465b      	mov	r3, fp
 80146c2:	4680      	mov	r8, r0
 80146c4:	4689      	mov	r9, r1
 80146c6:	f7ec fa09 	bl	8000adc <__aeabi_dcmpgt>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	f040 8295 	bne.w	8014bfa <_dtoa_r+0x97a>
 80146d0:	4652      	mov	r2, sl
 80146d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80146d6:	4640      	mov	r0, r8
 80146d8:	4649      	mov	r1, r9
 80146da:	f7ec f9e1 	bl	8000aa0 <__aeabi_dcmplt>
 80146de:	2800      	cmp	r0, #0
 80146e0:	f040 8289 	bne.w	8014bf6 <_dtoa_r+0x976>
 80146e4:	ec5b ab19 	vmov	sl, fp, d9
 80146e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f2c0 8148 	blt.w	8014980 <_dtoa_r+0x700>
 80146f0:	9a00      	ldr	r2, [sp, #0]
 80146f2:	2a0e      	cmp	r2, #14
 80146f4:	f300 8144 	bgt.w	8014980 <_dtoa_r+0x700>
 80146f8:	4b67      	ldr	r3, [pc, #412]	; (8014898 <_dtoa_r+0x618>)
 80146fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014704:	2b00      	cmp	r3, #0
 8014706:	f280 80d5 	bge.w	80148b4 <_dtoa_r+0x634>
 801470a:	9b03      	ldr	r3, [sp, #12]
 801470c:	2b00      	cmp	r3, #0
 801470e:	f300 80d1 	bgt.w	80148b4 <_dtoa_r+0x634>
 8014712:	f040 826f 	bne.w	8014bf4 <_dtoa_r+0x974>
 8014716:	4b65      	ldr	r3, [pc, #404]	; (80148ac <_dtoa_r+0x62c>)
 8014718:	2200      	movs	r2, #0
 801471a:	4640      	mov	r0, r8
 801471c:	4649      	mov	r1, r9
 801471e:	f7eb ff4d 	bl	80005bc <__aeabi_dmul>
 8014722:	4652      	mov	r2, sl
 8014724:	465b      	mov	r3, fp
 8014726:	f7ec f9cf 	bl	8000ac8 <__aeabi_dcmpge>
 801472a:	9e03      	ldr	r6, [sp, #12]
 801472c:	4637      	mov	r7, r6
 801472e:	2800      	cmp	r0, #0
 8014730:	f040 8245 	bne.w	8014bbe <_dtoa_r+0x93e>
 8014734:	9d01      	ldr	r5, [sp, #4]
 8014736:	2331      	movs	r3, #49	; 0x31
 8014738:	f805 3b01 	strb.w	r3, [r5], #1
 801473c:	9b00      	ldr	r3, [sp, #0]
 801473e:	3301      	adds	r3, #1
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	e240      	b.n	8014bc6 <_dtoa_r+0x946>
 8014744:	07f2      	lsls	r2, r6, #31
 8014746:	d505      	bpl.n	8014754 <_dtoa_r+0x4d4>
 8014748:	e9d7 2300 	ldrd	r2, r3, [r7]
 801474c:	f7eb ff36 	bl	80005bc <__aeabi_dmul>
 8014750:	3501      	adds	r5, #1
 8014752:	2301      	movs	r3, #1
 8014754:	1076      	asrs	r6, r6, #1
 8014756:	3708      	adds	r7, #8
 8014758:	e777      	b.n	801464a <_dtoa_r+0x3ca>
 801475a:	2502      	movs	r5, #2
 801475c:	e779      	b.n	8014652 <_dtoa_r+0x3d2>
 801475e:	9f00      	ldr	r7, [sp, #0]
 8014760:	9e03      	ldr	r6, [sp, #12]
 8014762:	e794      	b.n	801468e <_dtoa_r+0x40e>
 8014764:	9901      	ldr	r1, [sp, #4]
 8014766:	4b4c      	ldr	r3, [pc, #304]	; (8014898 <_dtoa_r+0x618>)
 8014768:	4431      	add	r1, r6
 801476a:	910d      	str	r1, [sp, #52]	; 0x34
 801476c:	9908      	ldr	r1, [sp, #32]
 801476e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014776:	2900      	cmp	r1, #0
 8014778:	d043      	beq.n	8014802 <_dtoa_r+0x582>
 801477a:	494d      	ldr	r1, [pc, #308]	; (80148b0 <_dtoa_r+0x630>)
 801477c:	2000      	movs	r0, #0
 801477e:	f7ec f847 	bl	8000810 <__aeabi_ddiv>
 8014782:	4652      	mov	r2, sl
 8014784:	465b      	mov	r3, fp
 8014786:	f7eb fd61 	bl	800024c <__aeabi_dsub>
 801478a:	9d01      	ldr	r5, [sp, #4]
 801478c:	4682      	mov	sl, r0
 801478e:	468b      	mov	fp, r1
 8014790:	4649      	mov	r1, r9
 8014792:	4640      	mov	r0, r8
 8014794:	f7ec f9c2 	bl	8000b1c <__aeabi_d2iz>
 8014798:	4606      	mov	r6, r0
 801479a:	f7eb fea5 	bl	80004e8 <__aeabi_i2d>
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	4640      	mov	r0, r8
 80147a4:	4649      	mov	r1, r9
 80147a6:	f7eb fd51 	bl	800024c <__aeabi_dsub>
 80147aa:	3630      	adds	r6, #48	; 0x30
 80147ac:	f805 6b01 	strb.w	r6, [r5], #1
 80147b0:	4652      	mov	r2, sl
 80147b2:	465b      	mov	r3, fp
 80147b4:	4680      	mov	r8, r0
 80147b6:	4689      	mov	r9, r1
 80147b8:	f7ec f972 	bl	8000aa0 <__aeabi_dcmplt>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d163      	bne.n	8014888 <_dtoa_r+0x608>
 80147c0:	4642      	mov	r2, r8
 80147c2:	464b      	mov	r3, r9
 80147c4:	4936      	ldr	r1, [pc, #216]	; (80148a0 <_dtoa_r+0x620>)
 80147c6:	2000      	movs	r0, #0
 80147c8:	f7eb fd40 	bl	800024c <__aeabi_dsub>
 80147cc:	4652      	mov	r2, sl
 80147ce:	465b      	mov	r3, fp
 80147d0:	f7ec f966 	bl	8000aa0 <__aeabi_dcmplt>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f040 80b5 	bne.w	8014944 <_dtoa_r+0x6c4>
 80147da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147dc:	429d      	cmp	r5, r3
 80147de:	d081      	beq.n	80146e4 <_dtoa_r+0x464>
 80147e0:	4b30      	ldr	r3, [pc, #192]	; (80148a4 <_dtoa_r+0x624>)
 80147e2:	2200      	movs	r2, #0
 80147e4:	4650      	mov	r0, sl
 80147e6:	4659      	mov	r1, fp
 80147e8:	f7eb fee8 	bl	80005bc <__aeabi_dmul>
 80147ec:	4b2d      	ldr	r3, [pc, #180]	; (80148a4 <_dtoa_r+0x624>)
 80147ee:	4682      	mov	sl, r0
 80147f0:	468b      	mov	fp, r1
 80147f2:	4640      	mov	r0, r8
 80147f4:	4649      	mov	r1, r9
 80147f6:	2200      	movs	r2, #0
 80147f8:	f7eb fee0 	bl	80005bc <__aeabi_dmul>
 80147fc:	4680      	mov	r8, r0
 80147fe:	4689      	mov	r9, r1
 8014800:	e7c6      	b.n	8014790 <_dtoa_r+0x510>
 8014802:	4650      	mov	r0, sl
 8014804:	4659      	mov	r1, fp
 8014806:	f7eb fed9 	bl	80005bc <__aeabi_dmul>
 801480a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801480c:	9d01      	ldr	r5, [sp, #4]
 801480e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014810:	4682      	mov	sl, r0
 8014812:	468b      	mov	fp, r1
 8014814:	4649      	mov	r1, r9
 8014816:	4640      	mov	r0, r8
 8014818:	f7ec f980 	bl	8000b1c <__aeabi_d2iz>
 801481c:	4606      	mov	r6, r0
 801481e:	f7eb fe63 	bl	80004e8 <__aeabi_i2d>
 8014822:	3630      	adds	r6, #48	; 0x30
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	4640      	mov	r0, r8
 801482a:	4649      	mov	r1, r9
 801482c:	f7eb fd0e 	bl	800024c <__aeabi_dsub>
 8014830:	f805 6b01 	strb.w	r6, [r5], #1
 8014834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014836:	429d      	cmp	r5, r3
 8014838:	4680      	mov	r8, r0
 801483a:	4689      	mov	r9, r1
 801483c:	f04f 0200 	mov.w	r2, #0
 8014840:	d124      	bne.n	801488c <_dtoa_r+0x60c>
 8014842:	4b1b      	ldr	r3, [pc, #108]	; (80148b0 <_dtoa_r+0x630>)
 8014844:	4650      	mov	r0, sl
 8014846:	4659      	mov	r1, fp
 8014848:	f7eb fd02 	bl	8000250 <__adddf3>
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	4640      	mov	r0, r8
 8014852:	4649      	mov	r1, r9
 8014854:	f7ec f942 	bl	8000adc <__aeabi_dcmpgt>
 8014858:	2800      	cmp	r0, #0
 801485a:	d173      	bne.n	8014944 <_dtoa_r+0x6c4>
 801485c:	4652      	mov	r2, sl
 801485e:	465b      	mov	r3, fp
 8014860:	4913      	ldr	r1, [pc, #76]	; (80148b0 <_dtoa_r+0x630>)
 8014862:	2000      	movs	r0, #0
 8014864:	f7eb fcf2 	bl	800024c <__aeabi_dsub>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	4640      	mov	r0, r8
 801486e:	4649      	mov	r1, r9
 8014870:	f7ec f916 	bl	8000aa0 <__aeabi_dcmplt>
 8014874:	2800      	cmp	r0, #0
 8014876:	f43f af35 	beq.w	80146e4 <_dtoa_r+0x464>
 801487a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801487c:	1e6b      	subs	r3, r5, #1
 801487e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014884:	2b30      	cmp	r3, #48	; 0x30
 8014886:	d0f8      	beq.n	801487a <_dtoa_r+0x5fa>
 8014888:	9700      	str	r7, [sp, #0]
 801488a:	e049      	b.n	8014920 <_dtoa_r+0x6a0>
 801488c:	4b05      	ldr	r3, [pc, #20]	; (80148a4 <_dtoa_r+0x624>)
 801488e:	f7eb fe95 	bl	80005bc <__aeabi_dmul>
 8014892:	4680      	mov	r8, r0
 8014894:	4689      	mov	r9, r1
 8014896:	e7bd      	b.n	8014814 <_dtoa_r+0x594>
 8014898:	08018840 	.word	0x08018840
 801489c:	08018818 	.word	0x08018818
 80148a0:	3ff00000 	.word	0x3ff00000
 80148a4:	40240000 	.word	0x40240000
 80148a8:	401c0000 	.word	0x401c0000
 80148ac:	40140000 	.word	0x40140000
 80148b0:	3fe00000 	.word	0x3fe00000
 80148b4:	9d01      	ldr	r5, [sp, #4]
 80148b6:	4656      	mov	r6, sl
 80148b8:	465f      	mov	r7, fp
 80148ba:	4642      	mov	r2, r8
 80148bc:	464b      	mov	r3, r9
 80148be:	4630      	mov	r0, r6
 80148c0:	4639      	mov	r1, r7
 80148c2:	f7eb ffa5 	bl	8000810 <__aeabi_ddiv>
 80148c6:	f7ec f929 	bl	8000b1c <__aeabi_d2iz>
 80148ca:	4682      	mov	sl, r0
 80148cc:	f7eb fe0c 	bl	80004e8 <__aeabi_i2d>
 80148d0:	4642      	mov	r2, r8
 80148d2:	464b      	mov	r3, r9
 80148d4:	f7eb fe72 	bl	80005bc <__aeabi_dmul>
 80148d8:	4602      	mov	r2, r0
 80148da:	460b      	mov	r3, r1
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80148e4:	f7eb fcb2 	bl	800024c <__aeabi_dsub>
 80148e8:	f805 6b01 	strb.w	r6, [r5], #1
 80148ec:	9e01      	ldr	r6, [sp, #4]
 80148ee:	9f03      	ldr	r7, [sp, #12]
 80148f0:	1bae      	subs	r6, r5, r6
 80148f2:	42b7      	cmp	r7, r6
 80148f4:	4602      	mov	r2, r0
 80148f6:	460b      	mov	r3, r1
 80148f8:	d135      	bne.n	8014966 <_dtoa_r+0x6e6>
 80148fa:	f7eb fca9 	bl	8000250 <__adddf3>
 80148fe:	4642      	mov	r2, r8
 8014900:	464b      	mov	r3, r9
 8014902:	4606      	mov	r6, r0
 8014904:	460f      	mov	r7, r1
 8014906:	f7ec f8e9 	bl	8000adc <__aeabi_dcmpgt>
 801490a:	b9d0      	cbnz	r0, 8014942 <_dtoa_r+0x6c2>
 801490c:	4642      	mov	r2, r8
 801490e:	464b      	mov	r3, r9
 8014910:	4630      	mov	r0, r6
 8014912:	4639      	mov	r1, r7
 8014914:	f7ec f8ba 	bl	8000a8c <__aeabi_dcmpeq>
 8014918:	b110      	cbz	r0, 8014920 <_dtoa_r+0x6a0>
 801491a:	f01a 0f01 	tst.w	sl, #1
 801491e:	d110      	bne.n	8014942 <_dtoa_r+0x6c2>
 8014920:	4620      	mov	r0, r4
 8014922:	ee18 1a10 	vmov	r1, s16
 8014926:	f000 fbf5 	bl	8015114 <_Bfree>
 801492a:	2300      	movs	r3, #0
 801492c:	9800      	ldr	r0, [sp, #0]
 801492e:	702b      	strb	r3, [r5, #0]
 8014930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014932:	3001      	adds	r0, #1
 8014934:	6018      	str	r0, [r3, #0]
 8014936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014938:	2b00      	cmp	r3, #0
 801493a:	f43f acf1 	beq.w	8014320 <_dtoa_r+0xa0>
 801493e:	601d      	str	r5, [r3, #0]
 8014940:	e4ee      	b.n	8014320 <_dtoa_r+0xa0>
 8014942:	9f00      	ldr	r7, [sp, #0]
 8014944:	462b      	mov	r3, r5
 8014946:	461d      	mov	r5, r3
 8014948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801494c:	2a39      	cmp	r2, #57	; 0x39
 801494e:	d106      	bne.n	801495e <_dtoa_r+0x6de>
 8014950:	9a01      	ldr	r2, [sp, #4]
 8014952:	429a      	cmp	r2, r3
 8014954:	d1f7      	bne.n	8014946 <_dtoa_r+0x6c6>
 8014956:	9901      	ldr	r1, [sp, #4]
 8014958:	2230      	movs	r2, #48	; 0x30
 801495a:	3701      	adds	r7, #1
 801495c:	700a      	strb	r2, [r1, #0]
 801495e:	781a      	ldrb	r2, [r3, #0]
 8014960:	3201      	adds	r2, #1
 8014962:	701a      	strb	r2, [r3, #0]
 8014964:	e790      	b.n	8014888 <_dtoa_r+0x608>
 8014966:	4ba6      	ldr	r3, [pc, #664]	; (8014c00 <_dtoa_r+0x980>)
 8014968:	2200      	movs	r2, #0
 801496a:	f7eb fe27 	bl	80005bc <__aeabi_dmul>
 801496e:	2200      	movs	r2, #0
 8014970:	2300      	movs	r3, #0
 8014972:	4606      	mov	r6, r0
 8014974:	460f      	mov	r7, r1
 8014976:	f7ec f889 	bl	8000a8c <__aeabi_dcmpeq>
 801497a:	2800      	cmp	r0, #0
 801497c:	d09d      	beq.n	80148ba <_dtoa_r+0x63a>
 801497e:	e7cf      	b.n	8014920 <_dtoa_r+0x6a0>
 8014980:	9a08      	ldr	r2, [sp, #32]
 8014982:	2a00      	cmp	r2, #0
 8014984:	f000 80d7 	beq.w	8014b36 <_dtoa_r+0x8b6>
 8014988:	9a06      	ldr	r2, [sp, #24]
 801498a:	2a01      	cmp	r2, #1
 801498c:	f300 80ba 	bgt.w	8014b04 <_dtoa_r+0x884>
 8014990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014992:	2a00      	cmp	r2, #0
 8014994:	f000 80b2 	beq.w	8014afc <_dtoa_r+0x87c>
 8014998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801499c:	9e07      	ldr	r6, [sp, #28]
 801499e:	9d04      	ldr	r5, [sp, #16]
 80149a0:	9a04      	ldr	r2, [sp, #16]
 80149a2:	441a      	add	r2, r3
 80149a4:	9204      	str	r2, [sp, #16]
 80149a6:	9a05      	ldr	r2, [sp, #20]
 80149a8:	2101      	movs	r1, #1
 80149aa:	441a      	add	r2, r3
 80149ac:	4620      	mov	r0, r4
 80149ae:	9205      	str	r2, [sp, #20]
 80149b0:	f000 fc68 	bl	8015284 <__i2b>
 80149b4:	4607      	mov	r7, r0
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	dd0c      	ble.n	80149d4 <_dtoa_r+0x754>
 80149ba:	9b05      	ldr	r3, [sp, #20]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	dd09      	ble.n	80149d4 <_dtoa_r+0x754>
 80149c0:	42ab      	cmp	r3, r5
 80149c2:	9a04      	ldr	r2, [sp, #16]
 80149c4:	bfa8      	it	ge
 80149c6:	462b      	movge	r3, r5
 80149c8:	1ad2      	subs	r2, r2, r3
 80149ca:	9204      	str	r2, [sp, #16]
 80149cc:	9a05      	ldr	r2, [sp, #20]
 80149ce:	1aed      	subs	r5, r5, r3
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	9305      	str	r3, [sp, #20]
 80149d4:	9b07      	ldr	r3, [sp, #28]
 80149d6:	b31b      	cbz	r3, 8014a20 <_dtoa_r+0x7a0>
 80149d8:	9b08      	ldr	r3, [sp, #32]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f000 80af 	beq.w	8014b3e <_dtoa_r+0x8be>
 80149e0:	2e00      	cmp	r6, #0
 80149e2:	dd13      	ble.n	8014a0c <_dtoa_r+0x78c>
 80149e4:	4639      	mov	r1, r7
 80149e6:	4632      	mov	r2, r6
 80149e8:	4620      	mov	r0, r4
 80149ea:	f000 fd0b 	bl	8015404 <__pow5mult>
 80149ee:	ee18 2a10 	vmov	r2, s16
 80149f2:	4601      	mov	r1, r0
 80149f4:	4607      	mov	r7, r0
 80149f6:	4620      	mov	r0, r4
 80149f8:	f000 fc5a 	bl	80152b0 <__multiply>
 80149fc:	ee18 1a10 	vmov	r1, s16
 8014a00:	4680      	mov	r8, r0
 8014a02:	4620      	mov	r0, r4
 8014a04:	f000 fb86 	bl	8015114 <_Bfree>
 8014a08:	ee08 8a10 	vmov	s16, r8
 8014a0c:	9b07      	ldr	r3, [sp, #28]
 8014a0e:	1b9a      	subs	r2, r3, r6
 8014a10:	d006      	beq.n	8014a20 <_dtoa_r+0x7a0>
 8014a12:	ee18 1a10 	vmov	r1, s16
 8014a16:	4620      	mov	r0, r4
 8014a18:	f000 fcf4 	bl	8015404 <__pow5mult>
 8014a1c:	ee08 0a10 	vmov	s16, r0
 8014a20:	2101      	movs	r1, #1
 8014a22:	4620      	mov	r0, r4
 8014a24:	f000 fc2e 	bl	8015284 <__i2b>
 8014a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	f340 8088 	ble.w	8014b42 <_dtoa_r+0x8c2>
 8014a32:	461a      	mov	r2, r3
 8014a34:	4601      	mov	r1, r0
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 fce4 	bl	8015404 <__pow5mult>
 8014a3c:	9b06      	ldr	r3, [sp, #24]
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	4606      	mov	r6, r0
 8014a42:	f340 8081 	ble.w	8014b48 <_dtoa_r+0x8c8>
 8014a46:	f04f 0800 	mov.w	r8, #0
 8014a4a:	6933      	ldr	r3, [r6, #16]
 8014a4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a50:	6918      	ldr	r0, [r3, #16]
 8014a52:	f000 fbc7 	bl	80151e4 <__hi0bits>
 8014a56:	f1c0 0020 	rsb	r0, r0, #32
 8014a5a:	9b05      	ldr	r3, [sp, #20]
 8014a5c:	4418      	add	r0, r3
 8014a5e:	f010 001f 	ands.w	r0, r0, #31
 8014a62:	f000 8092 	beq.w	8014b8a <_dtoa_r+0x90a>
 8014a66:	f1c0 0320 	rsb	r3, r0, #32
 8014a6a:	2b04      	cmp	r3, #4
 8014a6c:	f340 808a 	ble.w	8014b84 <_dtoa_r+0x904>
 8014a70:	f1c0 001c 	rsb	r0, r0, #28
 8014a74:	9b04      	ldr	r3, [sp, #16]
 8014a76:	4403      	add	r3, r0
 8014a78:	9304      	str	r3, [sp, #16]
 8014a7a:	9b05      	ldr	r3, [sp, #20]
 8014a7c:	4403      	add	r3, r0
 8014a7e:	4405      	add	r5, r0
 8014a80:	9305      	str	r3, [sp, #20]
 8014a82:	9b04      	ldr	r3, [sp, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	dd07      	ble.n	8014a98 <_dtoa_r+0x818>
 8014a88:	ee18 1a10 	vmov	r1, s16
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f000 fd12 	bl	80154b8 <__lshift>
 8014a94:	ee08 0a10 	vmov	s16, r0
 8014a98:	9b05      	ldr	r3, [sp, #20]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	dd05      	ble.n	8014aaa <_dtoa_r+0x82a>
 8014a9e:	4631      	mov	r1, r6
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f000 fd08 	bl	80154b8 <__lshift>
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d06e      	beq.n	8014b8e <_dtoa_r+0x90e>
 8014ab0:	ee18 0a10 	vmov	r0, s16
 8014ab4:	4631      	mov	r1, r6
 8014ab6:	f000 fd6f 	bl	8015598 <__mcmp>
 8014aba:	2800      	cmp	r0, #0
 8014abc:	da67      	bge.n	8014b8e <_dtoa_r+0x90e>
 8014abe:	9b00      	ldr	r3, [sp, #0]
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	ee18 1a10 	vmov	r1, s16
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	220a      	movs	r2, #10
 8014aca:	2300      	movs	r3, #0
 8014acc:	4620      	mov	r0, r4
 8014ace:	f000 fb43 	bl	8015158 <__multadd>
 8014ad2:	9b08      	ldr	r3, [sp, #32]
 8014ad4:	ee08 0a10 	vmov	s16, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	f000 81b1 	beq.w	8014e40 <_dtoa_r+0xbc0>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	4639      	mov	r1, r7
 8014ae2:	220a      	movs	r2, #10
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f000 fb37 	bl	8015158 <__multadd>
 8014aea:	9b02      	ldr	r3, [sp, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	4607      	mov	r7, r0
 8014af0:	f300 808e 	bgt.w	8014c10 <_dtoa_r+0x990>
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	2b02      	cmp	r3, #2
 8014af8:	dc51      	bgt.n	8014b9e <_dtoa_r+0x91e>
 8014afa:	e089      	b.n	8014c10 <_dtoa_r+0x990>
 8014afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b02:	e74b      	b.n	801499c <_dtoa_r+0x71c>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	1e5e      	subs	r6, r3, #1
 8014b08:	9b07      	ldr	r3, [sp, #28]
 8014b0a:	42b3      	cmp	r3, r6
 8014b0c:	bfbf      	itttt	lt
 8014b0e:	9b07      	ldrlt	r3, [sp, #28]
 8014b10:	9607      	strlt	r6, [sp, #28]
 8014b12:	1af2      	sublt	r2, r6, r3
 8014b14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014b16:	bfb6      	itet	lt
 8014b18:	189b      	addlt	r3, r3, r2
 8014b1a:	1b9e      	subge	r6, r3, r6
 8014b1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014b1e:	9b03      	ldr	r3, [sp, #12]
 8014b20:	bfb8      	it	lt
 8014b22:	2600      	movlt	r6, #0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	bfb7      	itett	lt
 8014b28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014b2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014b30:	1a9d      	sublt	r5, r3, r2
 8014b32:	2300      	movlt	r3, #0
 8014b34:	e734      	b.n	80149a0 <_dtoa_r+0x720>
 8014b36:	9e07      	ldr	r6, [sp, #28]
 8014b38:	9d04      	ldr	r5, [sp, #16]
 8014b3a:	9f08      	ldr	r7, [sp, #32]
 8014b3c:	e73b      	b.n	80149b6 <_dtoa_r+0x736>
 8014b3e:	9a07      	ldr	r2, [sp, #28]
 8014b40:	e767      	b.n	8014a12 <_dtoa_r+0x792>
 8014b42:	9b06      	ldr	r3, [sp, #24]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	dc18      	bgt.n	8014b7a <_dtoa_r+0x8fa>
 8014b48:	f1ba 0f00 	cmp.w	sl, #0
 8014b4c:	d115      	bne.n	8014b7a <_dtoa_r+0x8fa>
 8014b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b52:	b993      	cbnz	r3, 8014b7a <_dtoa_r+0x8fa>
 8014b54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b58:	0d1b      	lsrs	r3, r3, #20
 8014b5a:	051b      	lsls	r3, r3, #20
 8014b5c:	b183      	cbz	r3, 8014b80 <_dtoa_r+0x900>
 8014b5e:	9b04      	ldr	r3, [sp, #16]
 8014b60:	3301      	adds	r3, #1
 8014b62:	9304      	str	r3, [sp, #16]
 8014b64:	9b05      	ldr	r3, [sp, #20]
 8014b66:	3301      	adds	r3, #1
 8014b68:	9305      	str	r3, [sp, #20]
 8014b6a:	f04f 0801 	mov.w	r8, #1
 8014b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f47f af6a 	bne.w	8014a4a <_dtoa_r+0x7ca>
 8014b76:	2001      	movs	r0, #1
 8014b78:	e76f      	b.n	8014a5a <_dtoa_r+0x7da>
 8014b7a:	f04f 0800 	mov.w	r8, #0
 8014b7e:	e7f6      	b.n	8014b6e <_dtoa_r+0x8ee>
 8014b80:	4698      	mov	r8, r3
 8014b82:	e7f4      	b.n	8014b6e <_dtoa_r+0x8ee>
 8014b84:	f43f af7d 	beq.w	8014a82 <_dtoa_r+0x802>
 8014b88:	4618      	mov	r0, r3
 8014b8a:	301c      	adds	r0, #28
 8014b8c:	e772      	b.n	8014a74 <_dtoa_r+0x7f4>
 8014b8e:	9b03      	ldr	r3, [sp, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	dc37      	bgt.n	8014c04 <_dtoa_r+0x984>
 8014b94:	9b06      	ldr	r3, [sp, #24]
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	dd34      	ble.n	8014c04 <_dtoa_r+0x984>
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	9302      	str	r3, [sp, #8]
 8014b9e:	9b02      	ldr	r3, [sp, #8]
 8014ba0:	b96b      	cbnz	r3, 8014bbe <_dtoa_r+0x93e>
 8014ba2:	4631      	mov	r1, r6
 8014ba4:	2205      	movs	r2, #5
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f000 fad6 	bl	8015158 <__multadd>
 8014bac:	4601      	mov	r1, r0
 8014bae:	4606      	mov	r6, r0
 8014bb0:	ee18 0a10 	vmov	r0, s16
 8014bb4:	f000 fcf0 	bl	8015598 <__mcmp>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	f73f adbb 	bgt.w	8014734 <_dtoa_r+0x4b4>
 8014bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc0:	9d01      	ldr	r5, [sp, #4]
 8014bc2:	43db      	mvns	r3, r3
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	f04f 0800 	mov.w	r8, #0
 8014bca:	4631      	mov	r1, r6
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 faa1 	bl	8015114 <_Bfree>
 8014bd2:	2f00      	cmp	r7, #0
 8014bd4:	f43f aea4 	beq.w	8014920 <_dtoa_r+0x6a0>
 8014bd8:	f1b8 0f00 	cmp.w	r8, #0
 8014bdc:	d005      	beq.n	8014bea <_dtoa_r+0x96a>
 8014bde:	45b8      	cmp	r8, r7
 8014be0:	d003      	beq.n	8014bea <_dtoa_r+0x96a>
 8014be2:	4641      	mov	r1, r8
 8014be4:	4620      	mov	r0, r4
 8014be6:	f000 fa95 	bl	8015114 <_Bfree>
 8014bea:	4639      	mov	r1, r7
 8014bec:	4620      	mov	r0, r4
 8014bee:	f000 fa91 	bl	8015114 <_Bfree>
 8014bf2:	e695      	b.n	8014920 <_dtoa_r+0x6a0>
 8014bf4:	2600      	movs	r6, #0
 8014bf6:	4637      	mov	r7, r6
 8014bf8:	e7e1      	b.n	8014bbe <_dtoa_r+0x93e>
 8014bfa:	9700      	str	r7, [sp, #0]
 8014bfc:	4637      	mov	r7, r6
 8014bfe:	e599      	b.n	8014734 <_dtoa_r+0x4b4>
 8014c00:	40240000 	.word	0x40240000
 8014c04:	9b08      	ldr	r3, [sp, #32]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 80ca 	beq.w	8014da0 <_dtoa_r+0xb20>
 8014c0c:	9b03      	ldr	r3, [sp, #12]
 8014c0e:	9302      	str	r3, [sp, #8]
 8014c10:	2d00      	cmp	r5, #0
 8014c12:	dd05      	ble.n	8014c20 <_dtoa_r+0x9a0>
 8014c14:	4639      	mov	r1, r7
 8014c16:	462a      	mov	r2, r5
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f000 fc4d 	bl	80154b8 <__lshift>
 8014c1e:	4607      	mov	r7, r0
 8014c20:	f1b8 0f00 	cmp.w	r8, #0
 8014c24:	d05b      	beq.n	8014cde <_dtoa_r+0xa5e>
 8014c26:	6879      	ldr	r1, [r7, #4]
 8014c28:	4620      	mov	r0, r4
 8014c2a:	f000 fa33 	bl	8015094 <_Balloc>
 8014c2e:	4605      	mov	r5, r0
 8014c30:	b928      	cbnz	r0, 8014c3e <_dtoa_r+0x9be>
 8014c32:	4b87      	ldr	r3, [pc, #540]	; (8014e50 <_dtoa_r+0xbd0>)
 8014c34:	4602      	mov	r2, r0
 8014c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014c3a:	f7ff bb3b 	b.w	80142b4 <_dtoa_r+0x34>
 8014c3e:	693a      	ldr	r2, [r7, #16]
 8014c40:	3202      	adds	r2, #2
 8014c42:	0092      	lsls	r2, r2, #2
 8014c44:	f107 010c 	add.w	r1, r7, #12
 8014c48:	300c      	adds	r0, #12
 8014c4a:	f7fd ffdf 	bl	8012c0c <memcpy>
 8014c4e:	2201      	movs	r2, #1
 8014c50:	4629      	mov	r1, r5
 8014c52:	4620      	mov	r0, r4
 8014c54:	f000 fc30 	bl	80154b8 <__lshift>
 8014c58:	9b01      	ldr	r3, [sp, #4]
 8014c5a:	f103 0901 	add.w	r9, r3, #1
 8014c5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014c62:	4413      	add	r3, r2
 8014c64:	9305      	str	r3, [sp, #20]
 8014c66:	f00a 0301 	and.w	r3, sl, #1
 8014c6a:	46b8      	mov	r8, r7
 8014c6c:	9304      	str	r3, [sp, #16]
 8014c6e:	4607      	mov	r7, r0
 8014c70:	4631      	mov	r1, r6
 8014c72:	ee18 0a10 	vmov	r0, s16
 8014c76:	f7ff fa77 	bl	8014168 <quorem>
 8014c7a:	4641      	mov	r1, r8
 8014c7c:	9002      	str	r0, [sp, #8]
 8014c7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014c82:	ee18 0a10 	vmov	r0, s16
 8014c86:	f000 fc87 	bl	8015598 <__mcmp>
 8014c8a:	463a      	mov	r2, r7
 8014c8c:	9003      	str	r0, [sp, #12]
 8014c8e:	4631      	mov	r1, r6
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 fc9d 	bl	80155d0 <__mdiff>
 8014c96:	68c2      	ldr	r2, [r0, #12]
 8014c98:	f109 3bff 	add.w	fp, r9, #4294967295
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	bb02      	cbnz	r2, 8014ce2 <_dtoa_r+0xa62>
 8014ca0:	4601      	mov	r1, r0
 8014ca2:	ee18 0a10 	vmov	r0, s16
 8014ca6:	f000 fc77 	bl	8015598 <__mcmp>
 8014caa:	4602      	mov	r2, r0
 8014cac:	4629      	mov	r1, r5
 8014cae:	4620      	mov	r0, r4
 8014cb0:	9207      	str	r2, [sp, #28]
 8014cb2:	f000 fa2f 	bl	8015114 <_Bfree>
 8014cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014cba:	ea43 0102 	orr.w	r1, r3, r2
 8014cbe:	9b04      	ldr	r3, [sp, #16]
 8014cc0:	430b      	orrs	r3, r1
 8014cc2:	464d      	mov	r5, r9
 8014cc4:	d10f      	bne.n	8014ce6 <_dtoa_r+0xa66>
 8014cc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014cca:	d02a      	beq.n	8014d22 <_dtoa_r+0xaa2>
 8014ccc:	9b03      	ldr	r3, [sp, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	dd02      	ble.n	8014cd8 <_dtoa_r+0xa58>
 8014cd2:	9b02      	ldr	r3, [sp, #8]
 8014cd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014cd8:	f88b a000 	strb.w	sl, [fp]
 8014cdc:	e775      	b.n	8014bca <_dtoa_r+0x94a>
 8014cde:	4638      	mov	r0, r7
 8014ce0:	e7ba      	b.n	8014c58 <_dtoa_r+0x9d8>
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	e7e2      	b.n	8014cac <_dtoa_r+0xa2c>
 8014ce6:	9b03      	ldr	r3, [sp, #12]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	db04      	blt.n	8014cf6 <_dtoa_r+0xa76>
 8014cec:	9906      	ldr	r1, [sp, #24]
 8014cee:	430b      	orrs	r3, r1
 8014cf0:	9904      	ldr	r1, [sp, #16]
 8014cf2:	430b      	orrs	r3, r1
 8014cf4:	d122      	bne.n	8014d3c <_dtoa_r+0xabc>
 8014cf6:	2a00      	cmp	r2, #0
 8014cf8:	ddee      	ble.n	8014cd8 <_dtoa_r+0xa58>
 8014cfa:	ee18 1a10 	vmov	r1, s16
 8014cfe:	2201      	movs	r2, #1
 8014d00:	4620      	mov	r0, r4
 8014d02:	f000 fbd9 	bl	80154b8 <__lshift>
 8014d06:	4631      	mov	r1, r6
 8014d08:	ee08 0a10 	vmov	s16, r0
 8014d0c:	f000 fc44 	bl	8015598 <__mcmp>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	dc03      	bgt.n	8014d1c <_dtoa_r+0xa9c>
 8014d14:	d1e0      	bne.n	8014cd8 <_dtoa_r+0xa58>
 8014d16:	f01a 0f01 	tst.w	sl, #1
 8014d1a:	d0dd      	beq.n	8014cd8 <_dtoa_r+0xa58>
 8014d1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d20:	d1d7      	bne.n	8014cd2 <_dtoa_r+0xa52>
 8014d22:	2339      	movs	r3, #57	; 0x39
 8014d24:	f88b 3000 	strb.w	r3, [fp]
 8014d28:	462b      	mov	r3, r5
 8014d2a:	461d      	mov	r5, r3
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014d32:	2a39      	cmp	r2, #57	; 0x39
 8014d34:	d071      	beq.n	8014e1a <_dtoa_r+0xb9a>
 8014d36:	3201      	adds	r2, #1
 8014d38:	701a      	strb	r2, [r3, #0]
 8014d3a:	e746      	b.n	8014bca <_dtoa_r+0x94a>
 8014d3c:	2a00      	cmp	r2, #0
 8014d3e:	dd07      	ble.n	8014d50 <_dtoa_r+0xad0>
 8014d40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d44:	d0ed      	beq.n	8014d22 <_dtoa_r+0xaa2>
 8014d46:	f10a 0301 	add.w	r3, sl, #1
 8014d4a:	f88b 3000 	strb.w	r3, [fp]
 8014d4e:	e73c      	b.n	8014bca <_dtoa_r+0x94a>
 8014d50:	9b05      	ldr	r3, [sp, #20]
 8014d52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014d56:	4599      	cmp	r9, r3
 8014d58:	d047      	beq.n	8014dea <_dtoa_r+0xb6a>
 8014d5a:	ee18 1a10 	vmov	r1, s16
 8014d5e:	2300      	movs	r3, #0
 8014d60:	220a      	movs	r2, #10
 8014d62:	4620      	mov	r0, r4
 8014d64:	f000 f9f8 	bl	8015158 <__multadd>
 8014d68:	45b8      	cmp	r8, r7
 8014d6a:	ee08 0a10 	vmov	s16, r0
 8014d6e:	f04f 0300 	mov.w	r3, #0
 8014d72:	f04f 020a 	mov.w	r2, #10
 8014d76:	4641      	mov	r1, r8
 8014d78:	4620      	mov	r0, r4
 8014d7a:	d106      	bne.n	8014d8a <_dtoa_r+0xb0a>
 8014d7c:	f000 f9ec 	bl	8015158 <__multadd>
 8014d80:	4680      	mov	r8, r0
 8014d82:	4607      	mov	r7, r0
 8014d84:	f109 0901 	add.w	r9, r9, #1
 8014d88:	e772      	b.n	8014c70 <_dtoa_r+0x9f0>
 8014d8a:	f000 f9e5 	bl	8015158 <__multadd>
 8014d8e:	4639      	mov	r1, r7
 8014d90:	4680      	mov	r8, r0
 8014d92:	2300      	movs	r3, #0
 8014d94:	220a      	movs	r2, #10
 8014d96:	4620      	mov	r0, r4
 8014d98:	f000 f9de 	bl	8015158 <__multadd>
 8014d9c:	4607      	mov	r7, r0
 8014d9e:	e7f1      	b.n	8014d84 <_dtoa_r+0xb04>
 8014da0:	9b03      	ldr	r3, [sp, #12]
 8014da2:	9302      	str	r3, [sp, #8]
 8014da4:	9d01      	ldr	r5, [sp, #4]
 8014da6:	ee18 0a10 	vmov	r0, s16
 8014daa:	4631      	mov	r1, r6
 8014dac:	f7ff f9dc 	bl	8014168 <quorem>
 8014db0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014db4:	9b01      	ldr	r3, [sp, #4]
 8014db6:	f805 ab01 	strb.w	sl, [r5], #1
 8014dba:	1aea      	subs	r2, r5, r3
 8014dbc:	9b02      	ldr	r3, [sp, #8]
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	dd09      	ble.n	8014dd6 <_dtoa_r+0xb56>
 8014dc2:	ee18 1a10 	vmov	r1, s16
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	220a      	movs	r2, #10
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f000 f9c4 	bl	8015158 <__multadd>
 8014dd0:	ee08 0a10 	vmov	s16, r0
 8014dd4:	e7e7      	b.n	8014da6 <_dtoa_r+0xb26>
 8014dd6:	9b02      	ldr	r3, [sp, #8]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	bfc8      	it	gt
 8014ddc:	461d      	movgt	r5, r3
 8014dde:	9b01      	ldr	r3, [sp, #4]
 8014de0:	bfd8      	it	le
 8014de2:	2501      	movle	r5, #1
 8014de4:	441d      	add	r5, r3
 8014de6:	f04f 0800 	mov.w	r8, #0
 8014dea:	ee18 1a10 	vmov	r1, s16
 8014dee:	2201      	movs	r2, #1
 8014df0:	4620      	mov	r0, r4
 8014df2:	f000 fb61 	bl	80154b8 <__lshift>
 8014df6:	4631      	mov	r1, r6
 8014df8:	ee08 0a10 	vmov	s16, r0
 8014dfc:	f000 fbcc 	bl	8015598 <__mcmp>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	dc91      	bgt.n	8014d28 <_dtoa_r+0xaa8>
 8014e04:	d102      	bne.n	8014e0c <_dtoa_r+0xb8c>
 8014e06:	f01a 0f01 	tst.w	sl, #1
 8014e0a:	d18d      	bne.n	8014d28 <_dtoa_r+0xaa8>
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	461d      	mov	r5, r3
 8014e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e14:	2a30      	cmp	r2, #48	; 0x30
 8014e16:	d0fa      	beq.n	8014e0e <_dtoa_r+0xb8e>
 8014e18:	e6d7      	b.n	8014bca <_dtoa_r+0x94a>
 8014e1a:	9a01      	ldr	r2, [sp, #4]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d184      	bne.n	8014d2a <_dtoa_r+0xaaa>
 8014e20:	9b00      	ldr	r3, [sp, #0]
 8014e22:	3301      	adds	r3, #1
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	2331      	movs	r3, #49	; 0x31
 8014e28:	7013      	strb	r3, [r2, #0]
 8014e2a:	e6ce      	b.n	8014bca <_dtoa_r+0x94a>
 8014e2c:	4b09      	ldr	r3, [pc, #36]	; (8014e54 <_dtoa_r+0xbd4>)
 8014e2e:	f7ff ba95 	b.w	801435c <_dtoa_r+0xdc>
 8014e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f47f aa6e 	bne.w	8014316 <_dtoa_r+0x96>
 8014e3a:	4b07      	ldr	r3, [pc, #28]	; (8014e58 <_dtoa_r+0xbd8>)
 8014e3c:	f7ff ba8e 	b.w	801435c <_dtoa_r+0xdc>
 8014e40:	9b02      	ldr	r3, [sp, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	dcae      	bgt.n	8014da4 <_dtoa_r+0xb24>
 8014e46:	9b06      	ldr	r3, [sp, #24]
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	f73f aea8 	bgt.w	8014b9e <_dtoa_r+0x91e>
 8014e4e:	e7a9      	b.n	8014da4 <_dtoa_r+0xb24>
 8014e50:	080187a9 	.word	0x080187a9
 8014e54:	08018a96 	.word	0x08018a96
 8014e58:	08018741 	.word	0x08018741

08014e5c <fiprintf>:
 8014e5c:	b40e      	push	{r1, r2, r3}
 8014e5e:	b503      	push	{r0, r1, lr}
 8014e60:	4601      	mov	r1, r0
 8014e62:	ab03      	add	r3, sp, #12
 8014e64:	4805      	ldr	r0, [pc, #20]	; (8014e7c <fiprintf+0x20>)
 8014e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e6a:	6800      	ldr	r0, [r0, #0]
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	f000 fe31 	bl	8015ad4 <_vfiprintf_r>
 8014e72:	b002      	add	sp, #8
 8014e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e78:	b003      	add	sp, #12
 8014e7a:	4770      	bx	lr
 8014e7c:	20000020 	.word	0x20000020

08014e80 <_findenv_r>:
 8014e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014ef4 <_findenv_r+0x74>
 8014e88:	4607      	mov	r7, r0
 8014e8a:	4689      	mov	r9, r1
 8014e8c:	4616      	mov	r6, r2
 8014e8e:	f001 f947 	bl	8016120 <__env_lock>
 8014e92:	f8da 4000 	ldr.w	r4, [sl]
 8014e96:	b134      	cbz	r4, 8014ea6 <_findenv_r+0x26>
 8014e98:	464b      	mov	r3, r9
 8014e9a:	4698      	mov	r8, r3
 8014e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ea0:	b13a      	cbz	r2, 8014eb2 <_findenv_r+0x32>
 8014ea2:	2a3d      	cmp	r2, #61	; 0x3d
 8014ea4:	d1f9      	bne.n	8014e9a <_findenv_r+0x1a>
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	f001 f940 	bl	801612c <__env_unlock>
 8014eac:	2000      	movs	r0, #0
 8014eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb2:	eba8 0809 	sub.w	r8, r8, r9
 8014eb6:	46a3      	mov	fp, r4
 8014eb8:	f854 0b04 	ldr.w	r0, [r4], #4
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	d0f2      	beq.n	8014ea6 <_findenv_r+0x26>
 8014ec0:	4642      	mov	r2, r8
 8014ec2:	4649      	mov	r1, r9
 8014ec4:	f000 ffaf 	bl	8015e26 <strncmp>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d1f4      	bne.n	8014eb6 <_findenv_r+0x36>
 8014ecc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ed0:	eb03 0508 	add.w	r5, r3, r8
 8014ed4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014ed8:	2b3d      	cmp	r3, #61	; 0x3d
 8014eda:	d1ec      	bne.n	8014eb6 <_findenv_r+0x36>
 8014edc:	f8da 3000 	ldr.w	r3, [sl]
 8014ee0:	ebab 0303 	sub.w	r3, fp, r3
 8014ee4:	109b      	asrs	r3, r3, #2
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	6033      	str	r3, [r6, #0]
 8014eea:	f001 f91f 	bl	801612c <__env_unlock>
 8014eee:	1c68      	adds	r0, r5, #1
 8014ef0:	e7dd      	b.n	8014eae <_findenv_r+0x2e>
 8014ef2:	bf00      	nop
 8014ef4:	20000010 	.word	0x20000010

08014ef8 <_getenv_r>:
 8014ef8:	b507      	push	{r0, r1, r2, lr}
 8014efa:	aa01      	add	r2, sp, #4
 8014efc:	f7ff ffc0 	bl	8014e80 <_findenv_r>
 8014f00:	b003      	add	sp, #12
 8014f02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014f08 <__gettzinfo>:
 8014f08:	4800      	ldr	r0, [pc, #0]	; (8014f0c <__gettzinfo+0x4>)
 8014f0a:	4770      	bx	lr
 8014f0c:	20000090 	.word	0x20000090

08014f10 <gmtime_r>:
 8014f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f14:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014f18:	460c      	mov	r4, r1
 8014f1a:	4a4f      	ldr	r2, [pc, #316]	; (8015058 <gmtime_r+0x148>)
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	4630      	mov	r0, r6
 8014f20:	4639      	mov	r1, r7
 8014f22:	f7eb fe93 	bl	8000c4c <__aeabi_ldivmod>
 8014f26:	4639      	mov	r1, r7
 8014f28:	4605      	mov	r5, r0
 8014f2a:	4a4b      	ldr	r2, [pc, #300]	; (8015058 <gmtime_r+0x148>)
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	2300      	movs	r3, #0
 8014f30:	f7eb fe8c 	bl	8000c4c <__aeabi_ldivmod>
 8014f34:	2a00      	cmp	r2, #0
 8014f36:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014f3a:	bfb7      	itett	lt
 8014f3c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014f40:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8014f44:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014f48:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014f4c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014f50:	fbb2 f1f0 	udiv	r1, r2, r0
 8014f54:	fb00 2211 	mls	r2, r0, r1, r2
 8014f58:	203c      	movs	r0, #60	; 0x3c
 8014f5a:	60a1      	str	r1, [r4, #8]
 8014f5c:	fbb2 f1f0 	udiv	r1, r2, r0
 8014f60:	fb00 2211 	mls	r2, r0, r1, r2
 8014f64:	6061      	str	r1, [r4, #4]
 8014f66:	6022      	str	r2, [r4, #0]
 8014f68:	2107      	movs	r1, #7
 8014f6a:	1cda      	adds	r2, r3, #3
 8014f6c:	fb92 f1f1 	sdiv	r1, r2, r1
 8014f70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014f74:	1a52      	subs	r2, r2, r1
 8014f76:	bf48      	it	mi
 8014f78:	3207      	addmi	r2, #7
 8014f7a:	4d38      	ldr	r5, [pc, #224]	; (801505c <gmtime_r+0x14c>)
 8014f7c:	4838      	ldr	r0, [pc, #224]	; (8015060 <gmtime_r+0x150>)
 8014f7e:	61a2      	str	r2, [r4, #24]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	bfb7      	itett	lt
 8014f84:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014f88:	fb93 f5f5 	sdivge	r5, r3, r5
 8014f8c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014f90:	fb92 f5f5 	sdivlt	r5, r2, r5
 8014f94:	fb00 3005 	mla	r0, r0, r5, r3
 8014f98:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014f9c:	fbb0 f2f2 	udiv	r2, r0, r2
 8014fa0:	4402      	add	r2, r0
 8014fa2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014fa6:	fbb0 f1f3 	udiv	r1, r0, r3
 8014faa:	1a52      	subs	r2, r2, r1
 8014fac:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014fb0:	492c      	ldr	r1, [pc, #176]	; (8015064 <gmtime_r+0x154>)
 8014fb2:	fbb0 f1f1 	udiv	r1, r0, r1
 8014fb6:	2764      	movs	r7, #100	; 0x64
 8014fb8:	1a52      	subs	r2, r2, r1
 8014fba:	fbb2 f1fc 	udiv	r1, r2, ip
 8014fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fc2:	fbb1 f6f7 	udiv	r6, r1, r7
 8014fc6:	1af3      	subs	r3, r6, r3
 8014fc8:	4403      	add	r3, r0
 8014fca:	fb0c 3311 	mls	r3, ip, r1, r3
 8014fce:	2299      	movs	r2, #153	; 0x99
 8014fd0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8014fd4:	f10e 0e02 	add.w	lr, lr, #2
 8014fd8:	f103 0c01 	add.w	ip, r3, #1
 8014fdc:	fbbe f0f2 	udiv	r0, lr, r2
 8014fe0:	4342      	muls	r2, r0
 8014fe2:	3202      	adds	r2, #2
 8014fe4:	f04f 0805 	mov.w	r8, #5
 8014fe8:	fbb2 f2f8 	udiv	r2, r2, r8
 8014fec:	ebac 0c02 	sub.w	ip, ip, r2
 8014ff0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8014ff4:	4596      	cmp	lr, r2
 8014ff6:	bf94      	ite	ls
 8014ff8:	2202      	movls	r2, #2
 8014ffa:	f06f 0209 	mvnhi.w	r2, #9
 8014ffe:	4410      	add	r0, r2
 8015000:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015004:	fb02 1505 	mla	r5, r2, r5, r1
 8015008:	2801      	cmp	r0, #1
 801500a:	bf98      	it	ls
 801500c:	3501      	addls	r5, #1
 801500e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8015012:	d30d      	bcc.n	8015030 <gmtime_r+0x120>
 8015014:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8015018:	61e3      	str	r3, [r4, #28]
 801501a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 801501e:	2300      	movs	r3, #0
 8015020:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8015024:	f8c4 c00c 	str.w	ip, [r4, #12]
 8015028:	6223      	str	r3, [r4, #32]
 801502a:	4620      	mov	r0, r4
 801502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015030:	078a      	lsls	r2, r1, #30
 8015032:	d102      	bne.n	801503a <gmtime_r+0x12a>
 8015034:	fb07 1616 	mls	r6, r7, r6, r1
 8015038:	b95e      	cbnz	r6, 8015052 <gmtime_r+0x142>
 801503a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801503e:	fbb1 f6f2 	udiv	r6, r1, r2
 8015042:	fb02 1216 	mls	r2, r2, r6, r1
 8015046:	fab2 f282 	clz	r2, r2
 801504a:	0952      	lsrs	r2, r2, #5
 801504c:	333b      	adds	r3, #59	; 0x3b
 801504e:	4413      	add	r3, r2
 8015050:	e7e2      	b.n	8015018 <gmtime_r+0x108>
 8015052:	2201      	movs	r2, #1
 8015054:	e7fa      	b.n	801504c <gmtime_r+0x13c>
 8015056:	bf00      	nop
 8015058:	00015180 	.word	0x00015180
 801505c:	00023ab1 	.word	0x00023ab1
 8015060:	fffdc54f 	.word	0xfffdc54f
 8015064:	00023ab0 	.word	0x00023ab0

08015068 <_localeconv_r>:
 8015068:	4800      	ldr	r0, [pc, #0]	; (801506c <_localeconv_r+0x4>)
 801506a:	4770      	bx	lr
 801506c:	200001d8 	.word	0x200001d8

08015070 <__retarget_lock_init_recursive>:
 8015070:	4770      	bx	lr

08015072 <__retarget_lock_acquire>:
 8015072:	4770      	bx	lr

08015074 <__retarget_lock_acquire_recursive>:
 8015074:	4770      	bx	lr

08015076 <__retarget_lock_release>:
 8015076:	4770      	bx	lr

08015078 <__retarget_lock_release_recursive>:
 8015078:	4770      	bx	lr
	...

0801507c <__malloc_lock>:
 801507c:	4801      	ldr	r0, [pc, #4]	; (8015084 <__malloc_lock+0x8>)
 801507e:	f7ff bff9 	b.w	8015074 <__retarget_lock_acquire_recursive>
 8015082:	bf00      	nop
 8015084:	2000a7ad 	.word	0x2000a7ad

08015088 <__malloc_unlock>:
 8015088:	4801      	ldr	r0, [pc, #4]	; (8015090 <__malloc_unlock+0x8>)
 801508a:	f7ff bff5 	b.w	8015078 <__retarget_lock_release_recursive>
 801508e:	bf00      	nop
 8015090:	2000a7ad 	.word	0x2000a7ad

08015094 <_Balloc>:
 8015094:	b570      	push	{r4, r5, r6, lr}
 8015096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015098:	4604      	mov	r4, r0
 801509a:	460d      	mov	r5, r1
 801509c:	b976      	cbnz	r6, 80150bc <_Balloc+0x28>
 801509e:	2010      	movs	r0, #16
 80150a0:	f7fd fda4 	bl	8012bec <malloc>
 80150a4:	4602      	mov	r2, r0
 80150a6:	6260      	str	r0, [r4, #36]	; 0x24
 80150a8:	b920      	cbnz	r0, 80150b4 <_Balloc+0x20>
 80150aa:	4b18      	ldr	r3, [pc, #96]	; (801510c <_Balloc+0x78>)
 80150ac:	4818      	ldr	r0, [pc, #96]	; (8015110 <_Balloc+0x7c>)
 80150ae:	2166      	movs	r1, #102	; 0x66
 80150b0:	f7ff f828 	bl	8014104 <__assert_func>
 80150b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150b8:	6006      	str	r6, [r0, #0]
 80150ba:	60c6      	str	r6, [r0, #12]
 80150bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150be:	68f3      	ldr	r3, [r6, #12]
 80150c0:	b183      	cbz	r3, 80150e4 <_Balloc+0x50>
 80150c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150c4:	68db      	ldr	r3, [r3, #12]
 80150c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150ca:	b9b8      	cbnz	r0, 80150fc <_Balloc+0x68>
 80150cc:	2101      	movs	r1, #1
 80150ce:	fa01 f605 	lsl.w	r6, r1, r5
 80150d2:	1d72      	adds	r2, r6, #5
 80150d4:	0092      	lsls	r2, r2, #2
 80150d6:	4620      	mov	r0, r4
 80150d8:	f000 fb60 	bl	801579c <_calloc_r>
 80150dc:	b160      	cbz	r0, 80150f8 <_Balloc+0x64>
 80150de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80150e2:	e00e      	b.n	8015102 <_Balloc+0x6e>
 80150e4:	2221      	movs	r2, #33	; 0x21
 80150e6:	2104      	movs	r1, #4
 80150e8:	4620      	mov	r0, r4
 80150ea:	f000 fb57 	bl	801579c <_calloc_r>
 80150ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150f0:	60f0      	str	r0, [r6, #12]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d1e4      	bne.n	80150c2 <_Balloc+0x2e>
 80150f8:	2000      	movs	r0, #0
 80150fa:	bd70      	pop	{r4, r5, r6, pc}
 80150fc:	6802      	ldr	r2, [r0, #0]
 80150fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015102:	2300      	movs	r3, #0
 8015104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015108:	e7f7      	b.n	80150fa <_Balloc+0x66>
 801510a:	bf00      	nop
 801510c:	08018508 	.word	0x08018508
 8015110:	080187ba 	.word	0x080187ba

08015114 <_Bfree>:
 8015114:	b570      	push	{r4, r5, r6, lr}
 8015116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015118:	4605      	mov	r5, r0
 801511a:	460c      	mov	r4, r1
 801511c:	b976      	cbnz	r6, 801513c <_Bfree+0x28>
 801511e:	2010      	movs	r0, #16
 8015120:	f7fd fd64 	bl	8012bec <malloc>
 8015124:	4602      	mov	r2, r0
 8015126:	6268      	str	r0, [r5, #36]	; 0x24
 8015128:	b920      	cbnz	r0, 8015134 <_Bfree+0x20>
 801512a:	4b09      	ldr	r3, [pc, #36]	; (8015150 <_Bfree+0x3c>)
 801512c:	4809      	ldr	r0, [pc, #36]	; (8015154 <_Bfree+0x40>)
 801512e:	218a      	movs	r1, #138	; 0x8a
 8015130:	f7fe ffe8 	bl	8014104 <__assert_func>
 8015134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015138:	6006      	str	r6, [r0, #0]
 801513a:	60c6      	str	r6, [r0, #12]
 801513c:	b13c      	cbz	r4, 801514e <_Bfree+0x3a>
 801513e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015140:	6862      	ldr	r2, [r4, #4]
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015148:	6021      	str	r1, [r4, #0]
 801514a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801514e:	bd70      	pop	{r4, r5, r6, pc}
 8015150:	08018508 	.word	0x08018508
 8015154:	080187ba 	.word	0x080187ba

08015158 <__multadd>:
 8015158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801515c:	690d      	ldr	r5, [r1, #16]
 801515e:	4607      	mov	r7, r0
 8015160:	460c      	mov	r4, r1
 8015162:	461e      	mov	r6, r3
 8015164:	f101 0c14 	add.w	ip, r1, #20
 8015168:	2000      	movs	r0, #0
 801516a:	f8dc 3000 	ldr.w	r3, [ip]
 801516e:	b299      	uxth	r1, r3
 8015170:	fb02 6101 	mla	r1, r2, r1, r6
 8015174:	0c1e      	lsrs	r6, r3, #16
 8015176:	0c0b      	lsrs	r3, r1, #16
 8015178:	fb02 3306 	mla	r3, r2, r6, r3
 801517c:	b289      	uxth	r1, r1
 801517e:	3001      	adds	r0, #1
 8015180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015184:	4285      	cmp	r5, r0
 8015186:	f84c 1b04 	str.w	r1, [ip], #4
 801518a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801518e:	dcec      	bgt.n	801516a <__multadd+0x12>
 8015190:	b30e      	cbz	r6, 80151d6 <__multadd+0x7e>
 8015192:	68a3      	ldr	r3, [r4, #8]
 8015194:	42ab      	cmp	r3, r5
 8015196:	dc19      	bgt.n	80151cc <__multadd+0x74>
 8015198:	6861      	ldr	r1, [r4, #4]
 801519a:	4638      	mov	r0, r7
 801519c:	3101      	adds	r1, #1
 801519e:	f7ff ff79 	bl	8015094 <_Balloc>
 80151a2:	4680      	mov	r8, r0
 80151a4:	b928      	cbnz	r0, 80151b2 <__multadd+0x5a>
 80151a6:	4602      	mov	r2, r0
 80151a8:	4b0c      	ldr	r3, [pc, #48]	; (80151dc <__multadd+0x84>)
 80151aa:	480d      	ldr	r0, [pc, #52]	; (80151e0 <__multadd+0x88>)
 80151ac:	21b5      	movs	r1, #181	; 0xb5
 80151ae:	f7fe ffa9 	bl	8014104 <__assert_func>
 80151b2:	6922      	ldr	r2, [r4, #16]
 80151b4:	3202      	adds	r2, #2
 80151b6:	f104 010c 	add.w	r1, r4, #12
 80151ba:	0092      	lsls	r2, r2, #2
 80151bc:	300c      	adds	r0, #12
 80151be:	f7fd fd25 	bl	8012c0c <memcpy>
 80151c2:	4621      	mov	r1, r4
 80151c4:	4638      	mov	r0, r7
 80151c6:	f7ff ffa5 	bl	8015114 <_Bfree>
 80151ca:	4644      	mov	r4, r8
 80151cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151d0:	3501      	adds	r5, #1
 80151d2:	615e      	str	r6, [r3, #20]
 80151d4:	6125      	str	r5, [r4, #16]
 80151d6:	4620      	mov	r0, r4
 80151d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151dc:	080187a9 	.word	0x080187a9
 80151e0:	080187ba 	.word	0x080187ba

080151e4 <__hi0bits>:
 80151e4:	0c03      	lsrs	r3, r0, #16
 80151e6:	041b      	lsls	r3, r3, #16
 80151e8:	b9d3      	cbnz	r3, 8015220 <__hi0bits+0x3c>
 80151ea:	0400      	lsls	r0, r0, #16
 80151ec:	2310      	movs	r3, #16
 80151ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80151f2:	bf04      	itt	eq
 80151f4:	0200      	lsleq	r0, r0, #8
 80151f6:	3308      	addeq	r3, #8
 80151f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80151fc:	bf04      	itt	eq
 80151fe:	0100      	lsleq	r0, r0, #4
 8015200:	3304      	addeq	r3, #4
 8015202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015206:	bf04      	itt	eq
 8015208:	0080      	lsleq	r0, r0, #2
 801520a:	3302      	addeq	r3, #2
 801520c:	2800      	cmp	r0, #0
 801520e:	db05      	blt.n	801521c <__hi0bits+0x38>
 8015210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015214:	f103 0301 	add.w	r3, r3, #1
 8015218:	bf08      	it	eq
 801521a:	2320      	moveq	r3, #32
 801521c:	4618      	mov	r0, r3
 801521e:	4770      	bx	lr
 8015220:	2300      	movs	r3, #0
 8015222:	e7e4      	b.n	80151ee <__hi0bits+0xa>

08015224 <__lo0bits>:
 8015224:	6803      	ldr	r3, [r0, #0]
 8015226:	f013 0207 	ands.w	r2, r3, #7
 801522a:	4601      	mov	r1, r0
 801522c:	d00b      	beq.n	8015246 <__lo0bits+0x22>
 801522e:	07da      	lsls	r2, r3, #31
 8015230:	d423      	bmi.n	801527a <__lo0bits+0x56>
 8015232:	0798      	lsls	r0, r3, #30
 8015234:	bf49      	itett	mi
 8015236:	085b      	lsrmi	r3, r3, #1
 8015238:	089b      	lsrpl	r3, r3, #2
 801523a:	2001      	movmi	r0, #1
 801523c:	600b      	strmi	r3, [r1, #0]
 801523e:	bf5c      	itt	pl
 8015240:	600b      	strpl	r3, [r1, #0]
 8015242:	2002      	movpl	r0, #2
 8015244:	4770      	bx	lr
 8015246:	b298      	uxth	r0, r3
 8015248:	b9a8      	cbnz	r0, 8015276 <__lo0bits+0x52>
 801524a:	0c1b      	lsrs	r3, r3, #16
 801524c:	2010      	movs	r0, #16
 801524e:	b2da      	uxtb	r2, r3
 8015250:	b90a      	cbnz	r2, 8015256 <__lo0bits+0x32>
 8015252:	3008      	adds	r0, #8
 8015254:	0a1b      	lsrs	r3, r3, #8
 8015256:	071a      	lsls	r2, r3, #28
 8015258:	bf04      	itt	eq
 801525a:	091b      	lsreq	r3, r3, #4
 801525c:	3004      	addeq	r0, #4
 801525e:	079a      	lsls	r2, r3, #30
 8015260:	bf04      	itt	eq
 8015262:	089b      	lsreq	r3, r3, #2
 8015264:	3002      	addeq	r0, #2
 8015266:	07da      	lsls	r2, r3, #31
 8015268:	d403      	bmi.n	8015272 <__lo0bits+0x4e>
 801526a:	085b      	lsrs	r3, r3, #1
 801526c:	f100 0001 	add.w	r0, r0, #1
 8015270:	d005      	beq.n	801527e <__lo0bits+0x5a>
 8015272:	600b      	str	r3, [r1, #0]
 8015274:	4770      	bx	lr
 8015276:	4610      	mov	r0, r2
 8015278:	e7e9      	b.n	801524e <__lo0bits+0x2a>
 801527a:	2000      	movs	r0, #0
 801527c:	4770      	bx	lr
 801527e:	2020      	movs	r0, #32
 8015280:	4770      	bx	lr
	...

08015284 <__i2b>:
 8015284:	b510      	push	{r4, lr}
 8015286:	460c      	mov	r4, r1
 8015288:	2101      	movs	r1, #1
 801528a:	f7ff ff03 	bl	8015094 <_Balloc>
 801528e:	4602      	mov	r2, r0
 8015290:	b928      	cbnz	r0, 801529e <__i2b+0x1a>
 8015292:	4b05      	ldr	r3, [pc, #20]	; (80152a8 <__i2b+0x24>)
 8015294:	4805      	ldr	r0, [pc, #20]	; (80152ac <__i2b+0x28>)
 8015296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801529a:	f7fe ff33 	bl	8014104 <__assert_func>
 801529e:	2301      	movs	r3, #1
 80152a0:	6144      	str	r4, [r0, #20]
 80152a2:	6103      	str	r3, [r0, #16]
 80152a4:	bd10      	pop	{r4, pc}
 80152a6:	bf00      	nop
 80152a8:	080187a9 	.word	0x080187a9
 80152ac:	080187ba 	.word	0x080187ba

080152b0 <__multiply>:
 80152b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b4:	4691      	mov	r9, r2
 80152b6:	690a      	ldr	r2, [r1, #16]
 80152b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152bc:	429a      	cmp	r2, r3
 80152be:	bfb8      	it	lt
 80152c0:	460b      	movlt	r3, r1
 80152c2:	460c      	mov	r4, r1
 80152c4:	bfbc      	itt	lt
 80152c6:	464c      	movlt	r4, r9
 80152c8:	4699      	movlt	r9, r3
 80152ca:	6927      	ldr	r7, [r4, #16]
 80152cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80152d0:	68a3      	ldr	r3, [r4, #8]
 80152d2:	6861      	ldr	r1, [r4, #4]
 80152d4:	eb07 060a 	add.w	r6, r7, sl
 80152d8:	42b3      	cmp	r3, r6
 80152da:	b085      	sub	sp, #20
 80152dc:	bfb8      	it	lt
 80152de:	3101      	addlt	r1, #1
 80152e0:	f7ff fed8 	bl	8015094 <_Balloc>
 80152e4:	b930      	cbnz	r0, 80152f4 <__multiply+0x44>
 80152e6:	4602      	mov	r2, r0
 80152e8:	4b44      	ldr	r3, [pc, #272]	; (80153fc <__multiply+0x14c>)
 80152ea:	4845      	ldr	r0, [pc, #276]	; (8015400 <__multiply+0x150>)
 80152ec:	f240 115d 	movw	r1, #349	; 0x15d
 80152f0:	f7fe ff08 	bl	8014104 <__assert_func>
 80152f4:	f100 0514 	add.w	r5, r0, #20
 80152f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80152fc:	462b      	mov	r3, r5
 80152fe:	2200      	movs	r2, #0
 8015300:	4543      	cmp	r3, r8
 8015302:	d321      	bcc.n	8015348 <__multiply+0x98>
 8015304:	f104 0314 	add.w	r3, r4, #20
 8015308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801530c:	f109 0314 	add.w	r3, r9, #20
 8015310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015314:	9202      	str	r2, [sp, #8]
 8015316:	1b3a      	subs	r2, r7, r4
 8015318:	3a15      	subs	r2, #21
 801531a:	f022 0203 	bic.w	r2, r2, #3
 801531e:	3204      	adds	r2, #4
 8015320:	f104 0115 	add.w	r1, r4, #21
 8015324:	428f      	cmp	r7, r1
 8015326:	bf38      	it	cc
 8015328:	2204      	movcc	r2, #4
 801532a:	9201      	str	r2, [sp, #4]
 801532c:	9a02      	ldr	r2, [sp, #8]
 801532e:	9303      	str	r3, [sp, #12]
 8015330:	429a      	cmp	r2, r3
 8015332:	d80c      	bhi.n	801534e <__multiply+0x9e>
 8015334:	2e00      	cmp	r6, #0
 8015336:	dd03      	ble.n	8015340 <__multiply+0x90>
 8015338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801533c:	2b00      	cmp	r3, #0
 801533e:	d05a      	beq.n	80153f6 <__multiply+0x146>
 8015340:	6106      	str	r6, [r0, #16]
 8015342:	b005      	add	sp, #20
 8015344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015348:	f843 2b04 	str.w	r2, [r3], #4
 801534c:	e7d8      	b.n	8015300 <__multiply+0x50>
 801534e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015352:	f1ba 0f00 	cmp.w	sl, #0
 8015356:	d024      	beq.n	80153a2 <__multiply+0xf2>
 8015358:	f104 0e14 	add.w	lr, r4, #20
 801535c:	46a9      	mov	r9, r5
 801535e:	f04f 0c00 	mov.w	ip, #0
 8015362:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015366:	f8d9 1000 	ldr.w	r1, [r9]
 801536a:	fa1f fb82 	uxth.w	fp, r2
 801536e:	b289      	uxth	r1, r1
 8015370:	fb0a 110b 	mla	r1, sl, fp, r1
 8015374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015378:	f8d9 2000 	ldr.w	r2, [r9]
 801537c:	4461      	add	r1, ip
 801537e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015382:	fb0a c20b 	mla	r2, sl, fp, ip
 8015386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801538a:	b289      	uxth	r1, r1
 801538c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015390:	4577      	cmp	r7, lr
 8015392:	f849 1b04 	str.w	r1, [r9], #4
 8015396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801539a:	d8e2      	bhi.n	8015362 <__multiply+0xb2>
 801539c:	9a01      	ldr	r2, [sp, #4]
 801539e:	f845 c002 	str.w	ip, [r5, r2]
 80153a2:	9a03      	ldr	r2, [sp, #12]
 80153a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80153a8:	3304      	adds	r3, #4
 80153aa:	f1b9 0f00 	cmp.w	r9, #0
 80153ae:	d020      	beq.n	80153f2 <__multiply+0x142>
 80153b0:	6829      	ldr	r1, [r5, #0]
 80153b2:	f104 0c14 	add.w	ip, r4, #20
 80153b6:	46ae      	mov	lr, r5
 80153b8:	f04f 0a00 	mov.w	sl, #0
 80153bc:	f8bc b000 	ldrh.w	fp, [ip]
 80153c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80153c4:	fb09 220b 	mla	r2, r9, fp, r2
 80153c8:	4492      	add	sl, r2
 80153ca:	b289      	uxth	r1, r1
 80153cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80153d0:	f84e 1b04 	str.w	r1, [lr], #4
 80153d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80153d8:	f8be 1000 	ldrh.w	r1, [lr]
 80153dc:	0c12      	lsrs	r2, r2, #16
 80153de:	fb09 1102 	mla	r1, r9, r2, r1
 80153e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80153e6:	4567      	cmp	r7, ip
 80153e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80153ec:	d8e6      	bhi.n	80153bc <__multiply+0x10c>
 80153ee:	9a01      	ldr	r2, [sp, #4]
 80153f0:	50a9      	str	r1, [r5, r2]
 80153f2:	3504      	adds	r5, #4
 80153f4:	e79a      	b.n	801532c <__multiply+0x7c>
 80153f6:	3e01      	subs	r6, #1
 80153f8:	e79c      	b.n	8015334 <__multiply+0x84>
 80153fa:	bf00      	nop
 80153fc:	080187a9 	.word	0x080187a9
 8015400:	080187ba 	.word	0x080187ba

08015404 <__pow5mult>:
 8015404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015408:	4615      	mov	r5, r2
 801540a:	f012 0203 	ands.w	r2, r2, #3
 801540e:	4606      	mov	r6, r0
 8015410:	460f      	mov	r7, r1
 8015412:	d007      	beq.n	8015424 <__pow5mult+0x20>
 8015414:	4c25      	ldr	r4, [pc, #148]	; (80154ac <__pow5mult+0xa8>)
 8015416:	3a01      	subs	r2, #1
 8015418:	2300      	movs	r3, #0
 801541a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801541e:	f7ff fe9b 	bl	8015158 <__multadd>
 8015422:	4607      	mov	r7, r0
 8015424:	10ad      	asrs	r5, r5, #2
 8015426:	d03d      	beq.n	80154a4 <__pow5mult+0xa0>
 8015428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801542a:	b97c      	cbnz	r4, 801544c <__pow5mult+0x48>
 801542c:	2010      	movs	r0, #16
 801542e:	f7fd fbdd 	bl	8012bec <malloc>
 8015432:	4602      	mov	r2, r0
 8015434:	6270      	str	r0, [r6, #36]	; 0x24
 8015436:	b928      	cbnz	r0, 8015444 <__pow5mult+0x40>
 8015438:	4b1d      	ldr	r3, [pc, #116]	; (80154b0 <__pow5mult+0xac>)
 801543a:	481e      	ldr	r0, [pc, #120]	; (80154b4 <__pow5mult+0xb0>)
 801543c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015440:	f7fe fe60 	bl	8014104 <__assert_func>
 8015444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015448:	6004      	str	r4, [r0, #0]
 801544a:	60c4      	str	r4, [r0, #12]
 801544c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015454:	b94c      	cbnz	r4, 801546a <__pow5mult+0x66>
 8015456:	f240 2171 	movw	r1, #625	; 0x271
 801545a:	4630      	mov	r0, r6
 801545c:	f7ff ff12 	bl	8015284 <__i2b>
 8015460:	2300      	movs	r3, #0
 8015462:	f8c8 0008 	str.w	r0, [r8, #8]
 8015466:	4604      	mov	r4, r0
 8015468:	6003      	str	r3, [r0, #0]
 801546a:	f04f 0900 	mov.w	r9, #0
 801546e:	07eb      	lsls	r3, r5, #31
 8015470:	d50a      	bpl.n	8015488 <__pow5mult+0x84>
 8015472:	4639      	mov	r1, r7
 8015474:	4622      	mov	r2, r4
 8015476:	4630      	mov	r0, r6
 8015478:	f7ff ff1a 	bl	80152b0 <__multiply>
 801547c:	4639      	mov	r1, r7
 801547e:	4680      	mov	r8, r0
 8015480:	4630      	mov	r0, r6
 8015482:	f7ff fe47 	bl	8015114 <_Bfree>
 8015486:	4647      	mov	r7, r8
 8015488:	106d      	asrs	r5, r5, #1
 801548a:	d00b      	beq.n	80154a4 <__pow5mult+0xa0>
 801548c:	6820      	ldr	r0, [r4, #0]
 801548e:	b938      	cbnz	r0, 80154a0 <__pow5mult+0x9c>
 8015490:	4622      	mov	r2, r4
 8015492:	4621      	mov	r1, r4
 8015494:	4630      	mov	r0, r6
 8015496:	f7ff ff0b 	bl	80152b0 <__multiply>
 801549a:	6020      	str	r0, [r4, #0]
 801549c:	f8c0 9000 	str.w	r9, [r0]
 80154a0:	4604      	mov	r4, r0
 80154a2:	e7e4      	b.n	801546e <__pow5mult+0x6a>
 80154a4:	4638      	mov	r0, r7
 80154a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154aa:	bf00      	nop
 80154ac:	08018908 	.word	0x08018908
 80154b0:	08018508 	.word	0x08018508
 80154b4:	080187ba 	.word	0x080187ba

080154b8 <__lshift>:
 80154b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154bc:	460c      	mov	r4, r1
 80154be:	6849      	ldr	r1, [r1, #4]
 80154c0:	6923      	ldr	r3, [r4, #16]
 80154c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80154c6:	68a3      	ldr	r3, [r4, #8]
 80154c8:	4607      	mov	r7, r0
 80154ca:	4691      	mov	r9, r2
 80154cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80154d0:	f108 0601 	add.w	r6, r8, #1
 80154d4:	42b3      	cmp	r3, r6
 80154d6:	db0b      	blt.n	80154f0 <__lshift+0x38>
 80154d8:	4638      	mov	r0, r7
 80154da:	f7ff fddb 	bl	8015094 <_Balloc>
 80154de:	4605      	mov	r5, r0
 80154e0:	b948      	cbnz	r0, 80154f6 <__lshift+0x3e>
 80154e2:	4602      	mov	r2, r0
 80154e4:	4b2a      	ldr	r3, [pc, #168]	; (8015590 <__lshift+0xd8>)
 80154e6:	482b      	ldr	r0, [pc, #172]	; (8015594 <__lshift+0xdc>)
 80154e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80154ec:	f7fe fe0a 	bl	8014104 <__assert_func>
 80154f0:	3101      	adds	r1, #1
 80154f2:	005b      	lsls	r3, r3, #1
 80154f4:	e7ee      	b.n	80154d4 <__lshift+0x1c>
 80154f6:	2300      	movs	r3, #0
 80154f8:	f100 0114 	add.w	r1, r0, #20
 80154fc:	f100 0210 	add.w	r2, r0, #16
 8015500:	4618      	mov	r0, r3
 8015502:	4553      	cmp	r3, sl
 8015504:	db37      	blt.n	8015576 <__lshift+0xbe>
 8015506:	6920      	ldr	r0, [r4, #16]
 8015508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801550c:	f104 0314 	add.w	r3, r4, #20
 8015510:	f019 091f 	ands.w	r9, r9, #31
 8015514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801551c:	d02f      	beq.n	801557e <__lshift+0xc6>
 801551e:	f1c9 0e20 	rsb	lr, r9, #32
 8015522:	468a      	mov	sl, r1
 8015524:	f04f 0c00 	mov.w	ip, #0
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	fa02 f209 	lsl.w	r2, r2, r9
 801552e:	ea42 020c 	orr.w	r2, r2, ip
 8015532:	f84a 2b04 	str.w	r2, [sl], #4
 8015536:	f853 2b04 	ldr.w	r2, [r3], #4
 801553a:	4298      	cmp	r0, r3
 801553c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015540:	d8f2      	bhi.n	8015528 <__lshift+0x70>
 8015542:	1b03      	subs	r3, r0, r4
 8015544:	3b15      	subs	r3, #21
 8015546:	f023 0303 	bic.w	r3, r3, #3
 801554a:	3304      	adds	r3, #4
 801554c:	f104 0215 	add.w	r2, r4, #21
 8015550:	4290      	cmp	r0, r2
 8015552:	bf38      	it	cc
 8015554:	2304      	movcc	r3, #4
 8015556:	f841 c003 	str.w	ip, [r1, r3]
 801555a:	f1bc 0f00 	cmp.w	ip, #0
 801555e:	d001      	beq.n	8015564 <__lshift+0xac>
 8015560:	f108 0602 	add.w	r6, r8, #2
 8015564:	3e01      	subs	r6, #1
 8015566:	4638      	mov	r0, r7
 8015568:	612e      	str	r6, [r5, #16]
 801556a:	4621      	mov	r1, r4
 801556c:	f7ff fdd2 	bl	8015114 <_Bfree>
 8015570:	4628      	mov	r0, r5
 8015572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015576:	f842 0f04 	str.w	r0, [r2, #4]!
 801557a:	3301      	adds	r3, #1
 801557c:	e7c1      	b.n	8015502 <__lshift+0x4a>
 801557e:	3904      	subs	r1, #4
 8015580:	f853 2b04 	ldr.w	r2, [r3], #4
 8015584:	f841 2f04 	str.w	r2, [r1, #4]!
 8015588:	4298      	cmp	r0, r3
 801558a:	d8f9      	bhi.n	8015580 <__lshift+0xc8>
 801558c:	e7ea      	b.n	8015564 <__lshift+0xac>
 801558e:	bf00      	nop
 8015590:	080187a9 	.word	0x080187a9
 8015594:	080187ba 	.word	0x080187ba

08015598 <__mcmp>:
 8015598:	b530      	push	{r4, r5, lr}
 801559a:	6902      	ldr	r2, [r0, #16]
 801559c:	690c      	ldr	r4, [r1, #16]
 801559e:	1b12      	subs	r2, r2, r4
 80155a0:	d10e      	bne.n	80155c0 <__mcmp+0x28>
 80155a2:	f100 0314 	add.w	r3, r0, #20
 80155a6:	3114      	adds	r1, #20
 80155a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80155ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80155b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80155b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80155b8:	42a5      	cmp	r5, r4
 80155ba:	d003      	beq.n	80155c4 <__mcmp+0x2c>
 80155bc:	d305      	bcc.n	80155ca <__mcmp+0x32>
 80155be:	2201      	movs	r2, #1
 80155c0:	4610      	mov	r0, r2
 80155c2:	bd30      	pop	{r4, r5, pc}
 80155c4:	4283      	cmp	r3, r0
 80155c6:	d3f3      	bcc.n	80155b0 <__mcmp+0x18>
 80155c8:	e7fa      	b.n	80155c0 <__mcmp+0x28>
 80155ca:	f04f 32ff 	mov.w	r2, #4294967295
 80155ce:	e7f7      	b.n	80155c0 <__mcmp+0x28>

080155d0 <__mdiff>:
 80155d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	460c      	mov	r4, r1
 80155d6:	4606      	mov	r6, r0
 80155d8:	4611      	mov	r1, r2
 80155da:	4620      	mov	r0, r4
 80155dc:	4690      	mov	r8, r2
 80155de:	f7ff ffdb 	bl	8015598 <__mcmp>
 80155e2:	1e05      	subs	r5, r0, #0
 80155e4:	d110      	bne.n	8015608 <__mdiff+0x38>
 80155e6:	4629      	mov	r1, r5
 80155e8:	4630      	mov	r0, r6
 80155ea:	f7ff fd53 	bl	8015094 <_Balloc>
 80155ee:	b930      	cbnz	r0, 80155fe <__mdiff+0x2e>
 80155f0:	4b3a      	ldr	r3, [pc, #232]	; (80156dc <__mdiff+0x10c>)
 80155f2:	4602      	mov	r2, r0
 80155f4:	f240 2132 	movw	r1, #562	; 0x232
 80155f8:	4839      	ldr	r0, [pc, #228]	; (80156e0 <__mdiff+0x110>)
 80155fa:	f7fe fd83 	bl	8014104 <__assert_func>
 80155fe:	2301      	movs	r3, #1
 8015600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015608:	bfa4      	itt	ge
 801560a:	4643      	movge	r3, r8
 801560c:	46a0      	movge	r8, r4
 801560e:	4630      	mov	r0, r6
 8015610:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015614:	bfa6      	itte	ge
 8015616:	461c      	movge	r4, r3
 8015618:	2500      	movge	r5, #0
 801561a:	2501      	movlt	r5, #1
 801561c:	f7ff fd3a 	bl	8015094 <_Balloc>
 8015620:	b920      	cbnz	r0, 801562c <__mdiff+0x5c>
 8015622:	4b2e      	ldr	r3, [pc, #184]	; (80156dc <__mdiff+0x10c>)
 8015624:	4602      	mov	r2, r0
 8015626:	f44f 7110 	mov.w	r1, #576	; 0x240
 801562a:	e7e5      	b.n	80155f8 <__mdiff+0x28>
 801562c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015630:	6926      	ldr	r6, [r4, #16]
 8015632:	60c5      	str	r5, [r0, #12]
 8015634:	f104 0914 	add.w	r9, r4, #20
 8015638:	f108 0514 	add.w	r5, r8, #20
 801563c:	f100 0e14 	add.w	lr, r0, #20
 8015640:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015648:	f108 0210 	add.w	r2, r8, #16
 801564c:	46f2      	mov	sl, lr
 801564e:	2100      	movs	r1, #0
 8015650:	f859 3b04 	ldr.w	r3, [r9], #4
 8015654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015658:	fa1f f883 	uxth.w	r8, r3
 801565c:	fa11 f18b 	uxtah	r1, r1, fp
 8015660:	0c1b      	lsrs	r3, r3, #16
 8015662:	eba1 0808 	sub.w	r8, r1, r8
 8015666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801566a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801566e:	fa1f f888 	uxth.w	r8, r8
 8015672:	1419      	asrs	r1, r3, #16
 8015674:	454e      	cmp	r6, r9
 8015676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801567a:	f84a 3b04 	str.w	r3, [sl], #4
 801567e:	d8e7      	bhi.n	8015650 <__mdiff+0x80>
 8015680:	1b33      	subs	r3, r6, r4
 8015682:	3b15      	subs	r3, #21
 8015684:	f023 0303 	bic.w	r3, r3, #3
 8015688:	3304      	adds	r3, #4
 801568a:	3415      	adds	r4, #21
 801568c:	42a6      	cmp	r6, r4
 801568e:	bf38      	it	cc
 8015690:	2304      	movcc	r3, #4
 8015692:	441d      	add	r5, r3
 8015694:	4473      	add	r3, lr
 8015696:	469e      	mov	lr, r3
 8015698:	462e      	mov	r6, r5
 801569a:	4566      	cmp	r6, ip
 801569c:	d30e      	bcc.n	80156bc <__mdiff+0xec>
 801569e:	f10c 0203 	add.w	r2, ip, #3
 80156a2:	1b52      	subs	r2, r2, r5
 80156a4:	f022 0203 	bic.w	r2, r2, #3
 80156a8:	3d03      	subs	r5, #3
 80156aa:	45ac      	cmp	ip, r5
 80156ac:	bf38      	it	cc
 80156ae:	2200      	movcc	r2, #0
 80156b0:	441a      	add	r2, r3
 80156b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80156b6:	b17b      	cbz	r3, 80156d8 <__mdiff+0x108>
 80156b8:	6107      	str	r7, [r0, #16]
 80156ba:	e7a3      	b.n	8015604 <__mdiff+0x34>
 80156bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80156c0:	fa11 f288 	uxtah	r2, r1, r8
 80156c4:	1414      	asrs	r4, r2, #16
 80156c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80156ca:	b292      	uxth	r2, r2
 80156cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80156d0:	f84e 2b04 	str.w	r2, [lr], #4
 80156d4:	1421      	asrs	r1, r4, #16
 80156d6:	e7e0      	b.n	801569a <__mdiff+0xca>
 80156d8:	3f01      	subs	r7, #1
 80156da:	e7ea      	b.n	80156b2 <__mdiff+0xe2>
 80156dc:	080187a9 	.word	0x080187a9
 80156e0:	080187ba 	.word	0x080187ba

080156e4 <__d2b>:
 80156e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156e8:	4689      	mov	r9, r1
 80156ea:	2101      	movs	r1, #1
 80156ec:	ec57 6b10 	vmov	r6, r7, d0
 80156f0:	4690      	mov	r8, r2
 80156f2:	f7ff fccf 	bl	8015094 <_Balloc>
 80156f6:	4604      	mov	r4, r0
 80156f8:	b930      	cbnz	r0, 8015708 <__d2b+0x24>
 80156fa:	4602      	mov	r2, r0
 80156fc:	4b25      	ldr	r3, [pc, #148]	; (8015794 <__d2b+0xb0>)
 80156fe:	4826      	ldr	r0, [pc, #152]	; (8015798 <__d2b+0xb4>)
 8015700:	f240 310a 	movw	r1, #778	; 0x30a
 8015704:	f7fe fcfe 	bl	8014104 <__assert_func>
 8015708:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801570c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015710:	bb35      	cbnz	r5, 8015760 <__d2b+0x7c>
 8015712:	2e00      	cmp	r6, #0
 8015714:	9301      	str	r3, [sp, #4]
 8015716:	d028      	beq.n	801576a <__d2b+0x86>
 8015718:	4668      	mov	r0, sp
 801571a:	9600      	str	r6, [sp, #0]
 801571c:	f7ff fd82 	bl	8015224 <__lo0bits>
 8015720:	9900      	ldr	r1, [sp, #0]
 8015722:	b300      	cbz	r0, 8015766 <__d2b+0x82>
 8015724:	9a01      	ldr	r2, [sp, #4]
 8015726:	f1c0 0320 	rsb	r3, r0, #32
 801572a:	fa02 f303 	lsl.w	r3, r2, r3
 801572e:	430b      	orrs	r3, r1
 8015730:	40c2      	lsrs	r2, r0
 8015732:	6163      	str	r3, [r4, #20]
 8015734:	9201      	str	r2, [sp, #4]
 8015736:	9b01      	ldr	r3, [sp, #4]
 8015738:	61a3      	str	r3, [r4, #24]
 801573a:	2b00      	cmp	r3, #0
 801573c:	bf14      	ite	ne
 801573e:	2202      	movne	r2, #2
 8015740:	2201      	moveq	r2, #1
 8015742:	6122      	str	r2, [r4, #16]
 8015744:	b1d5      	cbz	r5, 801577c <__d2b+0x98>
 8015746:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801574a:	4405      	add	r5, r0
 801574c:	f8c9 5000 	str.w	r5, [r9]
 8015750:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015754:	f8c8 0000 	str.w	r0, [r8]
 8015758:	4620      	mov	r0, r4
 801575a:	b003      	add	sp, #12
 801575c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015764:	e7d5      	b.n	8015712 <__d2b+0x2e>
 8015766:	6161      	str	r1, [r4, #20]
 8015768:	e7e5      	b.n	8015736 <__d2b+0x52>
 801576a:	a801      	add	r0, sp, #4
 801576c:	f7ff fd5a 	bl	8015224 <__lo0bits>
 8015770:	9b01      	ldr	r3, [sp, #4]
 8015772:	6163      	str	r3, [r4, #20]
 8015774:	2201      	movs	r2, #1
 8015776:	6122      	str	r2, [r4, #16]
 8015778:	3020      	adds	r0, #32
 801577a:	e7e3      	b.n	8015744 <__d2b+0x60>
 801577c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015784:	f8c9 0000 	str.w	r0, [r9]
 8015788:	6918      	ldr	r0, [r3, #16]
 801578a:	f7ff fd2b 	bl	80151e4 <__hi0bits>
 801578e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015792:	e7df      	b.n	8015754 <__d2b+0x70>
 8015794:	080187a9 	.word	0x080187a9
 8015798:	080187ba 	.word	0x080187ba

0801579c <_calloc_r>:
 801579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801579e:	fba1 2402 	umull	r2, r4, r1, r2
 80157a2:	b94c      	cbnz	r4, 80157b8 <_calloc_r+0x1c>
 80157a4:	4611      	mov	r1, r2
 80157a6:	9201      	str	r2, [sp, #4]
 80157a8:	f7fd fd24 	bl	80131f4 <_malloc_r>
 80157ac:	9a01      	ldr	r2, [sp, #4]
 80157ae:	4605      	mov	r5, r0
 80157b0:	b930      	cbnz	r0, 80157c0 <_calloc_r+0x24>
 80157b2:	4628      	mov	r0, r5
 80157b4:	b003      	add	sp, #12
 80157b6:	bd30      	pop	{r4, r5, pc}
 80157b8:	220c      	movs	r2, #12
 80157ba:	6002      	str	r2, [r0, #0]
 80157bc:	2500      	movs	r5, #0
 80157be:	e7f8      	b.n	80157b2 <_calloc_r+0x16>
 80157c0:	4621      	mov	r1, r4
 80157c2:	f7fd fa31 	bl	8012c28 <memset>
 80157c6:	e7f4      	b.n	80157b2 <_calloc_r+0x16>

080157c8 <__ssputs_r>:
 80157c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157cc:	688e      	ldr	r6, [r1, #8]
 80157ce:	429e      	cmp	r6, r3
 80157d0:	4682      	mov	sl, r0
 80157d2:	460c      	mov	r4, r1
 80157d4:	4690      	mov	r8, r2
 80157d6:	461f      	mov	r7, r3
 80157d8:	d838      	bhi.n	801584c <__ssputs_r+0x84>
 80157da:	898a      	ldrh	r2, [r1, #12]
 80157dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157e0:	d032      	beq.n	8015848 <__ssputs_r+0x80>
 80157e2:	6825      	ldr	r5, [r4, #0]
 80157e4:	6909      	ldr	r1, [r1, #16]
 80157e6:	eba5 0901 	sub.w	r9, r5, r1
 80157ea:	6965      	ldr	r5, [r4, #20]
 80157ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157f4:	3301      	adds	r3, #1
 80157f6:	444b      	add	r3, r9
 80157f8:	106d      	asrs	r5, r5, #1
 80157fa:	429d      	cmp	r5, r3
 80157fc:	bf38      	it	cc
 80157fe:	461d      	movcc	r5, r3
 8015800:	0553      	lsls	r3, r2, #21
 8015802:	d531      	bpl.n	8015868 <__ssputs_r+0xa0>
 8015804:	4629      	mov	r1, r5
 8015806:	f7fd fcf5 	bl	80131f4 <_malloc_r>
 801580a:	4606      	mov	r6, r0
 801580c:	b950      	cbnz	r0, 8015824 <__ssputs_r+0x5c>
 801580e:	230c      	movs	r3, #12
 8015810:	f8ca 3000 	str.w	r3, [sl]
 8015814:	89a3      	ldrh	r3, [r4, #12]
 8015816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581a:	81a3      	strh	r3, [r4, #12]
 801581c:	f04f 30ff 	mov.w	r0, #4294967295
 8015820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015824:	6921      	ldr	r1, [r4, #16]
 8015826:	464a      	mov	r2, r9
 8015828:	f7fd f9f0 	bl	8012c0c <memcpy>
 801582c:	89a3      	ldrh	r3, [r4, #12]
 801582e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015836:	81a3      	strh	r3, [r4, #12]
 8015838:	6126      	str	r6, [r4, #16]
 801583a:	6165      	str	r5, [r4, #20]
 801583c:	444e      	add	r6, r9
 801583e:	eba5 0509 	sub.w	r5, r5, r9
 8015842:	6026      	str	r6, [r4, #0]
 8015844:	60a5      	str	r5, [r4, #8]
 8015846:	463e      	mov	r6, r7
 8015848:	42be      	cmp	r6, r7
 801584a:	d900      	bls.n	801584e <__ssputs_r+0x86>
 801584c:	463e      	mov	r6, r7
 801584e:	6820      	ldr	r0, [r4, #0]
 8015850:	4632      	mov	r2, r6
 8015852:	4641      	mov	r1, r8
 8015854:	f000 feb2 	bl	80165bc <memmove>
 8015858:	68a3      	ldr	r3, [r4, #8]
 801585a:	1b9b      	subs	r3, r3, r6
 801585c:	60a3      	str	r3, [r4, #8]
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	4433      	add	r3, r6
 8015862:	6023      	str	r3, [r4, #0]
 8015864:	2000      	movs	r0, #0
 8015866:	e7db      	b.n	8015820 <__ssputs_r+0x58>
 8015868:	462a      	mov	r2, r5
 801586a:	f000 fec1 	bl	80165f0 <_realloc_r>
 801586e:	4606      	mov	r6, r0
 8015870:	2800      	cmp	r0, #0
 8015872:	d1e1      	bne.n	8015838 <__ssputs_r+0x70>
 8015874:	6921      	ldr	r1, [r4, #16]
 8015876:	4650      	mov	r0, sl
 8015878:	f7fd fc50 	bl	801311c <_free_r>
 801587c:	e7c7      	b.n	801580e <__ssputs_r+0x46>
	...

08015880 <_svfiprintf_r>:
 8015880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015884:	4698      	mov	r8, r3
 8015886:	898b      	ldrh	r3, [r1, #12]
 8015888:	061b      	lsls	r3, r3, #24
 801588a:	b09d      	sub	sp, #116	; 0x74
 801588c:	4607      	mov	r7, r0
 801588e:	460d      	mov	r5, r1
 8015890:	4614      	mov	r4, r2
 8015892:	d50e      	bpl.n	80158b2 <_svfiprintf_r+0x32>
 8015894:	690b      	ldr	r3, [r1, #16]
 8015896:	b963      	cbnz	r3, 80158b2 <_svfiprintf_r+0x32>
 8015898:	2140      	movs	r1, #64	; 0x40
 801589a:	f7fd fcab 	bl	80131f4 <_malloc_r>
 801589e:	6028      	str	r0, [r5, #0]
 80158a0:	6128      	str	r0, [r5, #16]
 80158a2:	b920      	cbnz	r0, 80158ae <_svfiprintf_r+0x2e>
 80158a4:	230c      	movs	r3, #12
 80158a6:	603b      	str	r3, [r7, #0]
 80158a8:	f04f 30ff 	mov.w	r0, #4294967295
 80158ac:	e0d1      	b.n	8015a52 <_svfiprintf_r+0x1d2>
 80158ae:	2340      	movs	r3, #64	; 0x40
 80158b0:	616b      	str	r3, [r5, #20]
 80158b2:	2300      	movs	r3, #0
 80158b4:	9309      	str	r3, [sp, #36]	; 0x24
 80158b6:	2320      	movs	r3, #32
 80158b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80158c0:	2330      	movs	r3, #48	; 0x30
 80158c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015a6c <_svfiprintf_r+0x1ec>
 80158c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158ca:	f04f 0901 	mov.w	r9, #1
 80158ce:	4623      	mov	r3, r4
 80158d0:	469a      	mov	sl, r3
 80158d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158d6:	b10a      	cbz	r2, 80158dc <_svfiprintf_r+0x5c>
 80158d8:	2a25      	cmp	r2, #37	; 0x25
 80158da:	d1f9      	bne.n	80158d0 <_svfiprintf_r+0x50>
 80158dc:	ebba 0b04 	subs.w	fp, sl, r4
 80158e0:	d00b      	beq.n	80158fa <_svfiprintf_r+0x7a>
 80158e2:	465b      	mov	r3, fp
 80158e4:	4622      	mov	r2, r4
 80158e6:	4629      	mov	r1, r5
 80158e8:	4638      	mov	r0, r7
 80158ea:	f7ff ff6d 	bl	80157c8 <__ssputs_r>
 80158ee:	3001      	adds	r0, #1
 80158f0:	f000 80aa 	beq.w	8015a48 <_svfiprintf_r+0x1c8>
 80158f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158f6:	445a      	add	r2, fp
 80158f8:	9209      	str	r2, [sp, #36]	; 0x24
 80158fa:	f89a 3000 	ldrb.w	r3, [sl]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 80a2 	beq.w	8015a48 <_svfiprintf_r+0x1c8>
 8015904:	2300      	movs	r3, #0
 8015906:	f04f 32ff 	mov.w	r2, #4294967295
 801590a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801590e:	f10a 0a01 	add.w	sl, sl, #1
 8015912:	9304      	str	r3, [sp, #16]
 8015914:	9307      	str	r3, [sp, #28]
 8015916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801591a:	931a      	str	r3, [sp, #104]	; 0x68
 801591c:	4654      	mov	r4, sl
 801591e:	2205      	movs	r2, #5
 8015920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015924:	4851      	ldr	r0, [pc, #324]	; (8015a6c <_svfiprintf_r+0x1ec>)
 8015926:	f7ea fc33 	bl	8000190 <memchr>
 801592a:	9a04      	ldr	r2, [sp, #16]
 801592c:	b9d8      	cbnz	r0, 8015966 <_svfiprintf_r+0xe6>
 801592e:	06d0      	lsls	r0, r2, #27
 8015930:	bf44      	itt	mi
 8015932:	2320      	movmi	r3, #32
 8015934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015938:	0711      	lsls	r1, r2, #28
 801593a:	bf44      	itt	mi
 801593c:	232b      	movmi	r3, #43	; 0x2b
 801593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015942:	f89a 3000 	ldrb.w	r3, [sl]
 8015946:	2b2a      	cmp	r3, #42	; 0x2a
 8015948:	d015      	beq.n	8015976 <_svfiprintf_r+0xf6>
 801594a:	9a07      	ldr	r2, [sp, #28]
 801594c:	4654      	mov	r4, sl
 801594e:	2000      	movs	r0, #0
 8015950:	f04f 0c0a 	mov.w	ip, #10
 8015954:	4621      	mov	r1, r4
 8015956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801595a:	3b30      	subs	r3, #48	; 0x30
 801595c:	2b09      	cmp	r3, #9
 801595e:	d94e      	bls.n	80159fe <_svfiprintf_r+0x17e>
 8015960:	b1b0      	cbz	r0, 8015990 <_svfiprintf_r+0x110>
 8015962:	9207      	str	r2, [sp, #28]
 8015964:	e014      	b.n	8015990 <_svfiprintf_r+0x110>
 8015966:	eba0 0308 	sub.w	r3, r0, r8
 801596a:	fa09 f303 	lsl.w	r3, r9, r3
 801596e:	4313      	orrs	r3, r2
 8015970:	9304      	str	r3, [sp, #16]
 8015972:	46a2      	mov	sl, r4
 8015974:	e7d2      	b.n	801591c <_svfiprintf_r+0x9c>
 8015976:	9b03      	ldr	r3, [sp, #12]
 8015978:	1d19      	adds	r1, r3, #4
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	9103      	str	r1, [sp, #12]
 801597e:	2b00      	cmp	r3, #0
 8015980:	bfbb      	ittet	lt
 8015982:	425b      	neglt	r3, r3
 8015984:	f042 0202 	orrlt.w	r2, r2, #2
 8015988:	9307      	strge	r3, [sp, #28]
 801598a:	9307      	strlt	r3, [sp, #28]
 801598c:	bfb8      	it	lt
 801598e:	9204      	strlt	r2, [sp, #16]
 8015990:	7823      	ldrb	r3, [r4, #0]
 8015992:	2b2e      	cmp	r3, #46	; 0x2e
 8015994:	d10c      	bne.n	80159b0 <_svfiprintf_r+0x130>
 8015996:	7863      	ldrb	r3, [r4, #1]
 8015998:	2b2a      	cmp	r3, #42	; 0x2a
 801599a:	d135      	bne.n	8015a08 <_svfiprintf_r+0x188>
 801599c:	9b03      	ldr	r3, [sp, #12]
 801599e:	1d1a      	adds	r2, r3, #4
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	9203      	str	r2, [sp, #12]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	bfb8      	it	lt
 80159a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80159ac:	3402      	adds	r4, #2
 80159ae:	9305      	str	r3, [sp, #20]
 80159b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015a7c <_svfiprintf_r+0x1fc>
 80159b4:	7821      	ldrb	r1, [r4, #0]
 80159b6:	2203      	movs	r2, #3
 80159b8:	4650      	mov	r0, sl
 80159ba:	f7ea fbe9 	bl	8000190 <memchr>
 80159be:	b140      	cbz	r0, 80159d2 <_svfiprintf_r+0x152>
 80159c0:	2340      	movs	r3, #64	; 0x40
 80159c2:	eba0 000a 	sub.w	r0, r0, sl
 80159c6:	fa03 f000 	lsl.w	r0, r3, r0
 80159ca:	9b04      	ldr	r3, [sp, #16]
 80159cc:	4303      	orrs	r3, r0
 80159ce:	3401      	adds	r4, #1
 80159d0:	9304      	str	r3, [sp, #16]
 80159d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159d6:	4826      	ldr	r0, [pc, #152]	; (8015a70 <_svfiprintf_r+0x1f0>)
 80159d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159dc:	2206      	movs	r2, #6
 80159de:	f7ea fbd7 	bl	8000190 <memchr>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	d038      	beq.n	8015a58 <_svfiprintf_r+0x1d8>
 80159e6:	4b23      	ldr	r3, [pc, #140]	; (8015a74 <_svfiprintf_r+0x1f4>)
 80159e8:	bb1b      	cbnz	r3, 8015a32 <_svfiprintf_r+0x1b2>
 80159ea:	9b03      	ldr	r3, [sp, #12]
 80159ec:	3307      	adds	r3, #7
 80159ee:	f023 0307 	bic.w	r3, r3, #7
 80159f2:	3308      	adds	r3, #8
 80159f4:	9303      	str	r3, [sp, #12]
 80159f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159f8:	4433      	add	r3, r6
 80159fa:	9309      	str	r3, [sp, #36]	; 0x24
 80159fc:	e767      	b.n	80158ce <_svfiprintf_r+0x4e>
 80159fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a02:	460c      	mov	r4, r1
 8015a04:	2001      	movs	r0, #1
 8015a06:	e7a5      	b.n	8015954 <_svfiprintf_r+0xd4>
 8015a08:	2300      	movs	r3, #0
 8015a0a:	3401      	adds	r4, #1
 8015a0c:	9305      	str	r3, [sp, #20]
 8015a0e:	4619      	mov	r1, r3
 8015a10:	f04f 0c0a 	mov.w	ip, #10
 8015a14:	4620      	mov	r0, r4
 8015a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a1a:	3a30      	subs	r2, #48	; 0x30
 8015a1c:	2a09      	cmp	r2, #9
 8015a1e:	d903      	bls.n	8015a28 <_svfiprintf_r+0x1a8>
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d0c5      	beq.n	80159b0 <_svfiprintf_r+0x130>
 8015a24:	9105      	str	r1, [sp, #20]
 8015a26:	e7c3      	b.n	80159b0 <_svfiprintf_r+0x130>
 8015a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e7f0      	b.n	8015a14 <_svfiprintf_r+0x194>
 8015a32:	ab03      	add	r3, sp, #12
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	462a      	mov	r2, r5
 8015a38:	4b0f      	ldr	r3, [pc, #60]	; (8015a78 <_svfiprintf_r+0x1f8>)
 8015a3a:	a904      	add	r1, sp, #16
 8015a3c:	4638      	mov	r0, r7
 8015a3e:	f7fd fced 	bl	801341c <_printf_float>
 8015a42:	1c42      	adds	r2, r0, #1
 8015a44:	4606      	mov	r6, r0
 8015a46:	d1d6      	bne.n	80159f6 <_svfiprintf_r+0x176>
 8015a48:	89ab      	ldrh	r3, [r5, #12]
 8015a4a:	065b      	lsls	r3, r3, #25
 8015a4c:	f53f af2c 	bmi.w	80158a8 <_svfiprintf_r+0x28>
 8015a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a52:	b01d      	add	sp, #116	; 0x74
 8015a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a58:	ab03      	add	r3, sp, #12
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	462a      	mov	r2, r5
 8015a5e:	4b06      	ldr	r3, [pc, #24]	; (8015a78 <_svfiprintf_r+0x1f8>)
 8015a60:	a904      	add	r1, sp, #16
 8015a62:	4638      	mov	r0, r7
 8015a64:	f7fd ff7e 	bl	8013964 <_printf_i>
 8015a68:	e7eb      	b.n	8015a42 <_svfiprintf_r+0x1c2>
 8015a6a:	bf00      	nop
 8015a6c:	08018914 	.word	0x08018914
 8015a70:	0801891e 	.word	0x0801891e
 8015a74:	0801341d 	.word	0x0801341d
 8015a78:	080157c9 	.word	0x080157c9
 8015a7c:	0801891a 	.word	0x0801891a

08015a80 <__sfputc_r>:
 8015a80:	6893      	ldr	r3, [r2, #8]
 8015a82:	3b01      	subs	r3, #1
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	b410      	push	{r4}
 8015a88:	6093      	str	r3, [r2, #8]
 8015a8a:	da08      	bge.n	8015a9e <__sfputc_r+0x1e>
 8015a8c:	6994      	ldr	r4, [r2, #24]
 8015a8e:	42a3      	cmp	r3, r4
 8015a90:	db01      	blt.n	8015a96 <__sfputc_r+0x16>
 8015a92:	290a      	cmp	r1, #10
 8015a94:	d103      	bne.n	8015a9e <__sfputc_r+0x1e>
 8015a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a9a:	f000 ba57 	b.w	8015f4c <__swbuf_r>
 8015a9e:	6813      	ldr	r3, [r2, #0]
 8015aa0:	1c58      	adds	r0, r3, #1
 8015aa2:	6010      	str	r0, [r2, #0]
 8015aa4:	7019      	strb	r1, [r3, #0]
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aac:	4770      	bx	lr

08015aae <__sfputs_r>:
 8015aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab0:	4606      	mov	r6, r0
 8015ab2:	460f      	mov	r7, r1
 8015ab4:	4614      	mov	r4, r2
 8015ab6:	18d5      	adds	r5, r2, r3
 8015ab8:	42ac      	cmp	r4, r5
 8015aba:	d101      	bne.n	8015ac0 <__sfputs_r+0x12>
 8015abc:	2000      	movs	r0, #0
 8015abe:	e007      	b.n	8015ad0 <__sfputs_r+0x22>
 8015ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ac4:	463a      	mov	r2, r7
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7ff ffda 	bl	8015a80 <__sfputc_r>
 8015acc:	1c43      	adds	r3, r0, #1
 8015ace:	d1f3      	bne.n	8015ab8 <__sfputs_r+0xa>
 8015ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ad4 <_vfiprintf_r>:
 8015ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad8:	460d      	mov	r5, r1
 8015ada:	b09d      	sub	sp, #116	; 0x74
 8015adc:	4614      	mov	r4, r2
 8015ade:	4698      	mov	r8, r3
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	b118      	cbz	r0, 8015aec <_vfiprintf_r+0x18>
 8015ae4:	6983      	ldr	r3, [r0, #24]
 8015ae6:	b90b      	cbnz	r3, 8015aec <_vfiprintf_r+0x18>
 8015ae8:	f000 fc40 	bl	801636c <__sinit>
 8015aec:	4b89      	ldr	r3, [pc, #548]	; (8015d14 <_vfiprintf_r+0x240>)
 8015aee:	429d      	cmp	r5, r3
 8015af0:	d11b      	bne.n	8015b2a <_vfiprintf_r+0x56>
 8015af2:	6875      	ldr	r5, [r6, #4]
 8015af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015af6:	07d9      	lsls	r1, r3, #31
 8015af8:	d405      	bmi.n	8015b06 <_vfiprintf_r+0x32>
 8015afa:	89ab      	ldrh	r3, [r5, #12]
 8015afc:	059a      	lsls	r2, r3, #22
 8015afe:	d402      	bmi.n	8015b06 <_vfiprintf_r+0x32>
 8015b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b02:	f7ff fab7 	bl	8015074 <__retarget_lock_acquire_recursive>
 8015b06:	89ab      	ldrh	r3, [r5, #12]
 8015b08:	071b      	lsls	r3, r3, #28
 8015b0a:	d501      	bpl.n	8015b10 <_vfiprintf_r+0x3c>
 8015b0c:	692b      	ldr	r3, [r5, #16]
 8015b0e:	b9eb      	cbnz	r3, 8015b4c <_vfiprintf_r+0x78>
 8015b10:	4629      	mov	r1, r5
 8015b12:	4630      	mov	r0, r6
 8015b14:	f000 fa7e 	bl	8016014 <__swsetup_r>
 8015b18:	b1c0      	cbz	r0, 8015b4c <_vfiprintf_r+0x78>
 8015b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b1c:	07dc      	lsls	r4, r3, #31
 8015b1e:	d50e      	bpl.n	8015b3e <_vfiprintf_r+0x6a>
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295
 8015b24:	b01d      	add	sp, #116	; 0x74
 8015b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2a:	4b7b      	ldr	r3, [pc, #492]	; (8015d18 <_vfiprintf_r+0x244>)
 8015b2c:	429d      	cmp	r5, r3
 8015b2e:	d101      	bne.n	8015b34 <_vfiprintf_r+0x60>
 8015b30:	68b5      	ldr	r5, [r6, #8]
 8015b32:	e7df      	b.n	8015af4 <_vfiprintf_r+0x20>
 8015b34:	4b79      	ldr	r3, [pc, #484]	; (8015d1c <_vfiprintf_r+0x248>)
 8015b36:	429d      	cmp	r5, r3
 8015b38:	bf08      	it	eq
 8015b3a:	68f5      	ldreq	r5, [r6, #12]
 8015b3c:	e7da      	b.n	8015af4 <_vfiprintf_r+0x20>
 8015b3e:	89ab      	ldrh	r3, [r5, #12]
 8015b40:	0598      	lsls	r0, r3, #22
 8015b42:	d4ed      	bmi.n	8015b20 <_vfiprintf_r+0x4c>
 8015b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b46:	f7ff fa97 	bl	8015078 <__retarget_lock_release_recursive>
 8015b4a:	e7e9      	b.n	8015b20 <_vfiprintf_r+0x4c>
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	2320      	movs	r3, #32
 8015b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b5a:	2330      	movs	r3, #48	; 0x30
 8015b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d20 <_vfiprintf_r+0x24c>
 8015b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b64:	f04f 0901 	mov.w	r9, #1
 8015b68:	4623      	mov	r3, r4
 8015b6a:	469a      	mov	sl, r3
 8015b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b70:	b10a      	cbz	r2, 8015b76 <_vfiprintf_r+0xa2>
 8015b72:	2a25      	cmp	r2, #37	; 0x25
 8015b74:	d1f9      	bne.n	8015b6a <_vfiprintf_r+0x96>
 8015b76:	ebba 0b04 	subs.w	fp, sl, r4
 8015b7a:	d00b      	beq.n	8015b94 <_vfiprintf_r+0xc0>
 8015b7c:	465b      	mov	r3, fp
 8015b7e:	4622      	mov	r2, r4
 8015b80:	4629      	mov	r1, r5
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7ff ff93 	bl	8015aae <__sfputs_r>
 8015b88:	3001      	adds	r0, #1
 8015b8a:	f000 80aa 	beq.w	8015ce2 <_vfiprintf_r+0x20e>
 8015b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b90:	445a      	add	r2, fp
 8015b92:	9209      	str	r2, [sp, #36]	; 0x24
 8015b94:	f89a 3000 	ldrb.w	r3, [sl]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f000 80a2 	beq.w	8015ce2 <_vfiprintf_r+0x20e>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ba8:	f10a 0a01 	add.w	sl, sl, #1
 8015bac:	9304      	str	r3, [sp, #16]
 8015bae:	9307      	str	r3, [sp, #28]
 8015bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8015bb6:	4654      	mov	r4, sl
 8015bb8:	2205      	movs	r2, #5
 8015bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bbe:	4858      	ldr	r0, [pc, #352]	; (8015d20 <_vfiprintf_r+0x24c>)
 8015bc0:	f7ea fae6 	bl	8000190 <memchr>
 8015bc4:	9a04      	ldr	r2, [sp, #16]
 8015bc6:	b9d8      	cbnz	r0, 8015c00 <_vfiprintf_r+0x12c>
 8015bc8:	06d1      	lsls	r1, r2, #27
 8015bca:	bf44      	itt	mi
 8015bcc:	2320      	movmi	r3, #32
 8015bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bd2:	0713      	lsls	r3, r2, #28
 8015bd4:	bf44      	itt	mi
 8015bd6:	232b      	movmi	r3, #43	; 0x2b
 8015bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8015be0:	2b2a      	cmp	r3, #42	; 0x2a
 8015be2:	d015      	beq.n	8015c10 <_vfiprintf_r+0x13c>
 8015be4:	9a07      	ldr	r2, [sp, #28]
 8015be6:	4654      	mov	r4, sl
 8015be8:	2000      	movs	r0, #0
 8015bea:	f04f 0c0a 	mov.w	ip, #10
 8015bee:	4621      	mov	r1, r4
 8015bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bf4:	3b30      	subs	r3, #48	; 0x30
 8015bf6:	2b09      	cmp	r3, #9
 8015bf8:	d94e      	bls.n	8015c98 <_vfiprintf_r+0x1c4>
 8015bfa:	b1b0      	cbz	r0, 8015c2a <_vfiprintf_r+0x156>
 8015bfc:	9207      	str	r2, [sp, #28]
 8015bfe:	e014      	b.n	8015c2a <_vfiprintf_r+0x156>
 8015c00:	eba0 0308 	sub.w	r3, r0, r8
 8015c04:	fa09 f303 	lsl.w	r3, r9, r3
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	46a2      	mov	sl, r4
 8015c0e:	e7d2      	b.n	8015bb6 <_vfiprintf_r+0xe2>
 8015c10:	9b03      	ldr	r3, [sp, #12]
 8015c12:	1d19      	adds	r1, r3, #4
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	9103      	str	r1, [sp, #12]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	bfbb      	ittet	lt
 8015c1c:	425b      	neglt	r3, r3
 8015c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8015c22:	9307      	strge	r3, [sp, #28]
 8015c24:	9307      	strlt	r3, [sp, #28]
 8015c26:	bfb8      	it	lt
 8015c28:	9204      	strlt	r2, [sp, #16]
 8015c2a:	7823      	ldrb	r3, [r4, #0]
 8015c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8015c2e:	d10c      	bne.n	8015c4a <_vfiprintf_r+0x176>
 8015c30:	7863      	ldrb	r3, [r4, #1]
 8015c32:	2b2a      	cmp	r3, #42	; 0x2a
 8015c34:	d135      	bne.n	8015ca2 <_vfiprintf_r+0x1ce>
 8015c36:	9b03      	ldr	r3, [sp, #12]
 8015c38:	1d1a      	adds	r2, r3, #4
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	9203      	str	r2, [sp, #12]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	bfb8      	it	lt
 8015c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c46:	3402      	adds	r4, #2
 8015c48:	9305      	str	r3, [sp, #20]
 8015c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d30 <_vfiprintf_r+0x25c>
 8015c4e:	7821      	ldrb	r1, [r4, #0]
 8015c50:	2203      	movs	r2, #3
 8015c52:	4650      	mov	r0, sl
 8015c54:	f7ea fa9c 	bl	8000190 <memchr>
 8015c58:	b140      	cbz	r0, 8015c6c <_vfiprintf_r+0x198>
 8015c5a:	2340      	movs	r3, #64	; 0x40
 8015c5c:	eba0 000a 	sub.w	r0, r0, sl
 8015c60:	fa03 f000 	lsl.w	r0, r3, r0
 8015c64:	9b04      	ldr	r3, [sp, #16]
 8015c66:	4303      	orrs	r3, r0
 8015c68:	3401      	adds	r4, #1
 8015c6a:	9304      	str	r3, [sp, #16]
 8015c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c70:	482c      	ldr	r0, [pc, #176]	; (8015d24 <_vfiprintf_r+0x250>)
 8015c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c76:	2206      	movs	r2, #6
 8015c78:	f7ea fa8a 	bl	8000190 <memchr>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d03f      	beq.n	8015d00 <_vfiprintf_r+0x22c>
 8015c80:	4b29      	ldr	r3, [pc, #164]	; (8015d28 <_vfiprintf_r+0x254>)
 8015c82:	bb1b      	cbnz	r3, 8015ccc <_vfiprintf_r+0x1f8>
 8015c84:	9b03      	ldr	r3, [sp, #12]
 8015c86:	3307      	adds	r3, #7
 8015c88:	f023 0307 	bic.w	r3, r3, #7
 8015c8c:	3308      	adds	r3, #8
 8015c8e:	9303      	str	r3, [sp, #12]
 8015c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c92:	443b      	add	r3, r7
 8015c94:	9309      	str	r3, [sp, #36]	; 0x24
 8015c96:	e767      	b.n	8015b68 <_vfiprintf_r+0x94>
 8015c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	2001      	movs	r0, #1
 8015ca0:	e7a5      	b.n	8015bee <_vfiprintf_r+0x11a>
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	3401      	adds	r4, #1
 8015ca6:	9305      	str	r3, [sp, #20]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	f04f 0c0a 	mov.w	ip, #10
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cb4:	3a30      	subs	r2, #48	; 0x30
 8015cb6:	2a09      	cmp	r2, #9
 8015cb8:	d903      	bls.n	8015cc2 <_vfiprintf_r+0x1ee>
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d0c5      	beq.n	8015c4a <_vfiprintf_r+0x176>
 8015cbe:	9105      	str	r1, [sp, #20]
 8015cc0:	e7c3      	b.n	8015c4a <_vfiprintf_r+0x176>
 8015cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e7f0      	b.n	8015cae <_vfiprintf_r+0x1da>
 8015ccc:	ab03      	add	r3, sp, #12
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	462a      	mov	r2, r5
 8015cd2:	4b16      	ldr	r3, [pc, #88]	; (8015d2c <_vfiprintf_r+0x258>)
 8015cd4:	a904      	add	r1, sp, #16
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7fd fba0 	bl	801341c <_printf_float>
 8015cdc:	4607      	mov	r7, r0
 8015cde:	1c78      	adds	r0, r7, #1
 8015ce0:	d1d6      	bne.n	8015c90 <_vfiprintf_r+0x1bc>
 8015ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ce4:	07d9      	lsls	r1, r3, #31
 8015ce6:	d405      	bmi.n	8015cf4 <_vfiprintf_r+0x220>
 8015ce8:	89ab      	ldrh	r3, [r5, #12]
 8015cea:	059a      	lsls	r2, r3, #22
 8015cec:	d402      	bmi.n	8015cf4 <_vfiprintf_r+0x220>
 8015cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cf0:	f7ff f9c2 	bl	8015078 <__retarget_lock_release_recursive>
 8015cf4:	89ab      	ldrh	r3, [r5, #12]
 8015cf6:	065b      	lsls	r3, r3, #25
 8015cf8:	f53f af12 	bmi.w	8015b20 <_vfiprintf_r+0x4c>
 8015cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cfe:	e711      	b.n	8015b24 <_vfiprintf_r+0x50>
 8015d00:	ab03      	add	r3, sp, #12
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	462a      	mov	r2, r5
 8015d06:	4b09      	ldr	r3, [pc, #36]	; (8015d2c <_vfiprintf_r+0x258>)
 8015d08:	a904      	add	r1, sp, #16
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	f7fd fe2a 	bl	8013964 <_printf_i>
 8015d10:	e7e4      	b.n	8015cdc <_vfiprintf_r+0x208>
 8015d12:	bf00      	nop
 8015d14:	08018a48 	.word	0x08018a48
 8015d18:	08018a68 	.word	0x08018a68
 8015d1c:	08018a28 	.word	0x08018a28
 8015d20:	08018914 	.word	0x08018914
 8015d24:	0801891e 	.word	0x0801891e
 8015d28:	0801341d 	.word	0x0801341d
 8015d2c:	08015aaf 	.word	0x08015aaf
 8015d30:	0801891a 	.word	0x0801891a

08015d34 <siscanf>:
 8015d34:	b40e      	push	{r1, r2, r3}
 8015d36:	b510      	push	{r4, lr}
 8015d38:	b09f      	sub	sp, #124	; 0x7c
 8015d3a:	ac21      	add	r4, sp, #132	; 0x84
 8015d3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015d40:	f854 2b04 	ldr.w	r2, [r4], #4
 8015d44:	9201      	str	r2, [sp, #4]
 8015d46:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015d4a:	9004      	str	r0, [sp, #16]
 8015d4c:	9008      	str	r0, [sp, #32]
 8015d4e:	f7ea fa17 	bl	8000180 <strlen>
 8015d52:	4b0c      	ldr	r3, [pc, #48]	; (8015d84 <siscanf+0x50>)
 8015d54:	9005      	str	r0, [sp, #20]
 8015d56:	9009      	str	r0, [sp, #36]	; 0x24
 8015d58:	930d      	str	r3, [sp, #52]	; 0x34
 8015d5a:	480b      	ldr	r0, [pc, #44]	; (8015d88 <siscanf+0x54>)
 8015d5c:	9a01      	ldr	r2, [sp, #4]
 8015d5e:	6800      	ldr	r0, [r0, #0]
 8015d60:	9403      	str	r4, [sp, #12]
 8015d62:	2300      	movs	r3, #0
 8015d64:	9311      	str	r3, [sp, #68]	; 0x44
 8015d66:	9316      	str	r3, [sp, #88]	; 0x58
 8015d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015d70:	a904      	add	r1, sp, #16
 8015d72:	4623      	mov	r3, r4
 8015d74:	f000 fcc6 	bl	8016704 <__ssvfiscanf_r>
 8015d78:	b01f      	add	sp, #124	; 0x7c
 8015d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d7e:	b003      	add	sp, #12
 8015d80:	4770      	bx	lr
 8015d82:	bf00      	nop
 8015d84:	08015daf 	.word	0x08015daf
 8015d88:	20000020 	.word	0x20000020

08015d8c <__sread>:
 8015d8c:	b510      	push	{r4, lr}
 8015d8e:	460c      	mov	r4, r1
 8015d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d94:	f000 ff80 	bl	8016c98 <_read_r>
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	bfab      	itete	ge
 8015d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8015da0:	181b      	addge	r3, r3, r0
 8015da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015da6:	bfac      	ite	ge
 8015da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015daa:	81a3      	strhlt	r3, [r4, #12]
 8015dac:	bd10      	pop	{r4, pc}

08015dae <__seofread>:
 8015dae:	2000      	movs	r0, #0
 8015db0:	4770      	bx	lr

08015db2 <__swrite>:
 8015db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db6:	461f      	mov	r7, r3
 8015db8:	898b      	ldrh	r3, [r1, #12]
 8015dba:	05db      	lsls	r3, r3, #23
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	460c      	mov	r4, r1
 8015dc0:	4616      	mov	r6, r2
 8015dc2:	d505      	bpl.n	8015dd0 <__swrite+0x1e>
 8015dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dc8:	2302      	movs	r3, #2
 8015dca:	2200      	movs	r2, #0
 8015dcc:	f000 fb6c 	bl	80164a8 <_lseek_r>
 8015dd0:	89a3      	ldrh	r3, [r4, #12]
 8015dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015dda:	81a3      	strh	r3, [r4, #12]
 8015ddc:	4632      	mov	r2, r6
 8015dde:	463b      	mov	r3, r7
 8015de0:	4628      	mov	r0, r5
 8015de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015de6:	f000 b903 	b.w	8015ff0 <_write_r>

08015dea <__sseek>:
 8015dea:	b510      	push	{r4, lr}
 8015dec:	460c      	mov	r4, r1
 8015dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015df2:	f000 fb59 	bl	80164a8 <_lseek_r>
 8015df6:	1c43      	adds	r3, r0, #1
 8015df8:	89a3      	ldrh	r3, [r4, #12]
 8015dfa:	bf15      	itete	ne
 8015dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e06:	81a3      	strheq	r3, [r4, #12]
 8015e08:	bf18      	it	ne
 8015e0a:	81a3      	strhne	r3, [r4, #12]
 8015e0c:	bd10      	pop	{r4, pc}

08015e0e <__sclose>:
 8015e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e12:	f000 b975 	b.w	8016100 <_close_r>

08015e16 <strcpy>:
 8015e16:	4603      	mov	r3, r0
 8015e18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e1c:	f803 2b01 	strb.w	r2, [r3], #1
 8015e20:	2a00      	cmp	r2, #0
 8015e22:	d1f9      	bne.n	8015e18 <strcpy+0x2>
 8015e24:	4770      	bx	lr

08015e26 <strncmp>:
 8015e26:	b510      	push	{r4, lr}
 8015e28:	b17a      	cbz	r2, 8015e4a <strncmp+0x24>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	3901      	subs	r1, #1
 8015e2e:	1884      	adds	r4, r0, r2
 8015e30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015e38:	4290      	cmp	r0, r2
 8015e3a:	d101      	bne.n	8015e40 <strncmp+0x1a>
 8015e3c:	42a3      	cmp	r3, r4
 8015e3e:	d101      	bne.n	8015e44 <strncmp+0x1e>
 8015e40:	1a80      	subs	r0, r0, r2
 8015e42:	bd10      	pop	{r4, pc}
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d1f3      	bne.n	8015e30 <strncmp+0xa>
 8015e48:	e7fa      	b.n	8015e40 <strncmp+0x1a>
 8015e4a:	4610      	mov	r0, r2
 8015e4c:	e7f9      	b.n	8015e42 <strncmp+0x1c>
	...

08015e50 <_strtoul_l.constprop.0>:
 8015e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e54:	4f36      	ldr	r7, [pc, #216]	; (8015f30 <_strtoul_l.constprop.0+0xe0>)
 8015e56:	4686      	mov	lr, r0
 8015e58:	460d      	mov	r5, r1
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e60:	5de6      	ldrb	r6, [r4, r7]
 8015e62:	f016 0608 	ands.w	r6, r6, #8
 8015e66:	d1f8      	bne.n	8015e5a <_strtoul_l.constprop.0+0xa>
 8015e68:	2c2d      	cmp	r4, #45	; 0x2d
 8015e6a:	d12f      	bne.n	8015ecc <_strtoul_l.constprop.0+0x7c>
 8015e6c:	782c      	ldrb	r4, [r5, #0]
 8015e6e:	2601      	movs	r6, #1
 8015e70:	1c85      	adds	r5, r0, #2
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d057      	beq.n	8015f26 <_strtoul_l.constprop.0+0xd6>
 8015e76:	2b10      	cmp	r3, #16
 8015e78:	d109      	bne.n	8015e8e <_strtoul_l.constprop.0+0x3e>
 8015e7a:	2c30      	cmp	r4, #48	; 0x30
 8015e7c:	d107      	bne.n	8015e8e <_strtoul_l.constprop.0+0x3e>
 8015e7e:	7828      	ldrb	r0, [r5, #0]
 8015e80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015e84:	2858      	cmp	r0, #88	; 0x58
 8015e86:	d149      	bne.n	8015f1c <_strtoul_l.constprop.0+0xcc>
 8015e88:	786c      	ldrb	r4, [r5, #1]
 8015e8a:	2310      	movs	r3, #16
 8015e8c:	3502      	adds	r5, #2
 8015e8e:	f04f 38ff 	mov.w	r8, #4294967295
 8015e92:	2700      	movs	r7, #0
 8015e94:	fbb8 f8f3 	udiv	r8, r8, r3
 8015e98:	fb03 f908 	mul.w	r9, r3, r8
 8015e9c:	ea6f 0909 	mvn.w	r9, r9
 8015ea0:	4638      	mov	r0, r7
 8015ea2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015ea6:	f1bc 0f09 	cmp.w	ip, #9
 8015eaa:	d814      	bhi.n	8015ed6 <_strtoul_l.constprop.0+0x86>
 8015eac:	4664      	mov	r4, ip
 8015eae:	42a3      	cmp	r3, r4
 8015eb0:	dd22      	ble.n	8015ef8 <_strtoul_l.constprop.0+0xa8>
 8015eb2:	2f00      	cmp	r7, #0
 8015eb4:	db1d      	blt.n	8015ef2 <_strtoul_l.constprop.0+0xa2>
 8015eb6:	4580      	cmp	r8, r0
 8015eb8:	d31b      	bcc.n	8015ef2 <_strtoul_l.constprop.0+0xa2>
 8015eba:	d101      	bne.n	8015ec0 <_strtoul_l.constprop.0+0x70>
 8015ebc:	45a1      	cmp	r9, r4
 8015ebe:	db18      	blt.n	8015ef2 <_strtoul_l.constprop.0+0xa2>
 8015ec0:	fb00 4003 	mla	r0, r0, r3, r4
 8015ec4:	2701      	movs	r7, #1
 8015ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015eca:	e7ea      	b.n	8015ea2 <_strtoul_l.constprop.0+0x52>
 8015ecc:	2c2b      	cmp	r4, #43	; 0x2b
 8015ece:	bf04      	itt	eq
 8015ed0:	782c      	ldrbeq	r4, [r5, #0]
 8015ed2:	1c85      	addeq	r5, r0, #2
 8015ed4:	e7cd      	b.n	8015e72 <_strtoul_l.constprop.0+0x22>
 8015ed6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015eda:	f1bc 0f19 	cmp.w	ip, #25
 8015ede:	d801      	bhi.n	8015ee4 <_strtoul_l.constprop.0+0x94>
 8015ee0:	3c37      	subs	r4, #55	; 0x37
 8015ee2:	e7e4      	b.n	8015eae <_strtoul_l.constprop.0+0x5e>
 8015ee4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015ee8:	f1bc 0f19 	cmp.w	ip, #25
 8015eec:	d804      	bhi.n	8015ef8 <_strtoul_l.constprop.0+0xa8>
 8015eee:	3c57      	subs	r4, #87	; 0x57
 8015ef0:	e7dd      	b.n	8015eae <_strtoul_l.constprop.0+0x5e>
 8015ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8015ef6:	e7e6      	b.n	8015ec6 <_strtoul_l.constprop.0+0x76>
 8015ef8:	2f00      	cmp	r7, #0
 8015efa:	da07      	bge.n	8015f0c <_strtoul_l.constprop.0+0xbc>
 8015efc:	2322      	movs	r3, #34	; 0x22
 8015efe:	f8ce 3000 	str.w	r3, [lr]
 8015f02:	f04f 30ff 	mov.w	r0, #4294967295
 8015f06:	b932      	cbnz	r2, 8015f16 <_strtoul_l.constprop.0+0xc6>
 8015f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f0c:	b106      	cbz	r6, 8015f10 <_strtoul_l.constprop.0+0xc0>
 8015f0e:	4240      	negs	r0, r0
 8015f10:	2a00      	cmp	r2, #0
 8015f12:	d0f9      	beq.n	8015f08 <_strtoul_l.constprop.0+0xb8>
 8015f14:	b107      	cbz	r7, 8015f18 <_strtoul_l.constprop.0+0xc8>
 8015f16:	1e69      	subs	r1, r5, #1
 8015f18:	6011      	str	r1, [r2, #0]
 8015f1a:	e7f5      	b.n	8015f08 <_strtoul_l.constprop.0+0xb8>
 8015f1c:	2430      	movs	r4, #48	; 0x30
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1b5      	bne.n	8015e8e <_strtoul_l.constprop.0+0x3e>
 8015f22:	2308      	movs	r3, #8
 8015f24:	e7b3      	b.n	8015e8e <_strtoul_l.constprop.0+0x3e>
 8015f26:	2c30      	cmp	r4, #48	; 0x30
 8015f28:	d0a9      	beq.n	8015e7e <_strtoul_l.constprop.0+0x2e>
 8015f2a:	230a      	movs	r3, #10
 8015f2c:	e7af      	b.n	8015e8e <_strtoul_l.constprop.0+0x3e>
 8015f2e:	bf00      	nop
 8015f30:	08018926 	.word	0x08018926

08015f34 <_strtoul_r>:
 8015f34:	f7ff bf8c 	b.w	8015e50 <_strtoul_l.constprop.0>

08015f38 <strtoul>:
 8015f38:	4613      	mov	r3, r2
 8015f3a:	460a      	mov	r2, r1
 8015f3c:	4601      	mov	r1, r0
 8015f3e:	4802      	ldr	r0, [pc, #8]	; (8015f48 <strtoul+0x10>)
 8015f40:	6800      	ldr	r0, [r0, #0]
 8015f42:	f7ff bf85 	b.w	8015e50 <_strtoul_l.constprop.0>
 8015f46:	bf00      	nop
 8015f48:	20000020 	.word	0x20000020

08015f4c <__swbuf_r>:
 8015f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f4e:	460e      	mov	r6, r1
 8015f50:	4614      	mov	r4, r2
 8015f52:	4605      	mov	r5, r0
 8015f54:	b118      	cbz	r0, 8015f5e <__swbuf_r+0x12>
 8015f56:	6983      	ldr	r3, [r0, #24]
 8015f58:	b90b      	cbnz	r3, 8015f5e <__swbuf_r+0x12>
 8015f5a:	f000 fa07 	bl	801636c <__sinit>
 8015f5e:	4b21      	ldr	r3, [pc, #132]	; (8015fe4 <__swbuf_r+0x98>)
 8015f60:	429c      	cmp	r4, r3
 8015f62:	d12b      	bne.n	8015fbc <__swbuf_r+0x70>
 8015f64:	686c      	ldr	r4, [r5, #4]
 8015f66:	69a3      	ldr	r3, [r4, #24]
 8015f68:	60a3      	str	r3, [r4, #8]
 8015f6a:	89a3      	ldrh	r3, [r4, #12]
 8015f6c:	071a      	lsls	r2, r3, #28
 8015f6e:	d52f      	bpl.n	8015fd0 <__swbuf_r+0x84>
 8015f70:	6923      	ldr	r3, [r4, #16]
 8015f72:	b36b      	cbz	r3, 8015fd0 <__swbuf_r+0x84>
 8015f74:	6923      	ldr	r3, [r4, #16]
 8015f76:	6820      	ldr	r0, [r4, #0]
 8015f78:	1ac0      	subs	r0, r0, r3
 8015f7a:	6963      	ldr	r3, [r4, #20]
 8015f7c:	b2f6      	uxtb	r6, r6
 8015f7e:	4283      	cmp	r3, r0
 8015f80:	4637      	mov	r7, r6
 8015f82:	dc04      	bgt.n	8015f8e <__swbuf_r+0x42>
 8015f84:	4621      	mov	r1, r4
 8015f86:	4628      	mov	r0, r5
 8015f88:	f000 f95c 	bl	8016244 <_fflush_r>
 8015f8c:	bb30      	cbnz	r0, 8015fdc <__swbuf_r+0x90>
 8015f8e:	68a3      	ldr	r3, [r4, #8]
 8015f90:	3b01      	subs	r3, #1
 8015f92:	60a3      	str	r3, [r4, #8]
 8015f94:	6823      	ldr	r3, [r4, #0]
 8015f96:	1c5a      	adds	r2, r3, #1
 8015f98:	6022      	str	r2, [r4, #0]
 8015f9a:	701e      	strb	r6, [r3, #0]
 8015f9c:	6963      	ldr	r3, [r4, #20]
 8015f9e:	3001      	adds	r0, #1
 8015fa0:	4283      	cmp	r3, r0
 8015fa2:	d004      	beq.n	8015fae <__swbuf_r+0x62>
 8015fa4:	89a3      	ldrh	r3, [r4, #12]
 8015fa6:	07db      	lsls	r3, r3, #31
 8015fa8:	d506      	bpl.n	8015fb8 <__swbuf_r+0x6c>
 8015faa:	2e0a      	cmp	r6, #10
 8015fac:	d104      	bne.n	8015fb8 <__swbuf_r+0x6c>
 8015fae:	4621      	mov	r1, r4
 8015fb0:	4628      	mov	r0, r5
 8015fb2:	f000 f947 	bl	8016244 <_fflush_r>
 8015fb6:	b988      	cbnz	r0, 8015fdc <__swbuf_r+0x90>
 8015fb8:	4638      	mov	r0, r7
 8015fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fbc:	4b0a      	ldr	r3, [pc, #40]	; (8015fe8 <__swbuf_r+0x9c>)
 8015fbe:	429c      	cmp	r4, r3
 8015fc0:	d101      	bne.n	8015fc6 <__swbuf_r+0x7a>
 8015fc2:	68ac      	ldr	r4, [r5, #8]
 8015fc4:	e7cf      	b.n	8015f66 <__swbuf_r+0x1a>
 8015fc6:	4b09      	ldr	r3, [pc, #36]	; (8015fec <__swbuf_r+0xa0>)
 8015fc8:	429c      	cmp	r4, r3
 8015fca:	bf08      	it	eq
 8015fcc:	68ec      	ldreq	r4, [r5, #12]
 8015fce:	e7ca      	b.n	8015f66 <__swbuf_r+0x1a>
 8015fd0:	4621      	mov	r1, r4
 8015fd2:	4628      	mov	r0, r5
 8015fd4:	f000 f81e 	bl	8016014 <__swsetup_r>
 8015fd8:	2800      	cmp	r0, #0
 8015fda:	d0cb      	beq.n	8015f74 <__swbuf_r+0x28>
 8015fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8015fe0:	e7ea      	b.n	8015fb8 <__swbuf_r+0x6c>
 8015fe2:	bf00      	nop
 8015fe4:	08018a48 	.word	0x08018a48
 8015fe8:	08018a68 	.word	0x08018a68
 8015fec:	08018a28 	.word	0x08018a28

08015ff0 <_write_r>:
 8015ff0:	b538      	push	{r3, r4, r5, lr}
 8015ff2:	4d07      	ldr	r5, [pc, #28]	; (8016010 <_write_r+0x20>)
 8015ff4:	4604      	mov	r4, r0
 8015ff6:	4608      	mov	r0, r1
 8015ff8:	4611      	mov	r1, r2
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	602a      	str	r2, [r5, #0]
 8015ffe:	461a      	mov	r2, r3
 8016000:	f7f4 fc89 	bl	800a916 <_write>
 8016004:	1c43      	adds	r3, r0, #1
 8016006:	d102      	bne.n	801600e <_write_r+0x1e>
 8016008:	682b      	ldr	r3, [r5, #0]
 801600a:	b103      	cbz	r3, 801600e <_write_r+0x1e>
 801600c:	6023      	str	r3, [r4, #0]
 801600e:	bd38      	pop	{r3, r4, r5, pc}
 8016010:	2000a7b4 	.word	0x2000a7b4

08016014 <__swsetup_r>:
 8016014:	4b32      	ldr	r3, [pc, #200]	; (80160e0 <__swsetup_r+0xcc>)
 8016016:	b570      	push	{r4, r5, r6, lr}
 8016018:	681d      	ldr	r5, [r3, #0]
 801601a:	4606      	mov	r6, r0
 801601c:	460c      	mov	r4, r1
 801601e:	b125      	cbz	r5, 801602a <__swsetup_r+0x16>
 8016020:	69ab      	ldr	r3, [r5, #24]
 8016022:	b913      	cbnz	r3, 801602a <__swsetup_r+0x16>
 8016024:	4628      	mov	r0, r5
 8016026:	f000 f9a1 	bl	801636c <__sinit>
 801602a:	4b2e      	ldr	r3, [pc, #184]	; (80160e4 <__swsetup_r+0xd0>)
 801602c:	429c      	cmp	r4, r3
 801602e:	d10f      	bne.n	8016050 <__swsetup_r+0x3c>
 8016030:	686c      	ldr	r4, [r5, #4]
 8016032:	89a3      	ldrh	r3, [r4, #12]
 8016034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016038:	0719      	lsls	r1, r3, #28
 801603a:	d42c      	bmi.n	8016096 <__swsetup_r+0x82>
 801603c:	06dd      	lsls	r5, r3, #27
 801603e:	d411      	bmi.n	8016064 <__swsetup_r+0x50>
 8016040:	2309      	movs	r3, #9
 8016042:	6033      	str	r3, [r6, #0]
 8016044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016048:	81a3      	strh	r3, [r4, #12]
 801604a:	f04f 30ff 	mov.w	r0, #4294967295
 801604e:	e03e      	b.n	80160ce <__swsetup_r+0xba>
 8016050:	4b25      	ldr	r3, [pc, #148]	; (80160e8 <__swsetup_r+0xd4>)
 8016052:	429c      	cmp	r4, r3
 8016054:	d101      	bne.n	801605a <__swsetup_r+0x46>
 8016056:	68ac      	ldr	r4, [r5, #8]
 8016058:	e7eb      	b.n	8016032 <__swsetup_r+0x1e>
 801605a:	4b24      	ldr	r3, [pc, #144]	; (80160ec <__swsetup_r+0xd8>)
 801605c:	429c      	cmp	r4, r3
 801605e:	bf08      	it	eq
 8016060:	68ec      	ldreq	r4, [r5, #12]
 8016062:	e7e6      	b.n	8016032 <__swsetup_r+0x1e>
 8016064:	0758      	lsls	r0, r3, #29
 8016066:	d512      	bpl.n	801608e <__swsetup_r+0x7a>
 8016068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801606a:	b141      	cbz	r1, 801607e <__swsetup_r+0x6a>
 801606c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016070:	4299      	cmp	r1, r3
 8016072:	d002      	beq.n	801607a <__swsetup_r+0x66>
 8016074:	4630      	mov	r0, r6
 8016076:	f7fd f851 	bl	801311c <_free_r>
 801607a:	2300      	movs	r3, #0
 801607c:	6363      	str	r3, [r4, #52]	; 0x34
 801607e:	89a3      	ldrh	r3, [r4, #12]
 8016080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016084:	81a3      	strh	r3, [r4, #12]
 8016086:	2300      	movs	r3, #0
 8016088:	6063      	str	r3, [r4, #4]
 801608a:	6923      	ldr	r3, [r4, #16]
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	89a3      	ldrh	r3, [r4, #12]
 8016090:	f043 0308 	orr.w	r3, r3, #8
 8016094:	81a3      	strh	r3, [r4, #12]
 8016096:	6923      	ldr	r3, [r4, #16]
 8016098:	b94b      	cbnz	r3, 80160ae <__swsetup_r+0x9a>
 801609a:	89a3      	ldrh	r3, [r4, #12]
 801609c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160a4:	d003      	beq.n	80160ae <__swsetup_r+0x9a>
 80160a6:	4621      	mov	r1, r4
 80160a8:	4630      	mov	r0, r6
 80160aa:	f000 fa35 	bl	8016518 <__smakebuf_r>
 80160ae:	89a0      	ldrh	r0, [r4, #12]
 80160b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160b4:	f010 0301 	ands.w	r3, r0, #1
 80160b8:	d00a      	beq.n	80160d0 <__swsetup_r+0xbc>
 80160ba:	2300      	movs	r3, #0
 80160bc:	60a3      	str	r3, [r4, #8]
 80160be:	6963      	ldr	r3, [r4, #20]
 80160c0:	425b      	negs	r3, r3
 80160c2:	61a3      	str	r3, [r4, #24]
 80160c4:	6923      	ldr	r3, [r4, #16]
 80160c6:	b943      	cbnz	r3, 80160da <__swsetup_r+0xc6>
 80160c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80160cc:	d1ba      	bne.n	8016044 <__swsetup_r+0x30>
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	0781      	lsls	r1, r0, #30
 80160d2:	bf58      	it	pl
 80160d4:	6963      	ldrpl	r3, [r4, #20]
 80160d6:	60a3      	str	r3, [r4, #8]
 80160d8:	e7f4      	b.n	80160c4 <__swsetup_r+0xb0>
 80160da:	2000      	movs	r0, #0
 80160dc:	e7f7      	b.n	80160ce <__swsetup_r+0xba>
 80160de:	bf00      	nop
 80160e0:	20000020 	.word	0x20000020
 80160e4:	08018a48 	.word	0x08018a48
 80160e8:	08018a68 	.word	0x08018a68
 80160ec:	08018a28 	.word	0x08018a28

080160f0 <abort>:
 80160f0:	b508      	push	{r3, lr}
 80160f2:	2006      	movs	r0, #6
 80160f4:	f000 fe42 	bl	8016d7c <raise>
 80160f8:	2001      	movs	r0, #1
 80160fa:	f7f4 fbe5 	bl	800a8c8 <_exit>
	...

08016100 <_close_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4d06      	ldr	r5, [pc, #24]	; (801611c <_close_r+0x1c>)
 8016104:	2300      	movs	r3, #0
 8016106:	4604      	mov	r4, r0
 8016108:	4608      	mov	r0, r1
 801610a:	602b      	str	r3, [r5, #0]
 801610c:	f7f4 fc1f 	bl	800a94e <_close>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	d102      	bne.n	801611a <_close_r+0x1a>
 8016114:	682b      	ldr	r3, [r5, #0]
 8016116:	b103      	cbz	r3, 801611a <_close_r+0x1a>
 8016118:	6023      	str	r3, [r4, #0]
 801611a:	bd38      	pop	{r3, r4, r5, pc}
 801611c:	2000a7b4 	.word	0x2000a7b4

08016120 <__env_lock>:
 8016120:	4801      	ldr	r0, [pc, #4]	; (8016128 <__env_lock+0x8>)
 8016122:	f7fe bfa7 	b.w	8015074 <__retarget_lock_acquire_recursive>
 8016126:	bf00      	nop
 8016128:	2000a7ac 	.word	0x2000a7ac

0801612c <__env_unlock>:
 801612c:	4801      	ldr	r0, [pc, #4]	; (8016134 <__env_unlock+0x8>)
 801612e:	f7fe bfa3 	b.w	8015078 <__retarget_lock_release_recursive>
 8016132:	bf00      	nop
 8016134:	2000a7ac 	.word	0x2000a7ac

08016138 <__sflush_r>:
 8016138:	898a      	ldrh	r2, [r1, #12]
 801613a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801613e:	4605      	mov	r5, r0
 8016140:	0710      	lsls	r0, r2, #28
 8016142:	460c      	mov	r4, r1
 8016144:	d458      	bmi.n	80161f8 <__sflush_r+0xc0>
 8016146:	684b      	ldr	r3, [r1, #4]
 8016148:	2b00      	cmp	r3, #0
 801614a:	dc05      	bgt.n	8016158 <__sflush_r+0x20>
 801614c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801614e:	2b00      	cmp	r3, #0
 8016150:	dc02      	bgt.n	8016158 <__sflush_r+0x20>
 8016152:	2000      	movs	r0, #0
 8016154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801615a:	2e00      	cmp	r6, #0
 801615c:	d0f9      	beq.n	8016152 <__sflush_r+0x1a>
 801615e:	2300      	movs	r3, #0
 8016160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016164:	682f      	ldr	r7, [r5, #0]
 8016166:	602b      	str	r3, [r5, #0]
 8016168:	d032      	beq.n	80161d0 <__sflush_r+0x98>
 801616a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801616c:	89a3      	ldrh	r3, [r4, #12]
 801616e:	075a      	lsls	r2, r3, #29
 8016170:	d505      	bpl.n	801617e <__sflush_r+0x46>
 8016172:	6863      	ldr	r3, [r4, #4]
 8016174:	1ac0      	subs	r0, r0, r3
 8016176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016178:	b10b      	cbz	r3, 801617e <__sflush_r+0x46>
 801617a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801617c:	1ac0      	subs	r0, r0, r3
 801617e:	2300      	movs	r3, #0
 8016180:	4602      	mov	r2, r0
 8016182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016184:	6a21      	ldr	r1, [r4, #32]
 8016186:	4628      	mov	r0, r5
 8016188:	47b0      	blx	r6
 801618a:	1c43      	adds	r3, r0, #1
 801618c:	89a3      	ldrh	r3, [r4, #12]
 801618e:	d106      	bne.n	801619e <__sflush_r+0x66>
 8016190:	6829      	ldr	r1, [r5, #0]
 8016192:	291d      	cmp	r1, #29
 8016194:	d82c      	bhi.n	80161f0 <__sflush_r+0xb8>
 8016196:	4a2a      	ldr	r2, [pc, #168]	; (8016240 <__sflush_r+0x108>)
 8016198:	40ca      	lsrs	r2, r1
 801619a:	07d6      	lsls	r6, r2, #31
 801619c:	d528      	bpl.n	80161f0 <__sflush_r+0xb8>
 801619e:	2200      	movs	r2, #0
 80161a0:	6062      	str	r2, [r4, #4]
 80161a2:	04d9      	lsls	r1, r3, #19
 80161a4:	6922      	ldr	r2, [r4, #16]
 80161a6:	6022      	str	r2, [r4, #0]
 80161a8:	d504      	bpl.n	80161b4 <__sflush_r+0x7c>
 80161aa:	1c42      	adds	r2, r0, #1
 80161ac:	d101      	bne.n	80161b2 <__sflush_r+0x7a>
 80161ae:	682b      	ldr	r3, [r5, #0]
 80161b0:	b903      	cbnz	r3, 80161b4 <__sflush_r+0x7c>
 80161b2:	6560      	str	r0, [r4, #84]	; 0x54
 80161b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161b6:	602f      	str	r7, [r5, #0]
 80161b8:	2900      	cmp	r1, #0
 80161ba:	d0ca      	beq.n	8016152 <__sflush_r+0x1a>
 80161bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161c0:	4299      	cmp	r1, r3
 80161c2:	d002      	beq.n	80161ca <__sflush_r+0x92>
 80161c4:	4628      	mov	r0, r5
 80161c6:	f7fc ffa9 	bl	801311c <_free_r>
 80161ca:	2000      	movs	r0, #0
 80161cc:	6360      	str	r0, [r4, #52]	; 0x34
 80161ce:	e7c1      	b.n	8016154 <__sflush_r+0x1c>
 80161d0:	6a21      	ldr	r1, [r4, #32]
 80161d2:	2301      	movs	r3, #1
 80161d4:	4628      	mov	r0, r5
 80161d6:	47b0      	blx	r6
 80161d8:	1c41      	adds	r1, r0, #1
 80161da:	d1c7      	bne.n	801616c <__sflush_r+0x34>
 80161dc:	682b      	ldr	r3, [r5, #0]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d0c4      	beq.n	801616c <__sflush_r+0x34>
 80161e2:	2b1d      	cmp	r3, #29
 80161e4:	d001      	beq.n	80161ea <__sflush_r+0xb2>
 80161e6:	2b16      	cmp	r3, #22
 80161e8:	d101      	bne.n	80161ee <__sflush_r+0xb6>
 80161ea:	602f      	str	r7, [r5, #0]
 80161ec:	e7b1      	b.n	8016152 <__sflush_r+0x1a>
 80161ee:	89a3      	ldrh	r3, [r4, #12]
 80161f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161f4:	81a3      	strh	r3, [r4, #12]
 80161f6:	e7ad      	b.n	8016154 <__sflush_r+0x1c>
 80161f8:	690f      	ldr	r7, [r1, #16]
 80161fa:	2f00      	cmp	r7, #0
 80161fc:	d0a9      	beq.n	8016152 <__sflush_r+0x1a>
 80161fe:	0793      	lsls	r3, r2, #30
 8016200:	680e      	ldr	r6, [r1, #0]
 8016202:	bf08      	it	eq
 8016204:	694b      	ldreq	r3, [r1, #20]
 8016206:	600f      	str	r7, [r1, #0]
 8016208:	bf18      	it	ne
 801620a:	2300      	movne	r3, #0
 801620c:	eba6 0807 	sub.w	r8, r6, r7
 8016210:	608b      	str	r3, [r1, #8]
 8016212:	f1b8 0f00 	cmp.w	r8, #0
 8016216:	dd9c      	ble.n	8016152 <__sflush_r+0x1a>
 8016218:	6a21      	ldr	r1, [r4, #32]
 801621a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801621c:	4643      	mov	r3, r8
 801621e:	463a      	mov	r2, r7
 8016220:	4628      	mov	r0, r5
 8016222:	47b0      	blx	r6
 8016224:	2800      	cmp	r0, #0
 8016226:	dc06      	bgt.n	8016236 <__sflush_r+0xfe>
 8016228:	89a3      	ldrh	r3, [r4, #12]
 801622a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801622e:	81a3      	strh	r3, [r4, #12]
 8016230:	f04f 30ff 	mov.w	r0, #4294967295
 8016234:	e78e      	b.n	8016154 <__sflush_r+0x1c>
 8016236:	4407      	add	r7, r0
 8016238:	eba8 0800 	sub.w	r8, r8, r0
 801623c:	e7e9      	b.n	8016212 <__sflush_r+0xda>
 801623e:	bf00      	nop
 8016240:	20400001 	.word	0x20400001

08016244 <_fflush_r>:
 8016244:	b538      	push	{r3, r4, r5, lr}
 8016246:	690b      	ldr	r3, [r1, #16]
 8016248:	4605      	mov	r5, r0
 801624a:	460c      	mov	r4, r1
 801624c:	b913      	cbnz	r3, 8016254 <_fflush_r+0x10>
 801624e:	2500      	movs	r5, #0
 8016250:	4628      	mov	r0, r5
 8016252:	bd38      	pop	{r3, r4, r5, pc}
 8016254:	b118      	cbz	r0, 801625e <_fflush_r+0x1a>
 8016256:	6983      	ldr	r3, [r0, #24]
 8016258:	b90b      	cbnz	r3, 801625e <_fflush_r+0x1a>
 801625a:	f000 f887 	bl	801636c <__sinit>
 801625e:	4b14      	ldr	r3, [pc, #80]	; (80162b0 <_fflush_r+0x6c>)
 8016260:	429c      	cmp	r4, r3
 8016262:	d11b      	bne.n	801629c <_fflush_r+0x58>
 8016264:	686c      	ldr	r4, [r5, #4]
 8016266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d0ef      	beq.n	801624e <_fflush_r+0xa>
 801626e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016270:	07d0      	lsls	r0, r2, #31
 8016272:	d404      	bmi.n	801627e <_fflush_r+0x3a>
 8016274:	0599      	lsls	r1, r3, #22
 8016276:	d402      	bmi.n	801627e <_fflush_r+0x3a>
 8016278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801627a:	f7fe fefb 	bl	8015074 <__retarget_lock_acquire_recursive>
 801627e:	4628      	mov	r0, r5
 8016280:	4621      	mov	r1, r4
 8016282:	f7ff ff59 	bl	8016138 <__sflush_r>
 8016286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016288:	07da      	lsls	r2, r3, #31
 801628a:	4605      	mov	r5, r0
 801628c:	d4e0      	bmi.n	8016250 <_fflush_r+0xc>
 801628e:	89a3      	ldrh	r3, [r4, #12]
 8016290:	059b      	lsls	r3, r3, #22
 8016292:	d4dd      	bmi.n	8016250 <_fflush_r+0xc>
 8016294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016296:	f7fe feef 	bl	8015078 <__retarget_lock_release_recursive>
 801629a:	e7d9      	b.n	8016250 <_fflush_r+0xc>
 801629c:	4b05      	ldr	r3, [pc, #20]	; (80162b4 <_fflush_r+0x70>)
 801629e:	429c      	cmp	r4, r3
 80162a0:	d101      	bne.n	80162a6 <_fflush_r+0x62>
 80162a2:	68ac      	ldr	r4, [r5, #8]
 80162a4:	e7df      	b.n	8016266 <_fflush_r+0x22>
 80162a6:	4b04      	ldr	r3, [pc, #16]	; (80162b8 <_fflush_r+0x74>)
 80162a8:	429c      	cmp	r4, r3
 80162aa:	bf08      	it	eq
 80162ac:	68ec      	ldreq	r4, [r5, #12]
 80162ae:	e7da      	b.n	8016266 <_fflush_r+0x22>
 80162b0:	08018a48 	.word	0x08018a48
 80162b4:	08018a68 	.word	0x08018a68
 80162b8:	08018a28 	.word	0x08018a28

080162bc <std>:
 80162bc:	2300      	movs	r3, #0
 80162be:	b510      	push	{r4, lr}
 80162c0:	4604      	mov	r4, r0
 80162c2:	e9c0 3300 	strd	r3, r3, [r0]
 80162c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162ca:	6083      	str	r3, [r0, #8]
 80162cc:	8181      	strh	r1, [r0, #12]
 80162ce:	6643      	str	r3, [r0, #100]	; 0x64
 80162d0:	81c2      	strh	r2, [r0, #14]
 80162d2:	6183      	str	r3, [r0, #24]
 80162d4:	4619      	mov	r1, r3
 80162d6:	2208      	movs	r2, #8
 80162d8:	305c      	adds	r0, #92	; 0x5c
 80162da:	f7fc fca5 	bl	8012c28 <memset>
 80162de:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <std+0x38>)
 80162e0:	6263      	str	r3, [r4, #36]	; 0x24
 80162e2:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <std+0x3c>)
 80162e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80162e6:	4b05      	ldr	r3, [pc, #20]	; (80162fc <std+0x40>)
 80162e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162ea:	4b05      	ldr	r3, [pc, #20]	; (8016300 <std+0x44>)
 80162ec:	6224      	str	r4, [r4, #32]
 80162ee:	6323      	str	r3, [r4, #48]	; 0x30
 80162f0:	bd10      	pop	{r4, pc}
 80162f2:	bf00      	nop
 80162f4:	08015d8d 	.word	0x08015d8d
 80162f8:	08015db3 	.word	0x08015db3
 80162fc:	08015deb 	.word	0x08015deb
 8016300:	08015e0f 	.word	0x08015e0f

08016304 <_cleanup_r>:
 8016304:	4901      	ldr	r1, [pc, #4]	; (801630c <_cleanup_r+0x8>)
 8016306:	f000 b8af 	b.w	8016468 <_fwalk_reent>
 801630a:	bf00      	nop
 801630c:	08016245 	.word	0x08016245

08016310 <__sfmoreglue>:
 8016310:	b570      	push	{r4, r5, r6, lr}
 8016312:	2268      	movs	r2, #104	; 0x68
 8016314:	1e4d      	subs	r5, r1, #1
 8016316:	4355      	muls	r5, r2
 8016318:	460e      	mov	r6, r1
 801631a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801631e:	f7fc ff69 	bl	80131f4 <_malloc_r>
 8016322:	4604      	mov	r4, r0
 8016324:	b140      	cbz	r0, 8016338 <__sfmoreglue+0x28>
 8016326:	2100      	movs	r1, #0
 8016328:	e9c0 1600 	strd	r1, r6, [r0]
 801632c:	300c      	adds	r0, #12
 801632e:	60a0      	str	r0, [r4, #8]
 8016330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016334:	f7fc fc78 	bl	8012c28 <memset>
 8016338:	4620      	mov	r0, r4
 801633a:	bd70      	pop	{r4, r5, r6, pc}

0801633c <__sfp_lock_acquire>:
 801633c:	4801      	ldr	r0, [pc, #4]	; (8016344 <__sfp_lock_acquire+0x8>)
 801633e:	f7fe be99 	b.w	8015074 <__retarget_lock_acquire_recursive>
 8016342:	bf00      	nop
 8016344:	2000a7ae 	.word	0x2000a7ae

08016348 <__sfp_lock_release>:
 8016348:	4801      	ldr	r0, [pc, #4]	; (8016350 <__sfp_lock_release+0x8>)
 801634a:	f7fe be95 	b.w	8015078 <__retarget_lock_release_recursive>
 801634e:	bf00      	nop
 8016350:	2000a7ae 	.word	0x2000a7ae

08016354 <__sinit_lock_acquire>:
 8016354:	4801      	ldr	r0, [pc, #4]	; (801635c <__sinit_lock_acquire+0x8>)
 8016356:	f7fe be8d 	b.w	8015074 <__retarget_lock_acquire_recursive>
 801635a:	bf00      	nop
 801635c:	2000a7af 	.word	0x2000a7af

08016360 <__sinit_lock_release>:
 8016360:	4801      	ldr	r0, [pc, #4]	; (8016368 <__sinit_lock_release+0x8>)
 8016362:	f7fe be89 	b.w	8015078 <__retarget_lock_release_recursive>
 8016366:	bf00      	nop
 8016368:	2000a7af 	.word	0x2000a7af

0801636c <__sinit>:
 801636c:	b510      	push	{r4, lr}
 801636e:	4604      	mov	r4, r0
 8016370:	f7ff fff0 	bl	8016354 <__sinit_lock_acquire>
 8016374:	69a3      	ldr	r3, [r4, #24]
 8016376:	b11b      	cbz	r3, 8016380 <__sinit+0x14>
 8016378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801637c:	f7ff bff0 	b.w	8016360 <__sinit_lock_release>
 8016380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016384:	6523      	str	r3, [r4, #80]	; 0x50
 8016386:	4b13      	ldr	r3, [pc, #76]	; (80163d4 <__sinit+0x68>)
 8016388:	4a13      	ldr	r2, [pc, #76]	; (80163d8 <__sinit+0x6c>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	62a2      	str	r2, [r4, #40]	; 0x28
 801638e:	42a3      	cmp	r3, r4
 8016390:	bf04      	itt	eq
 8016392:	2301      	moveq	r3, #1
 8016394:	61a3      	streq	r3, [r4, #24]
 8016396:	4620      	mov	r0, r4
 8016398:	f000 f820 	bl	80163dc <__sfp>
 801639c:	6060      	str	r0, [r4, #4]
 801639e:	4620      	mov	r0, r4
 80163a0:	f000 f81c 	bl	80163dc <__sfp>
 80163a4:	60a0      	str	r0, [r4, #8]
 80163a6:	4620      	mov	r0, r4
 80163a8:	f000 f818 	bl	80163dc <__sfp>
 80163ac:	2200      	movs	r2, #0
 80163ae:	60e0      	str	r0, [r4, #12]
 80163b0:	2104      	movs	r1, #4
 80163b2:	6860      	ldr	r0, [r4, #4]
 80163b4:	f7ff ff82 	bl	80162bc <std>
 80163b8:	68a0      	ldr	r0, [r4, #8]
 80163ba:	2201      	movs	r2, #1
 80163bc:	2109      	movs	r1, #9
 80163be:	f7ff ff7d 	bl	80162bc <std>
 80163c2:	68e0      	ldr	r0, [r4, #12]
 80163c4:	2202      	movs	r2, #2
 80163c6:	2112      	movs	r1, #18
 80163c8:	f7ff ff78 	bl	80162bc <std>
 80163cc:	2301      	movs	r3, #1
 80163ce:	61a3      	str	r3, [r4, #24]
 80163d0:	e7d2      	b.n	8016378 <__sinit+0xc>
 80163d2:	bf00      	nop
 80163d4:	08018504 	.word	0x08018504
 80163d8:	08016305 	.word	0x08016305

080163dc <__sfp>:
 80163dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163de:	4607      	mov	r7, r0
 80163e0:	f7ff ffac 	bl	801633c <__sfp_lock_acquire>
 80163e4:	4b1e      	ldr	r3, [pc, #120]	; (8016460 <__sfp+0x84>)
 80163e6:	681e      	ldr	r6, [r3, #0]
 80163e8:	69b3      	ldr	r3, [r6, #24]
 80163ea:	b913      	cbnz	r3, 80163f2 <__sfp+0x16>
 80163ec:	4630      	mov	r0, r6
 80163ee:	f7ff ffbd 	bl	801636c <__sinit>
 80163f2:	3648      	adds	r6, #72	; 0x48
 80163f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163f8:	3b01      	subs	r3, #1
 80163fa:	d503      	bpl.n	8016404 <__sfp+0x28>
 80163fc:	6833      	ldr	r3, [r6, #0]
 80163fe:	b30b      	cbz	r3, 8016444 <__sfp+0x68>
 8016400:	6836      	ldr	r6, [r6, #0]
 8016402:	e7f7      	b.n	80163f4 <__sfp+0x18>
 8016404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016408:	b9d5      	cbnz	r5, 8016440 <__sfp+0x64>
 801640a:	4b16      	ldr	r3, [pc, #88]	; (8016464 <__sfp+0x88>)
 801640c:	60e3      	str	r3, [r4, #12]
 801640e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016412:	6665      	str	r5, [r4, #100]	; 0x64
 8016414:	f7fe fe2c 	bl	8015070 <__retarget_lock_init_recursive>
 8016418:	f7ff ff96 	bl	8016348 <__sfp_lock_release>
 801641c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016424:	6025      	str	r5, [r4, #0]
 8016426:	61a5      	str	r5, [r4, #24]
 8016428:	2208      	movs	r2, #8
 801642a:	4629      	mov	r1, r5
 801642c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016430:	f7fc fbfa 	bl	8012c28 <memset>
 8016434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801643c:	4620      	mov	r0, r4
 801643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016440:	3468      	adds	r4, #104	; 0x68
 8016442:	e7d9      	b.n	80163f8 <__sfp+0x1c>
 8016444:	2104      	movs	r1, #4
 8016446:	4638      	mov	r0, r7
 8016448:	f7ff ff62 	bl	8016310 <__sfmoreglue>
 801644c:	4604      	mov	r4, r0
 801644e:	6030      	str	r0, [r6, #0]
 8016450:	2800      	cmp	r0, #0
 8016452:	d1d5      	bne.n	8016400 <__sfp+0x24>
 8016454:	f7ff ff78 	bl	8016348 <__sfp_lock_release>
 8016458:	230c      	movs	r3, #12
 801645a:	603b      	str	r3, [r7, #0]
 801645c:	e7ee      	b.n	801643c <__sfp+0x60>
 801645e:	bf00      	nop
 8016460:	08018504 	.word	0x08018504
 8016464:	ffff0001 	.word	0xffff0001

08016468 <_fwalk_reent>:
 8016468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801646c:	4606      	mov	r6, r0
 801646e:	4688      	mov	r8, r1
 8016470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016474:	2700      	movs	r7, #0
 8016476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801647a:	f1b9 0901 	subs.w	r9, r9, #1
 801647e:	d505      	bpl.n	801648c <_fwalk_reent+0x24>
 8016480:	6824      	ldr	r4, [r4, #0]
 8016482:	2c00      	cmp	r4, #0
 8016484:	d1f7      	bne.n	8016476 <_fwalk_reent+0xe>
 8016486:	4638      	mov	r0, r7
 8016488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801648c:	89ab      	ldrh	r3, [r5, #12]
 801648e:	2b01      	cmp	r3, #1
 8016490:	d907      	bls.n	80164a2 <_fwalk_reent+0x3a>
 8016492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016496:	3301      	adds	r3, #1
 8016498:	d003      	beq.n	80164a2 <_fwalk_reent+0x3a>
 801649a:	4629      	mov	r1, r5
 801649c:	4630      	mov	r0, r6
 801649e:	47c0      	blx	r8
 80164a0:	4307      	orrs	r7, r0
 80164a2:	3568      	adds	r5, #104	; 0x68
 80164a4:	e7e9      	b.n	801647a <_fwalk_reent+0x12>
	...

080164a8 <_lseek_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4d07      	ldr	r5, [pc, #28]	; (80164c8 <_lseek_r+0x20>)
 80164ac:	4604      	mov	r4, r0
 80164ae:	4608      	mov	r0, r1
 80164b0:	4611      	mov	r1, r2
 80164b2:	2200      	movs	r2, #0
 80164b4:	602a      	str	r2, [r5, #0]
 80164b6:	461a      	mov	r2, r3
 80164b8:	f7f4 fa70 	bl	800a99c <_lseek>
 80164bc:	1c43      	adds	r3, r0, #1
 80164be:	d102      	bne.n	80164c6 <_lseek_r+0x1e>
 80164c0:	682b      	ldr	r3, [r5, #0]
 80164c2:	b103      	cbz	r3, 80164c6 <_lseek_r+0x1e>
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	2000a7b4 	.word	0x2000a7b4

080164cc <__swhatbuf_r>:
 80164cc:	b570      	push	{r4, r5, r6, lr}
 80164ce:	460e      	mov	r6, r1
 80164d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164d4:	2900      	cmp	r1, #0
 80164d6:	b096      	sub	sp, #88	; 0x58
 80164d8:	4614      	mov	r4, r2
 80164da:	461d      	mov	r5, r3
 80164dc:	da08      	bge.n	80164f0 <__swhatbuf_r+0x24>
 80164de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80164e2:	2200      	movs	r2, #0
 80164e4:	602a      	str	r2, [r5, #0]
 80164e6:	061a      	lsls	r2, r3, #24
 80164e8:	d410      	bmi.n	801650c <__swhatbuf_r+0x40>
 80164ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164ee:	e00e      	b.n	801650e <__swhatbuf_r+0x42>
 80164f0:	466a      	mov	r2, sp
 80164f2:	f000 fd2b 	bl	8016f4c <_fstat_r>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	dbf1      	blt.n	80164de <__swhatbuf_r+0x12>
 80164fa:	9a01      	ldr	r2, [sp, #4]
 80164fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016504:	425a      	negs	r2, r3
 8016506:	415a      	adcs	r2, r3
 8016508:	602a      	str	r2, [r5, #0]
 801650a:	e7ee      	b.n	80164ea <__swhatbuf_r+0x1e>
 801650c:	2340      	movs	r3, #64	; 0x40
 801650e:	2000      	movs	r0, #0
 8016510:	6023      	str	r3, [r4, #0]
 8016512:	b016      	add	sp, #88	; 0x58
 8016514:	bd70      	pop	{r4, r5, r6, pc}
	...

08016518 <__smakebuf_r>:
 8016518:	898b      	ldrh	r3, [r1, #12]
 801651a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801651c:	079d      	lsls	r5, r3, #30
 801651e:	4606      	mov	r6, r0
 8016520:	460c      	mov	r4, r1
 8016522:	d507      	bpl.n	8016534 <__smakebuf_r+0x1c>
 8016524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016528:	6023      	str	r3, [r4, #0]
 801652a:	6123      	str	r3, [r4, #16]
 801652c:	2301      	movs	r3, #1
 801652e:	6163      	str	r3, [r4, #20]
 8016530:	b002      	add	sp, #8
 8016532:	bd70      	pop	{r4, r5, r6, pc}
 8016534:	ab01      	add	r3, sp, #4
 8016536:	466a      	mov	r2, sp
 8016538:	f7ff ffc8 	bl	80164cc <__swhatbuf_r>
 801653c:	9900      	ldr	r1, [sp, #0]
 801653e:	4605      	mov	r5, r0
 8016540:	4630      	mov	r0, r6
 8016542:	f7fc fe57 	bl	80131f4 <_malloc_r>
 8016546:	b948      	cbnz	r0, 801655c <__smakebuf_r+0x44>
 8016548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801654c:	059a      	lsls	r2, r3, #22
 801654e:	d4ef      	bmi.n	8016530 <__smakebuf_r+0x18>
 8016550:	f023 0303 	bic.w	r3, r3, #3
 8016554:	f043 0302 	orr.w	r3, r3, #2
 8016558:	81a3      	strh	r3, [r4, #12]
 801655a:	e7e3      	b.n	8016524 <__smakebuf_r+0xc>
 801655c:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <__smakebuf_r+0x7c>)
 801655e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	6020      	str	r0, [r4, #0]
 8016564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	9b00      	ldr	r3, [sp, #0]
 801656c:	6163      	str	r3, [r4, #20]
 801656e:	9b01      	ldr	r3, [sp, #4]
 8016570:	6120      	str	r0, [r4, #16]
 8016572:	b15b      	cbz	r3, 801658c <__smakebuf_r+0x74>
 8016574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016578:	4630      	mov	r0, r6
 801657a:	f000 fcf9 	bl	8016f70 <_isatty_r>
 801657e:	b128      	cbz	r0, 801658c <__smakebuf_r+0x74>
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	f023 0303 	bic.w	r3, r3, #3
 8016586:	f043 0301 	orr.w	r3, r3, #1
 801658a:	81a3      	strh	r3, [r4, #12]
 801658c:	89a0      	ldrh	r0, [r4, #12]
 801658e:	4305      	orrs	r5, r0
 8016590:	81a5      	strh	r5, [r4, #12]
 8016592:	e7cd      	b.n	8016530 <__smakebuf_r+0x18>
 8016594:	08016305 	.word	0x08016305

08016598 <__ascii_mbtowc>:
 8016598:	b082      	sub	sp, #8
 801659a:	b901      	cbnz	r1, 801659e <__ascii_mbtowc+0x6>
 801659c:	a901      	add	r1, sp, #4
 801659e:	b142      	cbz	r2, 80165b2 <__ascii_mbtowc+0x1a>
 80165a0:	b14b      	cbz	r3, 80165b6 <__ascii_mbtowc+0x1e>
 80165a2:	7813      	ldrb	r3, [r2, #0]
 80165a4:	600b      	str	r3, [r1, #0]
 80165a6:	7812      	ldrb	r2, [r2, #0]
 80165a8:	1e10      	subs	r0, r2, #0
 80165aa:	bf18      	it	ne
 80165ac:	2001      	movne	r0, #1
 80165ae:	b002      	add	sp, #8
 80165b0:	4770      	bx	lr
 80165b2:	4610      	mov	r0, r2
 80165b4:	e7fb      	b.n	80165ae <__ascii_mbtowc+0x16>
 80165b6:	f06f 0001 	mvn.w	r0, #1
 80165ba:	e7f8      	b.n	80165ae <__ascii_mbtowc+0x16>

080165bc <memmove>:
 80165bc:	4288      	cmp	r0, r1
 80165be:	b510      	push	{r4, lr}
 80165c0:	eb01 0402 	add.w	r4, r1, r2
 80165c4:	d902      	bls.n	80165cc <memmove+0x10>
 80165c6:	4284      	cmp	r4, r0
 80165c8:	4623      	mov	r3, r4
 80165ca:	d807      	bhi.n	80165dc <memmove+0x20>
 80165cc:	1e43      	subs	r3, r0, #1
 80165ce:	42a1      	cmp	r1, r4
 80165d0:	d008      	beq.n	80165e4 <memmove+0x28>
 80165d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165da:	e7f8      	b.n	80165ce <memmove+0x12>
 80165dc:	4402      	add	r2, r0
 80165de:	4601      	mov	r1, r0
 80165e0:	428a      	cmp	r2, r1
 80165e2:	d100      	bne.n	80165e6 <memmove+0x2a>
 80165e4:	bd10      	pop	{r4, pc}
 80165e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165ee:	e7f7      	b.n	80165e0 <memmove+0x24>

080165f0 <_realloc_r>:
 80165f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f4:	4680      	mov	r8, r0
 80165f6:	4614      	mov	r4, r2
 80165f8:	460e      	mov	r6, r1
 80165fa:	b921      	cbnz	r1, 8016606 <_realloc_r+0x16>
 80165fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016600:	4611      	mov	r1, r2
 8016602:	f7fc bdf7 	b.w	80131f4 <_malloc_r>
 8016606:	b92a      	cbnz	r2, 8016614 <_realloc_r+0x24>
 8016608:	f7fc fd88 	bl	801311c <_free_r>
 801660c:	4625      	mov	r5, r4
 801660e:	4628      	mov	r0, r5
 8016610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016614:	f000 fcbc 	bl	8016f90 <_malloc_usable_size_r>
 8016618:	4284      	cmp	r4, r0
 801661a:	4607      	mov	r7, r0
 801661c:	d802      	bhi.n	8016624 <_realloc_r+0x34>
 801661e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016622:	d812      	bhi.n	801664a <_realloc_r+0x5a>
 8016624:	4621      	mov	r1, r4
 8016626:	4640      	mov	r0, r8
 8016628:	f7fc fde4 	bl	80131f4 <_malloc_r>
 801662c:	4605      	mov	r5, r0
 801662e:	2800      	cmp	r0, #0
 8016630:	d0ed      	beq.n	801660e <_realloc_r+0x1e>
 8016632:	42bc      	cmp	r4, r7
 8016634:	4622      	mov	r2, r4
 8016636:	4631      	mov	r1, r6
 8016638:	bf28      	it	cs
 801663a:	463a      	movcs	r2, r7
 801663c:	f7fc fae6 	bl	8012c0c <memcpy>
 8016640:	4631      	mov	r1, r6
 8016642:	4640      	mov	r0, r8
 8016644:	f7fc fd6a 	bl	801311c <_free_r>
 8016648:	e7e1      	b.n	801660e <_realloc_r+0x1e>
 801664a:	4635      	mov	r5, r6
 801664c:	e7df      	b.n	801660e <_realloc_r+0x1e>

0801664e <_sungetc_r>:
 801664e:	b538      	push	{r3, r4, r5, lr}
 8016650:	1c4b      	adds	r3, r1, #1
 8016652:	4614      	mov	r4, r2
 8016654:	d103      	bne.n	801665e <_sungetc_r+0x10>
 8016656:	f04f 35ff 	mov.w	r5, #4294967295
 801665a:	4628      	mov	r0, r5
 801665c:	bd38      	pop	{r3, r4, r5, pc}
 801665e:	8993      	ldrh	r3, [r2, #12]
 8016660:	f023 0320 	bic.w	r3, r3, #32
 8016664:	8193      	strh	r3, [r2, #12]
 8016666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016668:	6852      	ldr	r2, [r2, #4]
 801666a:	b2cd      	uxtb	r5, r1
 801666c:	b18b      	cbz	r3, 8016692 <_sungetc_r+0x44>
 801666e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016670:	4293      	cmp	r3, r2
 8016672:	dd08      	ble.n	8016686 <_sungetc_r+0x38>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	1e5a      	subs	r2, r3, #1
 8016678:	6022      	str	r2, [r4, #0]
 801667a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801667e:	6863      	ldr	r3, [r4, #4]
 8016680:	3301      	adds	r3, #1
 8016682:	6063      	str	r3, [r4, #4]
 8016684:	e7e9      	b.n	801665a <_sungetc_r+0xc>
 8016686:	4621      	mov	r1, r4
 8016688:	f000 fc18 	bl	8016ebc <__submore>
 801668c:	2800      	cmp	r0, #0
 801668e:	d0f1      	beq.n	8016674 <_sungetc_r+0x26>
 8016690:	e7e1      	b.n	8016656 <_sungetc_r+0x8>
 8016692:	6921      	ldr	r1, [r4, #16]
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	b151      	cbz	r1, 80166ae <_sungetc_r+0x60>
 8016698:	4299      	cmp	r1, r3
 801669a:	d208      	bcs.n	80166ae <_sungetc_r+0x60>
 801669c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80166a0:	42a9      	cmp	r1, r5
 80166a2:	d104      	bne.n	80166ae <_sungetc_r+0x60>
 80166a4:	3b01      	subs	r3, #1
 80166a6:	3201      	adds	r2, #1
 80166a8:	6023      	str	r3, [r4, #0]
 80166aa:	6062      	str	r2, [r4, #4]
 80166ac:	e7d5      	b.n	801665a <_sungetc_r+0xc>
 80166ae:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80166b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166b6:	6363      	str	r3, [r4, #52]	; 0x34
 80166b8:	2303      	movs	r3, #3
 80166ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80166bc:	4623      	mov	r3, r4
 80166be:	f803 5f46 	strb.w	r5, [r3, #70]!
 80166c2:	6023      	str	r3, [r4, #0]
 80166c4:	2301      	movs	r3, #1
 80166c6:	e7dc      	b.n	8016682 <_sungetc_r+0x34>

080166c8 <__ssrefill_r>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	460c      	mov	r4, r1
 80166cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80166ce:	b169      	cbz	r1, 80166ec <__ssrefill_r+0x24>
 80166d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166d4:	4299      	cmp	r1, r3
 80166d6:	d001      	beq.n	80166dc <__ssrefill_r+0x14>
 80166d8:	f7fc fd20 	bl	801311c <_free_r>
 80166dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166de:	6063      	str	r3, [r4, #4]
 80166e0:	2000      	movs	r0, #0
 80166e2:	6360      	str	r0, [r4, #52]	; 0x34
 80166e4:	b113      	cbz	r3, 80166ec <__ssrefill_r+0x24>
 80166e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	bd10      	pop	{r4, pc}
 80166ec:	6923      	ldr	r3, [r4, #16]
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	2300      	movs	r3, #0
 80166f2:	6063      	str	r3, [r4, #4]
 80166f4:	89a3      	ldrh	r3, [r4, #12]
 80166f6:	f043 0320 	orr.w	r3, r3, #32
 80166fa:	81a3      	strh	r3, [r4, #12]
 80166fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016700:	e7f3      	b.n	80166ea <__ssrefill_r+0x22>
	...

08016704 <__ssvfiscanf_r>:
 8016704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016708:	460c      	mov	r4, r1
 801670a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801670e:	2100      	movs	r1, #0
 8016710:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016714:	49a6      	ldr	r1, [pc, #664]	; (80169b0 <__ssvfiscanf_r+0x2ac>)
 8016716:	91a0      	str	r1, [sp, #640]	; 0x280
 8016718:	f10d 0804 	add.w	r8, sp, #4
 801671c:	49a5      	ldr	r1, [pc, #660]	; (80169b4 <__ssvfiscanf_r+0x2b0>)
 801671e:	4fa6      	ldr	r7, [pc, #664]	; (80169b8 <__ssvfiscanf_r+0x2b4>)
 8016720:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80169bc <__ssvfiscanf_r+0x2b8>
 8016724:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016728:	4606      	mov	r6, r0
 801672a:	91a1      	str	r1, [sp, #644]	; 0x284
 801672c:	9300      	str	r3, [sp, #0]
 801672e:	7813      	ldrb	r3, [r2, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	f000 815a 	beq.w	80169ea <__ssvfiscanf_r+0x2e6>
 8016736:	5dd9      	ldrb	r1, [r3, r7]
 8016738:	f011 0108 	ands.w	r1, r1, #8
 801673c:	f102 0501 	add.w	r5, r2, #1
 8016740:	d019      	beq.n	8016776 <__ssvfiscanf_r+0x72>
 8016742:	6863      	ldr	r3, [r4, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	dd0f      	ble.n	8016768 <__ssvfiscanf_r+0x64>
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	781a      	ldrb	r2, [r3, #0]
 801674c:	5cba      	ldrb	r2, [r7, r2]
 801674e:	0712      	lsls	r2, r2, #28
 8016750:	d401      	bmi.n	8016756 <__ssvfiscanf_r+0x52>
 8016752:	462a      	mov	r2, r5
 8016754:	e7eb      	b.n	801672e <__ssvfiscanf_r+0x2a>
 8016756:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016758:	3201      	adds	r2, #1
 801675a:	9245      	str	r2, [sp, #276]	; 0x114
 801675c:	6862      	ldr	r2, [r4, #4]
 801675e:	3301      	adds	r3, #1
 8016760:	3a01      	subs	r2, #1
 8016762:	6062      	str	r2, [r4, #4]
 8016764:	6023      	str	r3, [r4, #0]
 8016766:	e7ec      	b.n	8016742 <__ssvfiscanf_r+0x3e>
 8016768:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801676a:	4621      	mov	r1, r4
 801676c:	4630      	mov	r0, r6
 801676e:	4798      	blx	r3
 8016770:	2800      	cmp	r0, #0
 8016772:	d0e9      	beq.n	8016748 <__ssvfiscanf_r+0x44>
 8016774:	e7ed      	b.n	8016752 <__ssvfiscanf_r+0x4e>
 8016776:	2b25      	cmp	r3, #37	; 0x25
 8016778:	d012      	beq.n	80167a0 <__ssvfiscanf_r+0x9c>
 801677a:	469a      	mov	sl, r3
 801677c:	6863      	ldr	r3, [r4, #4]
 801677e:	2b00      	cmp	r3, #0
 8016780:	f340 8091 	ble.w	80168a6 <__ssvfiscanf_r+0x1a2>
 8016784:	6822      	ldr	r2, [r4, #0]
 8016786:	7813      	ldrb	r3, [r2, #0]
 8016788:	4553      	cmp	r3, sl
 801678a:	f040 812e 	bne.w	80169ea <__ssvfiscanf_r+0x2e6>
 801678e:	6863      	ldr	r3, [r4, #4]
 8016790:	3b01      	subs	r3, #1
 8016792:	6063      	str	r3, [r4, #4]
 8016794:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016796:	3201      	adds	r2, #1
 8016798:	3301      	adds	r3, #1
 801679a:	6022      	str	r2, [r4, #0]
 801679c:	9345      	str	r3, [sp, #276]	; 0x114
 801679e:	e7d8      	b.n	8016752 <__ssvfiscanf_r+0x4e>
 80167a0:	9141      	str	r1, [sp, #260]	; 0x104
 80167a2:	9143      	str	r1, [sp, #268]	; 0x10c
 80167a4:	7853      	ldrb	r3, [r2, #1]
 80167a6:	2b2a      	cmp	r3, #42	; 0x2a
 80167a8:	bf02      	ittt	eq
 80167aa:	2310      	moveq	r3, #16
 80167ac:	1c95      	addeq	r5, r2, #2
 80167ae:	9341      	streq	r3, [sp, #260]	; 0x104
 80167b0:	220a      	movs	r2, #10
 80167b2:	46aa      	mov	sl, r5
 80167b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80167b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80167bc:	2b09      	cmp	r3, #9
 80167be:	d91d      	bls.n	80167fc <__ssvfiscanf_r+0xf8>
 80167c0:	487e      	ldr	r0, [pc, #504]	; (80169bc <__ssvfiscanf_r+0x2b8>)
 80167c2:	2203      	movs	r2, #3
 80167c4:	f7e9 fce4 	bl	8000190 <memchr>
 80167c8:	b140      	cbz	r0, 80167dc <__ssvfiscanf_r+0xd8>
 80167ca:	2301      	movs	r3, #1
 80167cc:	eba0 0009 	sub.w	r0, r0, r9
 80167d0:	fa03 f000 	lsl.w	r0, r3, r0
 80167d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167d6:	4318      	orrs	r0, r3
 80167d8:	9041      	str	r0, [sp, #260]	; 0x104
 80167da:	4655      	mov	r5, sl
 80167dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80167e0:	2b78      	cmp	r3, #120	; 0x78
 80167e2:	d806      	bhi.n	80167f2 <__ssvfiscanf_r+0xee>
 80167e4:	2b57      	cmp	r3, #87	; 0x57
 80167e6:	d810      	bhi.n	801680a <__ssvfiscanf_r+0x106>
 80167e8:	2b25      	cmp	r3, #37	; 0x25
 80167ea:	d0c6      	beq.n	801677a <__ssvfiscanf_r+0x76>
 80167ec:	d856      	bhi.n	801689c <__ssvfiscanf_r+0x198>
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d064      	beq.n	80168bc <__ssvfiscanf_r+0x1b8>
 80167f2:	2303      	movs	r3, #3
 80167f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80167f6:	230a      	movs	r3, #10
 80167f8:	9342      	str	r3, [sp, #264]	; 0x108
 80167fa:	e071      	b.n	80168e0 <__ssvfiscanf_r+0x1dc>
 80167fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80167fe:	fb02 1103 	mla	r1, r2, r3, r1
 8016802:	3930      	subs	r1, #48	; 0x30
 8016804:	9143      	str	r1, [sp, #268]	; 0x10c
 8016806:	4655      	mov	r5, sl
 8016808:	e7d3      	b.n	80167b2 <__ssvfiscanf_r+0xae>
 801680a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801680e:	2a20      	cmp	r2, #32
 8016810:	d8ef      	bhi.n	80167f2 <__ssvfiscanf_r+0xee>
 8016812:	a101      	add	r1, pc, #4	; (adr r1, 8016818 <__ssvfiscanf_r+0x114>)
 8016814:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016818:	080168cb 	.word	0x080168cb
 801681c:	080167f3 	.word	0x080167f3
 8016820:	080167f3 	.word	0x080167f3
 8016824:	08016929 	.word	0x08016929
 8016828:	080167f3 	.word	0x080167f3
 801682c:	080167f3 	.word	0x080167f3
 8016830:	080167f3 	.word	0x080167f3
 8016834:	080167f3 	.word	0x080167f3
 8016838:	080167f3 	.word	0x080167f3
 801683c:	080167f3 	.word	0x080167f3
 8016840:	080167f3 	.word	0x080167f3
 8016844:	0801693f 	.word	0x0801693f
 8016848:	08016915 	.word	0x08016915
 801684c:	080168a3 	.word	0x080168a3
 8016850:	080168a3 	.word	0x080168a3
 8016854:	080168a3 	.word	0x080168a3
 8016858:	080167f3 	.word	0x080167f3
 801685c:	08016919 	.word	0x08016919
 8016860:	080167f3 	.word	0x080167f3
 8016864:	080167f3 	.word	0x080167f3
 8016868:	080167f3 	.word	0x080167f3
 801686c:	080167f3 	.word	0x080167f3
 8016870:	0801694f 	.word	0x0801694f
 8016874:	08016921 	.word	0x08016921
 8016878:	080168c3 	.word	0x080168c3
 801687c:	080167f3 	.word	0x080167f3
 8016880:	080167f3 	.word	0x080167f3
 8016884:	0801694b 	.word	0x0801694b
 8016888:	080167f3 	.word	0x080167f3
 801688c:	08016915 	.word	0x08016915
 8016890:	080167f3 	.word	0x080167f3
 8016894:	080167f3 	.word	0x080167f3
 8016898:	080168cb 	.word	0x080168cb
 801689c:	3b45      	subs	r3, #69	; 0x45
 801689e:	2b02      	cmp	r3, #2
 80168a0:	d8a7      	bhi.n	80167f2 <__ssvfiscanf_r+0xee>
 80168a2:	2305      	movs	r3, #5
 80168a4:	e01b      	b.n	80168de <__ssvfiscanf_r+0x1da>
 80168a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80168a8:	4621      	mov	r1, r4
 80168aa:	4630      	mov	r0, r6
 80168ac:	4798      	blx	r3
 80168ae:	2800      	cmp	r0, #0
 80168b0:	f43f af68 	beq.w	8016784 <__ssvfiscanf_r+0x80>
 80168b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80168b6:	2800      	cmp	r0, #0
 80168b8:	f040 808d 	bne.w	80169d6 <__ssvfiscanf_r+0x2d2>
 80168bc:	f04f 30ff 	mov.w	r0, #4294967295
 80168c0:	e08f      	b.n	80169e2 <__ssvfiscanf_r+0x2de>
 80168c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80168c4:	f042 0220 	orr.w	r2, r2, #32
 80168c8:	9241      	str	r2, [sp, #260]	; 0x104
 80168ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80168cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80168d0:	9241      	str	r2, [sp, #260]	; 0x104
 80168d2:	2210      	movs	r2, #16
 80168d4:	2b6f      	cmp	r3, #111	; 0x6f
 80168d6:	9242      	str	r2, [sp, #264]	; 0x108
 80168d8:	bf34      	ite	cc
 80168da:	2303      	movcc	r3, #3
 80168dc:	2304      	movcs	r3, #4
 80168de:	9347      	str	r3, [sp, #284]	; 0x11c
 80168e0:	6863      	ldr	r3, [r4, #4]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	dd42      	ble.n	801696c <__ssvfiscanf_r+0x268>
 80168e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80168e8:	0659      	lsls	r1, r3, #25
 80168ea:	d404      	bmi.n	80168f6 <__ssvfiscanf_r+0x1f2>
 80168ec:	6823      	ldr	r3, [r4, #0]
 80168ee:	781a      	ldrb	r2, [r3, #0]
 80168f0:	5cba      	ldrb	r2, [r7, r2]
 80168f2:	0712      	lsls	r2, r2, #28
 80168f4:	d441      	bmi.n	801697a <__ssvfiscanf_r+0x276>
 80168f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80168f8:	2b02      	cmp	r3, #2
 80168fa:	dc50      	bgt.n	801699e <__ssvfiscanf_r+0x29a>
 80168fc:	466b      	mov	r3, sp
 80168fe:	4622      	mov	r2, r4
 8016900:	a941      	add	r1, sp, #260	; 0x104
 8016902:	4630      	mov	r0, r6
 8016904:	f000 f876 	bl	80169f4 <_scanf_chars>
 8016908:	2801      	cmp	r0, #1
 801690a:	d06e      	beq.n	80169ea <__ssvfiscanf_r+0x2e6>
 801690c:	2802      	cmp	r0, #2
 801690e:	f47f af20 	bne.w	8016752 <__ssvfiscanf_r+0x4e>
 8016912:	e7cf      	b.n	80168b4 <__ssvfiscanf_r+0x1b0>
 8016914:	220a      	movs	r2, #10
 8016916:	e7dd      	b.n	80168d4 <__ssvfiscanf_r+0x1d0>
 8016918:	2300      	movs	r3, #0
 801691a:	9342      	str	r3, [sp, #264]	; 0x108
 801691c:	2303      	movs	r3, #3
 801691e:	e7de      	b.n	80168de <__ssvfiscanf_r+0x1da>
 8016920:	2308      	movs	r3, #8
 8016922:	9342      	str	r3, [sp, #264]	; 0x108
 8016924:	2304      	movs	r3, #4
 8016926:	e7da      	b.n	80168de <__ssvfiscanf_r+0x1da>
 8016928:	4629      	mov	r1, r5
 801692a:	4640      	mov	r0, r8
 801692c:	f000 f9c6 	bl	8016cbc <__sccl>
 8016930:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016936:	9341      	str	r3, [sp, #260]	; 0x104
 8016938:	4605      	mov	r5, r0
 801693a:	2301      	movs	r3, #1
 801693c:	e7cf      	b.n	80168de <__ssvfiscanf_r+0x1da>
 801693e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016944:	9341      	str	r3, [sp, #260]	; 0x104
 8016946:	2300      	movs	r3, #0
 8016948:	e7c9      	b.n	80168de <__ssvfiscanf_r+0x1da>
 801694a:	2302      	movs	r3, #2
 801694c:	e7c7      	b.n	80168de <__ssvfiscanf_r+0x1da>
 801694e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016950:	06c3      	lsls	r3, r0, #27
 8016952:	f53f aefe 	bmi.w	8016752 <__ssvfiscanf_r+0x4e>
 8016956:	9b00      	ldr	r3, [sp, #0]
 8016958:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801695a:	1d19      	adds	r1, r3, #4
 801695c:	9100      	str	r1, [sp, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	f010 0f01 	tst.w	r0, #1
 8016964:	bf14      	ite	ne
 8016966:	801a      	strhne	r2, [r3, #0]
 8016968:	601a      	streq	r2, [r3, #0]
 801696a:	e6f2      	b.n	8016752 <__ssvfiscanf_r+0x4e>
 801696c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801696e:	4621      	mov	r1, r4
 8016970:	4630      	mov	r0, r6
 8016972:	4798      	blx	r3
 8016974:	2800      	cmp	r0, #0
 8016976:	d0b6      	beq.n	80168e6 <__ssvfiscanf_r+0x1e2>
 8016978:	e79c      	b.n	80168b4 <__ssvfiscanf_r+0x1b0>
 801697a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801697c:	3201      	adds	r2, #1
 801697e:	9245      	str	r2, [sp, #276]	; 0x114
 8016980:	6862      	ldr	r2, [r4, #4]
 8016982:	3a01      	subs	r2, #1
 8016984:	2a00      	cmp	r2, #0
 8016986:	6062      	str	r2, [r4, #4]
 8016988:	dd02      	ble.n	8016990 <__ssvfiscanf_r+0x28c>
 801698a:	3301      	adds	r3, #1
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	e7ad      	b.n	80168ec <__ssvfiscanf_r+0x1e8>
 8016990:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016992:	4621      	mov	r1, r4
 8016994:	4630      	mov	r0, r6
 8016996:	4798      	blx	r3
 8016998:	2800      	cmp	r0, #0
 801699a:	d0a7      	beq.n	80168ec <__ssvfiscanf_r+0x1e8>
 801699c:	e78a      	b.n	80168b4 <__ssvfiscanf_r+0x1b0>
 801699e:	2b04      	cmp	r3, #4
 80169a0:	dc0e      	bgt.n	80169c0 <__ssvfiscanf_r+0x2bc>
 80169a2:	466b      	mov	r3, sp
 80169a4:	4622      	mov	r2, r4
 80169a6:	a941      	add	r1, sp, #260	; 0x104
 80169a8:	4630      	mov	r0, r6
 80169aa:	f000 f87d 	bl	8016aa8 <_scanf_i>
 80169ae:	e7ab      	b.n	8016908 <__ssvfiscanf_r+0x204>
 80169b0:	0801664f 	.word	0x0801664f
 80169b4:	080166c9 	.word	0x080166c9
 80169b8:	08018926 	.word	0x08018926
 80169bc:	0801891a 	.word	0x0801891a
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <__ssvfiscanf_r+0x2ec>)
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	f43f aec5 	beq.w	8016752 <__ssvfiscanf_r+0x4e>
 80169c8:	466b      	mov	r3, sp
 80169ca:	4622      	mov	r2, r4
 80169cc:	a941      	add	r1, sp, #260	; 0x104
 80169ce:	4630      	mov	r0, r6
 80169d0:	f3af 8000 	nop.w
 80169d4:	e798      	b.n	8016908 <__ssvfiscanf_r+0x204>
 80169d6:	89a3      	ldrh	r3, [r4, #12]
 80169d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80169dc:	bf18      	it	ne
 80169de:	f04f 30ff 	movne.w	r0, #4294967295
 80169e2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80169e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 80169ec:	e7f9      	b.n	80169e2 <__ssvfiscanf_r+0x2de>
 80169ee:	bf00      	nop
 80169f0:	00000000 	.word	0x00000000

080169f4 <_scanf_chars>:
 80169f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169f8:	4615      	mov	r5, r2
 80169fa:	688a      	ldr	r2, [r1, #8]
 80169fc:	4680      	mov	r8, r0
 80169fe:	460c      	mov	r4, r1
 8016a00:	b932      	cbnz	r2, 8016a10 <_scanf_chars+0x1c>
 8016a02:	698a      	ldr	r2, [r1, #24]
 8016a04:	2a00      	cmp	r2, #0
 8016a06:	bf0c      	ite	eq
 8016a08:	2201      	moveq	r2, #1
 8016a0a:	f04f 32ff 	movne.w	r2, #4294967295
 8016a0e:	608a      	str	r2, [r1, #8]
 8016a10:	6822      	ldr	r2, [r4, #0]
 8016a12:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016aa4 <_scanf_chars+0xb0>
 8016a16:	06d1      	lsls	r1, r2, #27
 8016a18:	bf5f      	itttt	pl
 8016a1a:	681a      	ldrpl	r2, [r3, #0]
 8016a1c:	1d11      	addpl	r1, r2, #4
 8016a1e:	6019      	strpl	r1, [r3, #0]
 8016a20:	6816      	ldrpl	r6, [r2, #0]
 8016a22:	2700      	movs	r7, #0
 8016a24:	69a0      	ldr	r0, [r4, #24]
 8016a26:	b188      	cbz	r0, 8016a4c <_scanf_chars+0x58>
 8016a28:	2801      	cmp	r0, #1
 8016a2a:	d107      	bne.n	8016a3c <_scanf_chars+0x48>
 8016a2c:	682a      	ldr	r2, [r5, #0]
 8016a2e:	7811      	ldrb	r1, [r2, #0]
 8016a30:	6962      	ldr	r2, [r4, #20]
 8016a32:	5c52      	ldrb	r2, [r2, r1]
 8016a34:	b952      	cbnz	r2, 8016a4c <_scanf_chars+0x58>
 8016a36:	2f00      	cmp	r7, #0
 8016a38:	d031      	beq.n	8016a9e <_scanf_chars+0xaa>
 8016a3a:	e022      	b.n	8016a82 <_scanf_chars+0x8e>
 8016a3c:	2802      	cmp	r0, #2
 8016a3e:	d120      	bne.n	8016a82 <_scanf_chars+0x8e>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016a48:	071b      	lsls	r3, r3, #28
 8016a4a:	d41a      	bmi.n	8016a82 <_scanf_chars+0x8e>
 8016a4c:	6823      	ldr	r3, [r4, #0]
 8016a4e:	06da      	lsls	r2, r3, #27
 8016a50:	bf5e      	ittt	pl
 8016a52:	682b      	ldrpl	r3, [r5, #0]
 8016a54:	781b      	ldrbpl	r3, [r3, #0]
 8016a56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016a5a:	682a      	ldr	r2, [r5, #0]
 8016a5c:	686b      	ldr	r3, [r5, #4]
 8016a5e:	3201      	adds	r2, #1
 8016a60:	602a      	str	r2, [r5, #0]
 8016a62:	68a2      	ldr	r2, [r4, #8]
 8016a64:	3b01      	subs	r3, #1
 8016a66:	3a01      	subs	r2, #1
 8016a68:	606b      	str	r3, [r5, #4]
 8016a6a:	3701      	adds	r7, #1
 8016a6c:	60a2      	str	r2, [r4, #8]
 8016a6e:	b142      	cbz	r2, 8016a82 <_scanf_chars+0x8e>
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	dcd7      	bgt.n	8016a24 <_scanf_chars+0x30>
 8016a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a78:	4629      	mov	r1, r5
 8016a7a:	4640      	mov	r0, r8
 8016a7c:	4798      	blx	r3
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	d0d0      	beq.n	8016a24 <_scanf_chars+0x30>
 8016a82:	6823      	ldr	r3, [r4, #0]
 8016a84:	f013 0310 	ands.w	r3, r3, #16
 8016a88:	d105      	bne.n	8016a96 <_scanf_chars+0xa2>
 8016a8a:	68e2      	ldr	r2, [r4, #12]
 8016a8c:	3201      	adds	r2, #1
 8016a8e:	60e2      	str	r2, [r4, #12]
 8016a90:	69a2      	ldr	r2, [r4, #24]
 8016a92:	b102      	cbz	r2, 8016a96 <_scanf_chars+0xa2>
 8016a94:	7033      	strb	r3, [r6, #0]
 8016a96:	6923      	ldr	r3, [r4, #16]
 8016a98:	443b      	add	r3, r7
 8016a9a:	6123      	str	r3, [r4, #16]
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016aa2:	bf00      	nop
 8016aa4:	08018926 	.word	0x08018926

08016aa8 <_scanf_i>:
 8016aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	4698      	mov	r8, r3
 8016aae:	4b76      	ldr	r3, [pc, #472]	; (8016c88 <_scanf_i+0x1e0>)
 8016ab0:	460c      	mov	r4, r1
 8016ab2:	4682      	mov	sl, r0
 8016ab4:	4616      	mov	r6, r2
 8016ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016aba:	b087      	sub	sp, #28
 8016abc:	ab03      	add	r3, sp, #12
 8016abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ac2:	4b72      	ldr	r3, [pc, #456]	; (8016c8c <_scanf_i+0x1e4>)
 8016ac4:	69a1      	ldr	r1, [r4, #24]
 8016ac6:	4a72      	ldr	r2, [pc, #456]	; (8016c90 <_scanf_i+0x1e8>)
 8016ac8:	2903      	cmp	r1, #3
 8016aca:	bf18      	it	ne
 8016acc:	461a      	movne	r2, r3
 8016ace:	68a3      	ldr	r3, [r4, #8]
 8016ad0:	9201      	str	r2, [sp, #4]
 8016ad2:	1e5a      	subs	r2, r3, #1
 8016ad4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ad8:	bf88      	it	hi
 8016ada:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016ade:	4627      	mov	r7, r4
 8016ae0:	bf82      	ittt	hi
 8016ae2:	eb03 0905 	addhi.w	r9, r3, r5
 8016ae6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016aea:	60a3      	strhi	r3, [r4, #8]
 8016aec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016af0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016af4:	bf98      	it	ls
 8016af6:	f04f 0900 	movls.w	r9, #0
 8016afa:	6023      	str	r3, [r4, #0]
 8016afc:	463d      	mov	r5, r7
 8016afe:	f04f 0b00 	mov.w	fp, #0
 8016b02:	6831      	ldr	r1, [r6, #0]
 8016b04:	ab03      	add	r3, sp, #12
 8016b06:	7809      	ldrb	r1, [r1, #0]
 8016b08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016b0c:	2202      	movs	r2, #2
 8016b0e:	f7e9 fb3f 	bl	8000190 <memchr>
 8016b12:	b328      	cbz	r0, 8016b60 <_scanf_i+0xb8>
 8016b14:	f1bb 0f01 	cmp.w	fp, #1
 8016b18:	d159      	bne.n	8016bce <_scanf_i+0x126>
 8016b1a:	6862      	ldr	r2, [r4, #4]
 8016b1c:	b92a      	cbnz	r2, 8016b2a <_scanf_i+0x82>
 8016b1e:	6822      	ldr	r2, [r4, #0]
 8016b20:	2308      	movs	r3, #8
 8016b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b26:	6063      	str	r3, [r4, #4]
 8016b28:	6022      	str	r2, [r4, #0]
 8016b2a:	6822      	ldr	r2, [r4, #0]
 8016b2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016b30:	6022      	str	r2, [r4, #0]
 8016b32:	68a2      	ldr	r2, [r4, #8]
 8016b34:	1e51      	subs	r1, r2, #1
 8016b36:	60a1      	str	r1, [r4, #8]
 8016b38:	b192      	cbz	r2, 8016b60 <_scanf_i+0xb8>
 8016b3a:	6832      	ldr	r2, [r6, #0]
 8016b3c:	1c51      	adds	r1, r2, #1
 8016b3e:	6031      	str	r1, [r6, #0]
 8016b40:	7812      	ldrb	r2, [r2, #0]
 8016b42:	f805 2b01 	strb.w	r2, [r5], #1
 8016b46:	6872      	ldr	r2, [r6, #4]
 8016b48:	3a01      	subs	r2, #1
 8016b4a:	2a00      	cmp	r2, #0
 8016b4c:	6072      	str	r2, [r6, #4]
 8016b4e:	dc07      	bgt.n	8016b60 <_scanf_i+0xb8>
 8016b50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016b54:	4631      	mov	r1, r6
 8016b56:	4650      	mov	r0, sl
 8016b58:	4790      	blx	r2
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	f040 8085 	bne.w	8016c6a <_scanf_i+0x1c2>
 8016b60:	f10b 0b01 	add.w	fp, fp, #1
 8016b64:	f1bb 0f03 	cmp.w	fp, #3
 8016b68:	d1cb      	bne.n	8016b02 <_scanf_i+0x5a>
 8016b6a:	6863      	ldr	r3, [r4, #4]
 8016b6c:	b90b      	cbnz	r3, 8016b72 <_scanf_i+0xca>
 8016b6e:	230a      	movs	r3, #10
 8016b70:	6063      	str	r3, [r4, #4]
 8016b72:	6863      	ldr	r3, [r4, #4]
 8016b74:	4947      	ldr	r1, [pc, #284]	; (8016c94 <_scanf_i+0x1ec>)
 8016b76:	6960      	ldr	r0, [r4, #20]
 8016b78:	1ac9      	subs	r1, r1, r3
 8016b7a:	f000 f89f 	bl	8016cbc <__sccl>
 8016b7e:	f04f 0b00 	mov.w	fp, #0
 8016b82:	68a3      	ldr	r3, [r4, #8]
 8016b84:	6822      	ldr	r2, [r4, #0]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d03d      	beq.n	8016c06 <_scanf_i+0x15e>
 8016b8a:	6831      	ldr	r1, [r6, #0]
 8016b8c:	6960      	ldr	r0, [r4, #20]
 8016b8e:	f891 c000 	ldrb.w	ip, [r1]
 8016b92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d035      	beq.n	8016c06 <_scanf_i+0x15e>
 8016b9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016b9e:	d124      	bne.n	8016bea <_scanf_i+0x142>
 8016ba0:	0510      	lsls	r0, r2, #20
 8016ba2:	d522      	bpl.n	8016bea <_scanf_i+0x142>
 8016ba4:	f10b 0b01 	add.w	fp, fp, #1
 8016ba8:	f1b9 0f00 	cmp.w	r9, #0
 8016bac:	d003      	beq.n	8016bb6 <_scanf_i+0x10e>
 8016bae:	3301      	adds	r3, #1
 8016bb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016bb4:	60a3      	str	r3, [r4, #8]
 8016bb6:	6873      	ldr	r3, [r6, #4]
 8016bb8:	3b01      	subs	r3, #1
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	6073      	str	r3, [r6, #4]
 8016bbe:	dd1b      	ble.n	8016bf8 <_scanf_i+0x150>
 8016bc0:	6833      	ldr	r3, [r6, #0]
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	6033      	str	r3, [r6, #0]
 8016bc6:	68a3      	ldr	r3, [r4, #8]
 8016bc8:	3b01      	subs	r3, #1
 8016bca:	60a3      	str	r3, [r4, #8]
 8016bcc:	e7d9      	b.n	8016b82 <_scanf_i+0xda>
 8016bce:	f1bb 0f02 	cmp.w	fp, #2
 8016bd2:	d1ae      	bne.n	8016b32 <_scanf_i+0x8a>
 8016bd4:	6822      	ldr	r2, [r4, #0]
 8016bd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016bda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016bde:	d1bf      	bne.n	8016b60 <_scanf_i+0xb8>
 8016be0:	2310      	movs	r3, #16
 8016be2:	6063      	str	r3, [r4, #4]
 8016be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016be8:	e7a2      	b.n	8016b30 <_scanf_i+0x88>
 8016bea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016bee:	6022      	str	r2, [r4, #0]
 8016bf0:	780b      	ldrb	r3, [r1, #0]
 8016bf2:	f805 3b01 	strb.w	r3, [r5], #1
 8016bf6:	e7de      	b.n	8016bb6 <_scanf_i+0x10e>
 8016bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016bfc:	4631      	mov	r1, r6
 8016bfe:	4650      	mov	r0, sl
 8016c00:	4798      	blx	r3
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d0df      	beq.n	8016bc6 <_scanf_i+0x11e>
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	05db      	lsls	r3, r3, #23
 8016c0a:	d50d      	bpl.n	8016c28 <_scanf_i+0x180>
 8016c0c:	42bd      	cmp	r5, r7
 8016c0e:	d909      	bls.n	8016c24 <_scanf_i+0x17c>
 8016c10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c18:	4632      	mov	r2, r6
 8016c1a:	4650      	mov	r0, sl
 8016c1c:	4798      	blx	r3
 8016c1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016c22:	464d      	mov	r5, r9
 8016c24:	42bd      	cmp	r5, r7
 8016c26:	d02d      	beq.n	8016c84 <_scanf_i+0x1dc>
 8016c28:	6822      	ldr	r2, [r4, #0]
 8016c2a:	f012 0210 	ands.w	r2, r2, #16
 8016c2e:	d113      	bne.n	8016c58 <_scanf_i+0x1b0>
 8016c30:	702a      	strb	r2, [r5, #0]
 8016c32:	6863      	ldr	r3, [r4, #4]
 8016c34:	9e01      	ldr	r6, [sp, #4]
 8016c36:	4639      	mov	r1, r7
 8016c38:	4650      	mov	r0, sl
 8016c3a:	47b0      	blx	r6
 8016c3c:	6821      	ldr	r1, [r4, #0]
 8016c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c42:	f011 0f20 	tst.w	r1, #32
 8016c46:	d013      	beq.n	8016c70 <_scanf_i+0x1c8>
 8016c48:	1d1a      	adds	r2, r3, #4
 8016c4a:	f8c8 2000 	str.w	r2, [r8]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6018      	str	r0, [r3, #0]
 8016c52:	68e3      	ldr	r3, [r4, #12]
 8016c54:	3301      	adds	r3, #1
 8016c56:	60e3      	str	r3, [r4, #12]
 8016c58:	1bed      	subs	r5, r5, r7
 8016c5a:	44ab      	add	fp, r5
 8016c5c:	6925      	ldr	r5, [r4, #16]
 8016c5e:	445d      	add	r5, fp
 8016c60:	6125      	str	r5, [r4, #16]
 8016c62:	2000      	movs	r0, #0
 8016c64:	b007      	add	sp, #28
 8016c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c6a:	f04f 0b00 	mov.w	fp, #0
 8016c6e:	e7ca      	b.n	8016c06 <_scanf_i+0x15e>
 8016c70:	1d1a      	adds	r2, r3, #4
 8016c72:	f8c8 2000 	str.w	r2, [r8]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	f011 0f01 	tst.w	r1, #1
 8016c7c:	bf14      	ite	ne
 8016c7e:	8018      	strhne	r0, [r3, #0]
 8016c80:	6018      	streq	r0, [r3, #0]
 8016c82:	e7e6      	b.n	8016c52 <_scanf_i+0x1aa>
 8016c84:	2001      	movs	r0, #1
 8016c86:	e7ed      	b.n	8016c64 <_scanf_i+0x1bc>
 8016c88:	08018430 	.word	0x08018430
 8016c8c:	08015f35 	.word	0x08015f35
 8016c90:	08016eb9 	.word	0x08016eb9
 8016c94:	08018aab 	.word	0x08018aab

08016c98 <_read_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d07      	ldr	r5, [pc, #28]	; (8016cb8 <_read_r+0x20>)
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	4608      	mov	r0, r1
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	602a      	str	r2, [r5, #0]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f7f3 fe18 	bl	800a8dc <_read>
 8016cac:	1c43      	adds	r3, r0, #1
 8016cae:	d102      	bne.n	8016cb6 <_read_r+0x1e>
 8016cb0:	682b      	ldr	r3, [r5, #0]
 8016cb2:	b103      	cbz	r3, 8016cb6 <_read_r+0x1e>
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	2000a7b4 	.word	0x2000a7b4

08016cbc <__sccl>:
 8016cbc:	b570      	push	{r4, r5, r6, lr}
 8016cbe:	780b      	ldrb	r3, [r1, #0]
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	2b5e      	cmp	r3, #94	; 0x5e
 8016cc4:	bf0b      	itete	eq
 8016cc6:	784b      	ldrbeq	r3, [r1, #1]
 8016cc8:	1c48      	addne	r0, r1, #1
 8016cca:	1c88      	addeq	r0, r1, #2
 8016ccc:	2200      	movne	r2, #0
 8016cce:	bf08      	it	eq
 8016cd0:	2201      	moveq	r2, #1
 8016cd2:	1e61      	subs	r1, r4, #1
 8016cd4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016cd8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016cdc:	42a9      	cmp	r1, r5
 8016cde:	d1fb      	bne.n	8016cd8 <__sccl+0x1c>
 8016ce0:	b90b      	cbnz	r3, 8016ce6 <__sccl+0x2a>
 8016ce2:	3801      	subs	r0, #1
 8016ce4:	bd70      	pop	{r4, r5, r6, pc}
 8016ce6:	f082 0201 	eor.w	r2, r2, #1
 8016cea:	54e2      	strb	r2, [r4, r3]
 8016cec:	4605      	mov	r5, r0
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016cf4:	292d      	cmp	r1, #45	; 0x2d
 8016cf6:	d006      	beq.n	8016d06 <__sccl+0x4a>
 8016cf8:	295d      	cmp	r1, #93	; 0x5d
 8016cfa:	d0f3      	beq.n	8016ce4 <__sccl+0x28>
 8016cfc:	b909      	cbnz	r1, 8016d02 <__sccl+0x46>
 8016cfe:	4628      	mov	r0, r5
 8016d00:	e7f0      	b.n	8016ce4 <__sccl+0x28>
 8016d02:	460b      	mov	r3, r1
 8016d04:	e7f1      	b.n	8016cea <__sccl+0x2e>
 8016d06:	786e      	ldrb	r6, [r5, #1]
 8016d08:	2e5d      	cmp	r6, #93	; 0x5d
 8016d0a:	d0fa      	beq.n	8016d02 <__sccl+0x46>
 8016d0c:	42b3      	cmp	r3, r6
 8016d0e:	dcf8      	bgt.n	8016d02 <__sccl+0x46>
 8016d10:	3502      	adds	r5, #2
 8016d12:	4619      	mov	r1, r3
 8016d14:	3101      	adds	r1, #1
 8016d16:	428e      	cmp	r6, r1
 8016d18:	5462      	strb	r2, [r4, r1]
 8016d1a:	dcfb      	bgt.n	8016d14 <__sccl+0x58>
 8016d1c:	1af1      	subs	r1, r6, r3
 8016d1e:	3901      	subs	r1, #1
 8016d20:	1c58      	adds	r0, r3, #1
 8016d22:	42b3      	cmp	r3, r6
 8016d24:	bfa8      	it	ge
 8016d26:	2100      	movge	r1, #0
 8016d28:	1843      	adds	r3, r0, r1
 8016d2a:	e7e0      	b.n	8016cee <__sccl+0x32>

08016d2c <_raise_r>:
 8016d2c:	291f      	cmp	r1, #31
 8016d2e:	b538      	push	{r3, r4, r5, lr}
 8016d30:	4604      	mov	r4, r0
 8016d32:	460d      	mov	r5, r1
 8016d34:	d904      	bls.n	8016d40 <_raise_r+0x14>
 8016d36:	2316      	movs	r3, #22
 8016d38:	6003      	str	r3, [r0, #0]
 8016d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d3e:	bd38      	pop	{r3, r4, r5, pc}
 8016d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d42:	b112      	cbz	r2, 8016d4a <_raise_r+0x1e>
 8016d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d48:	b94b      	cbnz	r3, 8016d5e <_raise_r+0x32>
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f000 f830 	bl	8016db0 <_getpid_r>
 8016d50:	462a      	mov	r2, r5
 8016d52:	4601      	mov	r1, r0
 8016d54:	4620      	mov	r0, r4
 8016d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d5a:	f000 b817 	b.w	8016d8c <_kill_r>
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d00a      	beq.n	8016d78 <_raise_r+0x4c>
 8016d62:	1c59      	adds	r1, r3, #1
 8016d64:	d103      	bne.n	8016d6e <_raise_r+0x42>
 8016d66:	2316      	movs	r3, #22
 8016d68:	6003      	str	r3, [r0, #0]
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	e7e7      	b.n	8016d3e <_raise_r+0x12>
 8016d6e:	2400      	movs	r4, #0
 8016d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d74:	4628      	mov	r0, r5
 8016d76:	4798      	blx	r3
 8016d78:	2000      	movs	r0, #0
 8016d7a:	e7e0      	b.n	8016d3e <_raise_r+0x12>

08016d7c <raise>:
 8016d7c:	4b02      	ldr	r3, [pc, #8]	; (8016d88 <raise+0xc>)
 8016d7e:	4601      	mov	r1, r0
 8016d80:	6818      	ldr	r0, [r3, #0]
 8016d82:	f7ff bfd3 	b.w	8016d2c <_raise_r>
 8016d86:	bf00      	nop
 8016d88:	20000020 	.word	0x20000020

08016d8c <_kill_r>:
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	4d07      	ldr	r5, [pc, #28]	; (8016dac <_kill_r+0x20>)
 8016d90:	2300      	movs	r3, #0
 8016d92:	4604      	mov	r4, r0
 8016d94:	4608      	mov	r0, r1
 8016d96:	4611      	mov	r1, r2
 8016d98:	602b      	str	r3, [r5, #0]
 8016d9a:	f7f3 fd85 	bl	800a8a8 <_kill>
 8016d9e:	1c43      	adds	r3, r0, #1
 8016da0:	d102      	bne.n	8016da8 <_kill_r+0x1c>
 8016da2:	682b      	ldr	r3, [r5, #0]
 8016da4:	b103      	cbz	r3, 8016da8 <_kill_r+0x1c>
 8016da6:	6023      	str	r3, [r4, #0]
 8016da8:	bd38      	pop	{r3, r4, r5, pc}
 8016daa:	bf00      	nop
 8016dac:	2000a7b4 	.word	0x2000a7b4

08016db0 <_getpid_r>:
 8016db0:	f7f3 bd72 	b.w	800a898 <_getpid>

08016db4 <_strtol_l.constprop.0>:
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dba:	d001      	beq.n	8016dc0 <_strtol_l.constprop.0+0xc>
 8016dbc:	2b24      	cmp	r3, #36	; 0x24
 8016dbe:	d906      	bls.n	8016dce <_strtol_l.constprop.0+0x1a>
 8016dc0:	f7fb fdd8 	bl	8012974 <__errno>
 8016dc4:	2316      	movs	r3, #22
 8016dc6:	6003      	str	r3, [r0, #0]
 8016dc8:	2000      	movs	r0, #0
 8016dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016eb4 <_strtol_l.constprop.0+0x100>
 8016dd2:	460d      	mov	r5, r1
 8016dd4:	462e      	mov	r6, r5
 8016dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016dda:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016dde:	f017 0708 	ands.w	r7, r7, #8
 8016de2:	d1f7      	bne.n	8016dd4 <_strtol_l.constprop.0+0x20>
 8016de4:	2c2d      	cmp	r4, #45	; 0x2d
 8016de6:	d132      	bne.n	8016e4e <_strtol_l.constprop.0+0x9a>
 8016de8:	782c      	ldrb	r4, [r5, #0]
 8016dea:	2701      	movs	r7, #1
 8016dec:	1cb5      	adds	r5, r6, #2
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d05b      	beq.n	8016eaa <_strtol_l.constprop.0+0xf6>
 8016df2:	2b10      	cmp	r3, #16
 8016df4:	d109      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016df6:	2c30      	cmp	r4, #48	; 0x30
 8016df8:	d107      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016dfa:	782c      	ldrb	r4, [r5, #0]
 8016dfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e00:	2c58      	cmp	r4, #88	; 0x58
 8016e02:	d14d      	bne.n	8016ea0 <_strtol_l.constprop.0+0xec>
 8016e04:	786c      	ldrb	r4, [r5, #1]
 8016e06:	2310      	movs	r3, #16
 8016e08:	3502      	adds	r5, #2
 8016e0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e12:	f04f 0c00 	mov.w	ip, #0
 8016e16:	fbb8 f9f3 	udiv	r9, r8, r3
 8016e1a:	4666      	mov	r6, ip
 8016e1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8016e20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016e24:	f1be 0f09 	cmp.w	lr, #9
 8016e28:	d816      	bhi.n	8016e58 <_strtol_l.constprop.0+0xa4>
 8016e2a:	4674      	mov	r4, lr
 8016e2c:	42a3      	cmp	r3, r4
 8016e2e:	dd24      	ble.n	8016e7a <_strtol_l.constprop.0+0xc6>
 8016e30:	f1bc 0f00 	cmp.w	ip, #0
 8016e34:	db1e      	blt.n	8016e74 <_strtol_l.constprop.0+0xc0>
 8016e36:	45b1      	cmp	r9, r6
 8016e38:	d31c      	bcc.n	8016e74 <_strtol_l.constprop.0+0xc0>
 8016e3a:	d101      	bne.n	8016e40 <_strtol_l.constprop.0+0x8c>
 8016e3c:	45a2      	cmp	sl, r4
 8016e3e:	db19      	blt.n	8016e74 <_strtol_l.constprop.0+0xc0>
 8016e40:	fb06 4603 	mla	r6, r6, r3, r4
 8016e44:	f04f 0c01 	mov.w	ip, #1
 8016e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e4c:	e7e8      	b.n	8016e20 <_strtol_l.constprop.0+0x6c>
 8016e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8016e50:	bf04      	itt	eq
 8016e52:	782c      	ldrbeq	r4, [r5, #0]
 8016e54:	1cb5      	addeq	r5, r6, #2
 8016e56:	e7ca      	b.n	8016dee <_strtol_l.constprop.0+0x3a>
 8016e58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016e5c:	f1be 0f19 	cmp.w	lr, #25
 8016e60:	d801      	bhi.n	8016e66 <_strtol_l.constprop.0+0xb2>
 8016e62:	3c37      	subs	r4, #55	; 0x37
 8016e64:	e7e2      	b.n	8016e2c <_strtol_l.constprop.0+0x78>
 8016e66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016e6a:	f1be 0f19 	cmp.w	lr, #25
 8016e6e:	d804      	bhi.n	8016e7a <_strtol_l.constprop.0+0xc6>
 8016e70:	3c57      	subs	r4, #87	; 0x57
 8016e72:	e7db      	b.n	8016e2c <_strtol_l.constprop.0+0x78>
 8016e74:	f04f 3cff 	mov.w	ip, #4294967295
 8016e78:	e7e6      	b.n	8016e48 <_strtol_l.constprop.0+0x94>
 8016e7a:	f1bc 0f00 	cmp.w	ip, #0
 8016e7e:	da05      	bge.n	8016e8c <_strtol_l.constprop.0+0xd8>
 8016e80:	2322      	movs	r3, #34	; 0x22
 8016e82:	6003      	str	r3, [r0, #0]
 8016e84:	4646      	mov	r6, r8
 8016e86:	b942      	cbnz	r2, 8016e9a <_strtol_l.constprop.0+0xe6>
 8016e88:	4630      	mov	r0, r6
 8016e8a:	e79e      	b.n	8016dca <_strtol_l.constprop.0+0x16>
 8016e8c:	b107      	cbz	r7, 8016e90 <_strtol_l.constprop.0+0xdc>
 8016e8e:	4276      	negs	r6, r6
 8016e90:	2a00      	cmp	r2, #0
 8016e92:	d0f9      	beq.n	8016e88 <_strtol_l.constprop.0+0xd4>
 8016e94:	f1bc 0f00 	cmp.w	ip, #0
 8016e98:	d000      	beq.n	8016e9c <_strtol_l.constprop.0+0xe8>
 8016e9a:	1e69      	subs	r1, r5, #1
 8016e9c:	6011      	str	r1, [r2, #0]
 8016e9e:	e7f3      	b.n	8016e88 <_strtol_l.constprop.0+0xd4>
 8016ea0:	2430      	movs	r4, #48	; 0x30
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1b1      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016ea6:	2308      	movs	r3, #8
 8016ea8:	e7af      	b.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016eaa:	2c30      	cmp	r4, #48	; 0x30
 8016eac:	d0a5      	beq.n	8016dfa <_strtol_l.constprop.0+0x46>
 8016eae:	230a      	movs	r3, #10
 8016eb0:	e7ab      	b.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016eb2:	bf00      	nop
 8016eb4:	08018926 	.word	0x08018926

08016eb8 <_strtol_r>:
 8016eb8:	f7ff bf7c 	b.w	8016db4 <_strtol_l.constprop.0>

08016ebc <__submore>:
 8016ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ec8:	4299      	cmp	r1, r3
 8016eca:	d11d      	bne.n	8016f08 <__submore+0x4c>
 8016ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016ed0:	f7fc f990 	bl	80131f4 <_malloc_r>
 8016ed4:	b918      	cbnz	r0, 8016ede <__submore+0x22>
 8016ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ee2:	63a3      	str	r3, [r4, #56]	; 0x38
 8016ee4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016eee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016ef2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016ef6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016efa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016efe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016f02:	6020      	str	r0, [r4, #0]
 8016f04:	2000      	movs	r0, #0
 8016f06:	e7e8      	b.n	8016eda <__submore+0x1e>
 8016f08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016f0a:	0077      	lsls	r7, r6, #1
 8016f0c:	463a      	mov	r2, r7
 8016f0e:	f7ff fb6f 	bl	80165f0 <_realloc_r>
 8016f12:	4605      	mov	r5, r0
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d0de      	beq.n	8016ed6 <__submore+0x1a>
 8016f18:	eb00 0806 	add.w	r8, r0, r6
 8016f1c:	4601      	mov	r1, r0
 8016f1e:	4632      	mov	r2, r6
 8016f20:	4640      	mov	r0, r8
 8016f22:	f7fb fe73 	bl	8012c0c <memcpy>
 8016f26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016f2a:	f8c4 8000 	str.w	r8, [r4]
 8016f2e:	e7e9      	b.n	8016f04 <__submore+0x48>

08016f30 <__ascii_wctomb>:
 8016f30:	b149      	cbz	r1, 8016f46 <__ascii_wctomb+0x16>
 8016f32:	2aff      	cmp	r2, #255	; 0xff
 8016f34:	bf85      	ittet	hi
 8016f36:	238a      	movhi	r3, #138	; 0x8a
 8016f38:	6003      	strhi	r3, [r0, #0]
 8016f3a:	700a      	strbls	r2, [r1, #0]
 8016f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f40:	bf98      	it	ls
 8016f42:	2001      	movls	r0, #1
 8016f44:	4770      	bx	lr
 8016f46:	4608      	mov	r0, r1
 8016f48:	4770      	bx	lr
	...

08016f4c <_fstat_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	4d07      	ldr	r5, [pc, #28]	; (8016f6c <_fstat_r+0x20>)
 8016f50:	2300      	movs	r3, #0
 8016f52:	4604      	mov	r4, r0
 8016f54:	4608      	mov	r0, r1
 8016f56:	4611      	mov	r1, r2
 8016f58:	602b      	str	r3, [r5, #0]
 8016f5a:	f7f3 fd04 	bl	800a966 <_fstat>
 8016f5e:	1c43      	adds	r3, r0, #1
 8016f60:	d102      	bne.n	8016f68 <_fstat_r+0x1c>
 8016f62:	682b      	ldr	r3, [r5, #0]
 8016f64:	b103      	cbz	r3, 8016f68 <_fstat_r+0x1c>
 8016f66:	6023      	str	r3, [r4, #0]
 8016f68:	bd38      	pop	{r3, r4, r5, pc}
 8016f6a:	bf00      	nop
 8016f6c:	2000a7b4 	.word	0x2000a7b4

08016f70 <_isatty_r>:
 8016f70:	b538      	push	{r3, r4, r5, lr}
 8016f72:	4d06      	ldr	r5, [pc, #24]	; (8016f8c <_isatty_r+0x1c>)
 8016f74:	2300      	movs	r3, #0
 8016f76:	4604      	mov	r4, r0
 8016f78:	4608      	mov	r0, r1
 8016f7a:	602b      	str	r3, [r5, #0]
 8016f7c:	f7f3 fd03 	bl	800a986 <_isatty>
 8016f80:	1c43      	adds	r3, r0, #1
 8016f82:	d102      	bne.n	8016f8a <_isatty_r+0x1a>
 8016f84:	682b      	ldr	r3, [r5, #0]
 8016f86:	b103      	cbz	r3, 8016f8a <_isatty_r+0x1a>
 8016f88:	6023      	str	r3, [r4, #0]
 8016f8a:	bd38      	pop	{r3, r4, r5, pc}
 8016f8c:	2000a7b4 	.word	0x2000a7b4

08016f90 <_malloc_usable_size_r>:
 8016f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f94:	1f18      	subs	r0, r3, #4
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	bfbc      	itt	lt
 8016f9a:	580b      	ldrlt	r3, [r1, r0]
 8016f9c:	18c0      	addlt	r0, r0, r3
 8016f9e:	4770      	bx	lr

08016fa0 <_init>:
 8016fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fa2:	bf00      	nop
 8016fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fa6:	bc08      	pop	{r3}
 8016fa8:	469e      	mov	lr, r3
 8016faa:	4770      	bx	lr

08016fac <_fini>:
 8016fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fae:	bf00      	nop
 8016fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fb2:	bc08      	pop	{r3}
 8016fb4:	469e      	mov	lr, r3
 8016fb6:	4770      	bx	lr

08016fb8 <__FLASH_Program_Fast_veneer>:
 8016fb8:	f85f f000 	ldr.w	pc, [pc]	; 8016fbc <__FLASH_Program_Fast_veneer+0x4>
 8016fbc:	20000255 	.word	0x20000255

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000005                                ....

20000010 <environ>:
20000010:	2000a6b8                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <impure_data>:
20000024:	00000000 08018a48 08018a68 08018a28     ....H...h...(...
	...

20000084 <_tzname>:
20000084:	080186cc 080186cc 00000000              ............

20000090 <tzinfo>:
20000090:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000c0:	0000004a 00000000 00000000 00000000     J...............
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	08016f31 08016599 00000000 08018925     1o...e......%...
200001d8:	08018a90 08018740 08018740 08018740     ....@...@...@...
200001e8:	08018740 08018740 08018740 08018740     @...@...@...@...
200001f8:	08018740 08018740 ffffffff ffffffff     @...@...........
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b480      	push	{r7}
20000256:	b089      	sub	sp, #36	; 0x24
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000025e:	2380      	movs	r3, #128	; 0x80
20000260:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b18      	ldr	r3, [pc, #96]	; (200002cc <FLASH_Program_Fast+0x78>)
2000026c:	695b      	ldr	r3, [r3, #20]
2000026e:	4a17      	ldr	r2, [pc, #92]	; (200002cc <FLASH_Program_Fast+0x78>)
20000270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000274:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000276:	f3ef 8310 	mrs	r3, PRIMASK
2000027a:	60fb      	str	r3, [r7, #12]
  return(result);
2000027c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000027e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000280:	b672      	cpsid	i
}
20000282:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	69bb      	ldr	r3, [r7, #24]
2000028a:	601a      	str	r2, [r3, #0]
    dest_addr++;
2000028c:	69bb      	ldr	r3, [r7, #24]
2000028e:	3304      	adds	r3, #4
20000290:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000292:	697b      	ldr	r3, [r7, #20]
20000294:	3304      	adds	r3, #4
20000296:	617b      	str	r3, [r7, #20]
    row_index--;
20000298:	7ffb      	ldrb	r3, [r7, #31]
2000029a:	3b01      	subs	r3, #1
2000029c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000029e:	7ffb      	ldrb	r3, [r7, #31]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d1ef      	bne.n	20000284 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200002a4:	bf00      	nop
200002a6:	4b09      	ldr	r3, [pc, #36]	; (200002cc <FLASH_Program_Fast+0x78>)
200002a8:	691b      	ldr	r3, [r3, #16]
200002aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200002ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200002b2:	d0f8      	beq.n	200002a6 <FLASH_Program_Fast+0x52>
200002b4:	693b      	ldr	r3, [r7, #16]
200002b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b8:	68bb      	ldr	r3, [r7, #8]
200002ba:	f383 8810 	msr	PRIMASK, r3
}
200002be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002c0:	bf00      	nop
200002c2:	3724      	adds	r7, #36	; 0x24
200002c4:	46bd      	mov	sp, r7
200002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002ca:	4770      	bx	lr
200002cc:	58004000 	.word	0x58004000
